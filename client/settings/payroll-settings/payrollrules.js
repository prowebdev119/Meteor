import {TaxRateService} from "../settings-service";
import {ReactiveVar} from 'meteor/reactive-var';
import {CountryService} from '../../js/country-service';
import {SideBarService} from '../../js/sidebar-service';
import { UtilityService } from "../../utility-service";
import { AccountService } from "../../accounts/account-service";
import { RateTypeService } from '../../js/ratetype_service';
import { OrganisationService } from "../../js/organisation-service";
import '../../lib/global/indexdbstorage.js';
import 'jquery-editable-select';
import { Random } from 'meteor/random';
import { Session } from 'meteor/session';
import f from "jspdf";

let sideBarService = new SideBarService();
let utilityService = new UtilityService();

Template.payrollrules.onCreated(function() {
    const templateObject = Template.instance();
    templateObject.datatablerecords = new ReactiveVar([]);
    templateObject.datatableallowancerecords = new ReactiveVar([]);
    templateObject.tableheaderrecords = new ReactiveVar([]);
    templateObject.countryData = new ReactiveVar();
    templateObject.Ratetypes = new ReactiveVar([]);
    templateObject.imageFileData=new ReactiveVar();
    templateObject.Accounts = new ReactiveVar([]);   
});

Template.payrollrules.onRendered(function() {
   
    $('.fullScreenSpin').css('display', 'inline-block');
    let templateObject = Template.instance();
    let taxRateService = new TaxRateService();
    let accountService = new AccountService();
    let organisationService = new OrganisationService();
    const dataTableList = [];
    const tableHeaderList = [];
    var splashArrayAllowanceList = new Array();
    var splashArrayDeductionList = new Array();
    var splashArrayLeaveList = new Array();
    var splashArrayUnLeaveList = new Array();
    var splashArrayCalenderList = new Array();
    var splashArrayReisument = new Array();
    var splashArraySuperannuationList = new Array();
    var splashArrayHolidayList = new Array();
    var splashArrayEarningList = new Array();
    var leavetypearraylist = [];
    var uleavetypearraylist = [];
    var countryService = new CountryService();
    let countries = [];


    let tabid = FlowRouter.current().queryParams.active_key;

    if(tabid == "calender")
    {    
        $('#cal-tab').addClass('active');
        $('#calendars').addClass('active show');

        $('#org-tab').removeClass('active');
        $('#hol-tab').removeClass('active');
        $('#pay-tab').removeClass('active');
        $('#sup-tab').removeClass('active');  
        $('#organisation').removeClass('active show');
        $('#holidays').removeClass('active show');
        $('#payitems').removeClass('active show');
        $('#superannuation').removeClass('active show');

    }
    else if(tabid == "super"){

        $('#sup-tab').addClass('active');  
        $('#superannuation').addClass('active show');
    
    
        $('#cal-tab').removeClass('active');
        $('#calendars').removeClass('active show');

        $('#org-tab').removeClass('active');
        $('#hol-tab').removeClass('active');
        $('#pay-tab').removeClass('active');
        
        $('#organisation').removeClass('active show');
        $('#holidays').removeClass('active show');
        $('#payitems').removeClass('active show');
        

    }
    else if(tabid == "holiday"){
       
        $('#hol-tab').addClass('active');
        $('#holidays').addClass('active show');
       
        $('#cal-tab').removeClass('active');
        $('#calendars').removeClass('active show');
        $('#org-tab').removeClass('active');
        $('#pay-tab').removeClass('active');
        $('#sup-tab').removeClass('active');  
        $('#organisation').removeClass('active show');
        $('#payitems').removeClass('active show');
        $('#superannuation').removeClass('active show');

    }
    else if(tabid == "payitem"){
        let itemtype = FlowRouter.current().queryParams.itemtype;

       

        $('#pay-tab').addClass('active');
        $('#payitems').addClass('active show');


        if(itemtype === 'deduction')
        {
            $('#deductions').css('display', 'block');
            $('#earnings').css('display', 'none');
            $('#allowances').css('display', 'none');
            $('#reimbursements').css('display', 'none');
            $('#leave').css('display', 'none');

        }
        else if(itemtype === 'resimu')
        {   
            $('#deductions').css('display', 'none');
            $('#earnings').css('display', 'none');
            $('#allowances').css('display', 'none');
            $('#reimbursements').css('display', 'block');
            $('#leave').css('display', 'none');

        }
        else if(itemtype === 'earning')
        {
            $('#deductions').css('display', 'none');
            $('#earnings').css('display', 'block');
            $('#allowances').css('display', 'none');
            $('#reimbursements').css('display', 'none');
            $('#leave').css('display', 'none');

        }
        else if(itemtype === 'paidleave')
        {
            $('#deductions').css('display', 'none');
            $('#earnings').css('display', 'none');
            $('#allowances').css('display', 'none');
            $('#reimbursements').css('display', 'none');
            $('#leave').css('display', 'block');

        }
        else
        {
            $('#deductions').css('display', 'none');
            $('#earnings').css('display', 'none');
            $('#allowances').css('display', 'block');
            $('#reimbursements').css('display', 'none');
            $('#leave').css('display', 'none');

        }



        $('#cal-tab').removeClass('active');
        $('#calendars').removeClass('active show');
        $('#org-tab').removeClass('active');
        $('#hol-tab').removeClass('active');    
        $('#sup-tab').removeClass('active');  
        $('#organisation').removeClass('active show');
        $('#holidays').removeClass('active show');       
        $('#superannuation').removeClass('active show');

    }
    else
    {
        $('#pay-tab').removeClass('active');
        $('#payitems').removeClass('active show');
        $('#cal-tab').removeClass('active');
        $('#calendars').removeClass('active show');
        $('#org-tab').addClass('active');
        $('#hol-tab').removeClass('active');    
        $('#sup-tab').removeClass('active');  
        $('#organisation').addClass('active');('active show');
        $('#holidays').removeClass('active show');       
        $('#superannuation').removeClass('active show');
    }

    $("#date-input,#edtStartDate,#edtFirstPaymentDate,#edtHolidayDate").datepicker({
        showOn: 'button',
        buttonText: 'Show Date',
        buttonImageOnly: true,
        buttonImage: '/img/imgCal2.png',
        dateFormat: 'dd/mm/yy',
        showOtherMonths: true,
        selectOtherMonths: true,
        changeMonth: true,
        changeYear: true,
        yearRange: "-90:+10",
    });

    function MakeNegative() {
        $('td').each(function() {
            if ($(this).text().indexOf('-' + Currency) >= 0) $(this).addClass('text-danger')
        });
    };

    templateObject.resetData = function (dataVal) {
        location.reload();
    }
     
    templateObject.getAllAllowance = function() {
    getVS1Data('TAllowance').then(function(dataObject) {
        if (dataObject.length == 0) {
          sideBarService.getAllowance(initialBaseDataLoad, 0).then(function (data) {
              addVS1Data('TAllowance', JSON.stringify(data));
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.tallowance.length; i++) {
                  let allowanceAmount = utilityService.modifynegativeCurrencyFormat(data.tallowance[i].fields.Amount) || 0.00;

                  var dataListAllowance = [
                      data.tallowance[i].fields.ID || 0,
                      data.tallowance[i].fields.Description || '-',
                      data.tallowance[i].fields.AllowanceType || '',
                      data.tallowance[i].fields.DisplayIn || '',
                      allowanceAmount || 0.00,
                      data.tallowance[i].fields.Accountname || '',
                      data.tallowance[i].fields.Accountid || 0,
                      data.tallowance[i].fields.Payrolltaxexempt || false,
                      data.tallowance[i].fields.Superinc || false,
                      data.tallowance[i].fields.Workcoverexempt || false,
                      '<td contenteditable="false" class="colDeleteAllowances"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                  ];

                  splashArrayAllowanceList.push(dataListAllowance);
              }

              function MakeNegative() {
                  $('td').each(function () {
                      if ($(this).text().indexOf('-' + Currency) >= 0) $(this).addClass('text-danger')
                  });
              };


              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblAlowances').DataTable({

                      data: splashArrayAllowanceList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [
                          {
                              className: "colAlowancesID hiddenColumn",
                              "targets": [0]
                          },
                          {
                              className: "colAllowancesNames",
                              "targets": [1]
                          },  {
                              className: "colAllowancesType",
                              "targets": [2]
                          }, {
                              className: "colAllowancesDisplayName",
                              "targets": [3]
                          }, {
                              className: "colAllowancesAmount  text-right",
                              "targets": [4]
                          }, {
                              className: "colAllowancesAccounts",
                              "targets": [5]
                          }, {
                              className: "colAllowancesAccountsID hiddenColumn",
                              "targets": [6]
                          }, {
                              className: "colAllowancesPAYG hiddenColumn",
                              "targets": [7]
                          }, {
                              className: "colAllowancesSuperannuation hiddenColumn",
                              "targets": [8]
                          }, {
                              className: "colAllowancesReportableasW1 hiddenColumn",
                              "targets": [9]
                          }, {
                              className: "colDeleteAllowances",
                              "orderable": false,
                              "targets": -1
                          }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblAlowances').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblAlowances_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {

                              }
                          } else {

                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }

                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayAllowanceListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblAlowances_filter input').val();

                                  sideBarService.getAllowance(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (dataObjectnew) {

                                              for (let j = 0; j < dataObjectnew.tallowance.length; j++) {

                                                  let allowanceAmount = utilityService.modifynegativeCurrencyFormat(dataObjectnew.tallowance[j].fields.Amount) || 0.00;

                                                  var dataListCustomerDupp = [
                                                    dataObjectnewdataObjectnew.tallowance[i].fields.ID || 0,
                                                    dataObjectnew.tallowance[i].fields.Description || '-',
                                                    dataObjectnew.tallowance[i].fields.AllowanceType || '',
                                                    dataObjectnew.tallowance[i].fields.DisplayIn || '',
                                                    allowanceAmount || 0.00,
                                                    dataObjectnew.tallowance[i].fields.Accountname || '',
                                                    dataObjectnew.tallowance[i].fields.Accountid || 0,
                                                    dataObjectnew.tallowance[i].fields.Payrolltaxexempt || false,
                                                    dataObjectnewdataObjectnew.tallowance[i].fields.Superinc || false,
                                                    dataObjectnew.tallowance[i].fields.Workcoverexempt || false,
                                                    '<td contenteditable="false" class="colDeleteAllowances"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                                  ];

                                                  splashArrayAllowanceList.push(dataListCustomerDupp);
                                                  //}
                                              }

                                              let uniqueChars = [...new Set(splashArrayAllowanceList)];
                                              var datatable = $('#tblAlowances').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblAlowances").dataTable().fnPageChange('last');
                                              }, 400);

                                              $('.fullScreenSpin').css('display', 'none');


                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });

                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                          $("<button class='btn btn-primary btnAddNewAllowance' data-dismiss='modal' data-toggle='modal' data-target='#allowanceModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblAlowances_filter");
                          $("<button class='btn btn-primary btnRefreshAllowance' type='button' id='btnRefreshAllowance' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblAlowances_filter");

                      }

                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);

                  }).on('column-reorder', function () {

                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayAllowanceList = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');

                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getAllowance(dataLenght, 0).then(function (dataNonBo) {

                                addVS1Data('TAllowance', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });


              }, 0);

              $('div.dataTables_filter input').addClass('form-control form-control-sm');

              $('.fullScreenSpin').css('display', 'none');
          }).catch(function (err) {
            $('.fullScreenSpin').css('display', 'none');
          });
        }else{

          let data = JSON.parse(dataObject[0].data);
          
          console.log(data);
          let useData = data;
          let lineItems = [];
          let lineItemObj = {};
          for (let i = 0; i < data.tallowance.length; i++) {
              let allowanceAmount = utilityService.modifynegativeCurrencyFormat(data.tallowance[i].fields.Amount) || 0.00;

              var dataListAllowance = [
                  data.tallowance[i].fields.ID || 0,
                  data.tallowance[i].fields.Description || '-',
                  data.tallowance[i].fields.AllowanceType || '',
                  data.tallowance[i].fields.DisplayIn || '',
                  allowanceAmount || 0.00,
                  data.tallowance[i].fields.Accountname || '',
                  data.tallowance[i].fields.Accountid || 0,
                  data.tallowance[i].fields.Payrolltaxexempt || false,
                  data.tallowance[i].fields.Superinc || false,
                  data.tallowance[i].fields.Workcoverexempt || false,
                  '<td contenteditable="false" class="colDeleteAllowances"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
              ];

              splashArrayAllowanceList.push(dataListAllowance);
          }

          function MakeNegative() {
              $('td').each(function () {
                  if ($(this).text().indexOf('-' + Currency) >= 0) $(this).addClass('text-danger')
              });
          };


          setTimeout(function () {
              MakeNegative();
          }, 100);
          setTimeout(function () {
              $('#tblAlowances').DataTable({

                  data: splashArrayAllowanceList,
                  "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                  columnDefs: [
                      {
                          className: "colAlowancesID hiddenColumn",
                          "targets": [0]
                      },
                      {
                          className: "colAllowancesNames",
                          "targets": [1]
                      },  {
                          className: "colAllowancesType",
                          "targets": [2]
                      }, {
                          className: "colAllowancesDisplayName",
                          "targets": [3]
                      }, {
                          className: "colAllowancesAmount  text-right",
                          "targets": [4]
                      }, {
                          className: "colAllowancesAccounts",
                          "targets": [5]
                      }, {
                          className: "colAllowancesAccountsID hiddenColumn",
                          "targets": [6]
                      }, {
                          className: "colAllowancesPAYG hiddenColumn",
                          "targets": [7]
                      }, {
                          className: "colAllowancesSuperannuation hiddenColumn",
                          "targets": [8]
                      }, {
                          className: "colAllowancesReportableasW1 hiddenColumn",
                          "targets": [9]
                      }, {
                          className: "colDeleteAllowances",
                          "orderable": false,
                          "targets": -1
                      }
                  ],
                  select: true,
                  destroy: true,
                  colReorder: true,
                  pageLength: initialDatatableLoad,
                  lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                  info: true,
                  responsive: true,
                  "order": [[0, "asc"]],
                  action: function () {
                      $('#tblAlowances').DataTable().ajax.reload();
                  },
                  "fnDrawCallback": function (oSettings) {
                      $('.paginate_button.page-item').removeClass('disabled');
                      $('#tblAlowances_ellipsis').addClass('disabled');
                      if (oSettings._iDisplayLength == -1) {
                          if (oSettings.fnRecordsDisplay() > 150) {

                          }
                      } else {

                      }
                      if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                          $('.paginate_button.page-item.next').addClass('disabled');
                      }

                      $('.paginate_button.next:not(.disabled)', this.api().table().container())
                          .on('click', function () {
                              $('.fullScreenSpin').css('display', 'inline-block');
                              var splashArrayAllowanceListDupp = new Array();
                              let dataLenght = oSettings._iDisplayLength;
                              let customerSearch = $('#tblAlowances_filter input').val();

                              sideBarService.getAllowance(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (dataObjectnew) {

                                          for (let j = 0; j < dataObjectnew.tallowance.length; j++) {

                                              let allowanceAmount = utilityService.modifynegativeCurrencyFormat(dataObjectnew.tallowance[j].fields.Amount) || 0.00;

                                              var dataListCustomerDupp = [
                                                dataObjectnewdataObjectnew.tallowance[i].fields.ID || 0,
                                                dataObjectnew.tallowance[i].fields.Description || '-',
                                                dataObjectnew.tallowance[i].fields.AllowanceType || '',
                                                dataObjectnew.tallowance[i].fields.DisplayIn || '',
                                                allowanceAmount || 0.00,
                                                dataObjectnew.tallowance[i].fields.Accountname || '',
                                                dataObjectnew.tallowance[i].fields.Accountid || 0,
                                                dataObjectnew.tallowance[i].fields.Payrolltaxexempt || false,
                                                dataObjectnewdataObjectnew.tallowance[i].fields.Superinc || false,
                                                dataObjectnew.tallowance[i].fields.Workcoverexempt || false,
                                                '<td contenteditable="false" class="colDeleteAllowances"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                              ];

                                              splashArrayAllowanceList.push(dataListCustomerDupp);
                                              //}
                                          }

                                          let uniqueChars = [...new Set(splashArrayAllowanceList)];
                                          var datatable = $('#tblAlowances').DataTable();
                                          datatable.clear();
                                          datatable.rows.add(uniqueChars);
                                          datatable.draw(false);
                                          setTimeout(function () {
                                            $("#tblAlowances").dataTable().fnPageChange('last');
                                          }, 400);

                                          $('.fullScreenSpin').css('display', 'none');


                              }).catch(function (err) {
                                  $('.fullScreenSpin').css('display', 'none');
                              });

                          });
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  },
                  "fnInitComplete": function () {
                      $("<button class='btn btn-primary btnAddNewAllowance' data-dismiss='modal' data-toggle='modal' data-target='#allowanceModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblAlowances_filter");
                      $("<button class='btn btn-primary btnRefreshAllowance' type='button' id='btnRefreshAllowance' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblAlowances_filter");

                  }

              }).on('page', function () {
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);

              }).on('column-reorder', function () {

              }).on('length.dt', function (e, settings, len) {
                //$('.fullScreenSpin').css('display', 'inline-block');
                let dataLenght = settings._iDisplayLength;
                splashArrayAllowanceList = [];
                if (dataLenght == -1) {
                  $('.fullScreenSpin').css('display', 'none');

                } else {
                    if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                        $('.fullScreenSpin').css('display', 'none');
                    } else {
                        sideBarService.getAllowance(dataLenght, 0).then(function (dataNonBo) {

                            addVS1Data('TAllowance', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                templateObject.resetData(dataNonBo);
                                $('.fullScreenSpin').css('display', 'none');
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }).catch(function (err) {
                            $('.fullScreenSpin').css('display', 'none');
                        });
                    }
                }
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
              });


          }, 0);

          $('div.dataTables_filter input').addClass('form-control form-control-sm');
          $('.fullScreenSpin').css('display', 'none');

        }
    }).catch(function(err) {
      sideBarService.getAllowance(initialBaseDataLoad, 0).then(function (data) {
          addVS1Data('TAllowance', JSON.stringify(data));
          let lineItems = [];
          let lineItemObj = {};
          for (let i = 0; i < data.tallowance.length; i++) {
              let allowanceAmount = utilityService.modifynegativeCurrencyFormat(data.tallowance[i].fields.Amount) || 0.00;

              var dataListAllowance = [
                  data.tallowance[i].fields.ID || 0,
                  data.tallowance[i].fields.Description || '-',
                  data.tallowance[i].fields.AllowanceType || '',
                  data.tallowance[i].fields.DisplayIn || '',
                  allowanceAmount || 0.00,
                  data.tallowance[i].fields.Accountname || '',
                  data.tallowance[i].fields.Accountid || 0,
                  data.tallowance[i].fields.Payrolltaxexempt || false,
                  data.tallowance[i].fields.Superinc || false,
                  data.tallowance[i].fields.Workcoverexempt || false,
                  '<td contenteditable="false" class="colDeleteAllowances"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
              ];

              splashArrayAllowanceList.push(dataListAllowance);
          }

          function MakeNegative() {
              $('td').each(function () {
                  if ($(this).text().indexOf('-' + Currency) >= 0) $(this).addClass('text-danger')
              });
          };


          setTimeout(function () {
              MakeNegative();
          }, 100);
          setTimeout(function () {
              $('#tblAlowances').DataTable({

                  data: splashArrayAllowanceList,
                  "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                  columnDefs: [
                      {
                          className: "colAlowancesID hiddenColumn",
                          "targets": [0]
                      },
                      {
                          className: "colAllowancesNames",
                          "targets": [1]
                      },  {
                          className: "colAllowancesType",
                          "targets": [2]
                      }, {
                          className: "colAllowancesDisplayName",
                          "targets": [3]
                      }, {
                          className: "colAllowancesAmount  text-right",
                          "targets": [4]
                      }, {
                          className: "colAllowancesAccounts",
                          "targets": [5]
                      }, {
                          className: "colAllowancesAccountsID hiddenColumn",
                          "targets": [6]
                      }, {
                          className: "colAllowancesPAYG hiddenColumn",
                          "targets": [7]
                      }, {
                          className: "colAllowancesSuperannuation hiddenColumn",
                          "targets": [8]
                      }, {
                          className: "colAllowancesReportableasW1 hiddenColumn",
                          "targets": [9]
                      }, {
                          className: "colDeleteAllowances",
                          "orderable": false,
                          "targets": -1
                      }
                  ],
                  select: true,
                  destroy: true,
                  colReorder: true,
                  pageLength: initialDatatableLoad,
                  lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                  info: true,
                  responsive: true,
                  "order": [[0, "asc"]],
                  action: function () {
                      $('#tblAlowances').DataTable().ajax.reload();
                  },
                  "fnDrawCallback": function (oSettings) {
                      $('.paginate_button.page-item').removeClass('disabled');
                      $('#tblAlowances_ellipsis').addClass('disabled');
                      if (oSettings._iDisplayLength == -1) {
                          if (oSettings.fnRecordsDisplay() > 150) {

                          }
                      } else {

                      }
                      if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                          $('.paginate_button.page-item.next').addClass('disabled');
                      }

                      $('.paginate_button.next:not(.disabled)', this.api().table().container())
                          .on('click', function () {
                              $('.fullScreenSpin').css('display', 'inline-block');
                              var splashArrayAllowanceListDupp = new Array();
                              let dataLenght = oSettings._iDisplayLength;
                              let customerSearch = $('#tblAlowances_filter input').val();

                              sideBarService.getAllowance(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (dataObjectnew) {

                                          for (let j = 0; j < dataObjectnew.tallowance.length; j++) {

                                              let allowanceAmount = utilityService.modifynegativeCurrencyFormat(dataObjectnew.tallowance[j].fields.Amount) || 0.00;

                                              var dataListCustomerDupp = [
                                                dataObjectnewdataObjectnew.tallowance[i].fields.ID || 0,
                                                dataObjectnew.tallowance[i].fields.Description || '-',
                                                dataObjectnew.tallowance[i].fields.AllowanceType || '',
                                                dataObjectnew.tallowance[i].fields.DisplayIn || '',
                                                allowanceAmount || 0.00,
                                                dataObjectnew.tallowance[i].fields.Accountname || '',
                                                dataObjectnew.tallowance[i].fields.Accountid || 0,
                                                dataObjectnew.tallowance[i].fields.Payrolltaxexempt || false,
                                                dataObjectnewdataObjectnew.tallowance[i].fields.Superinc || false,
                                                dataObjectnew.tallowance[i].fields.Workcoverexempt || false,
                                                '<td contenteditable="false" class="colDeleteAllowances"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                              ];

                                              splashArrayAllowanceList.push(dataListCustomerDupp);
                                              //}
                                          }

                                          let uniqueChars = [...new Set(splashArrayAllowanceList)];
                                          var datatable = $('#tblAlowances').DataTable();
                                          datatable.clear();
                                          datatable.rows.add(uniqueChars);
                                          datatable.draw(false);
                                          setTimeout(function () {
                                            $("#tblAlowances").dataTable().fnPageChange('last');
                                          }, 400);

                                          $('.fullScreenSpin').css('display', 'none');


                              }).catch(function (err) {
                                  $('.fullScreenSpin').css('display', 'none');
                              });

                          });
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  },
                  "fnInitComplete": function () {
                      $("<button class='btn btn-primary btnAddNewAllowance' data-dismiss='modal' data-toggle='modal' data-target='#allowanceModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblAlowances_filter");
                      $("<button class='btn btn-primary btnRefreshAllowance' type='button' id='btnRefreshAllowance' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblAlowances_filter");

                  }

              }).on('page', function () {
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);

              }).on('column-reorder', function () {

              }).on('length.dt', function (e, settings, len) {
                //$('.fullScreenSpin').css('display', 'inline-block');
                let dataLenght = settings._iDisplayLength;
                splashArrayAllowanceList = [];
                if (dataLenght == -1) {
                  $('.fullScreenSpin').css('display', 'none');

                } else {
                    if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                        $('.fullScreenSpin').css('display', 'none');
                    } else {
                        sideBarService.getAllowance(dataLenght, 0).then(function (dataNonBo) {

                            addVS1Data('TAllowance', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                templateObject.resetData(dataNonBo);
                                $('.fullScreenSpin').css('display', 'none');
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }).catch(function (err) {
                            $('.fullScreenSpin').css('display', 'none');
                        });
                    }
                }
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
              });


          }, 0);

          $('div.dataTables_filter input').addClass('form-control form-control-sm');

          $('.fullScreenSpin').css('display', 'none');
      }).catch(function (err) {
        $('.fullScreenSpin').css('display', 'none');
      });
    });
    };
    templateObject.getAllAllowance();

    templateObject.getAllDeductions = function() {
    getVS1Data('TDeduction').then(function(dataObject) {
        if (dataObject.length == 0) {
          sideBarService.getDeduction(initialBaseDataLoad, 0).then(function (data) {
              addVS1Data('TDeduction', JSON.stringify(data));
              let lineItems = [];
              let lineItemObj = {};
              let deductionTypeVal = 'None';
              for (let i = 0; i < data.tdeduction.length; i++) {
                  let deductionAmount = utilityService.modifynegativeCurrencyFormat(data.tdeduction[i].fields.Amount) || 0.00;
                  if(data.tdeduction[i].fields.Taxexempt == true){
                    deductionTypeVal = 'None';
                  }else{
                    if(data.tdeduction[i].fields.IsWorkPlacegiving == true){
                      deductionTypeVal = 'Workplace Giving';
                    }

                    if(data.tdeduction[i].fields.Unionfees == true){
                      deductionTypeVal = 'Union / Association Fees';
                    }
                  }
                  var dataListDeduction = [
                      data.tdeduction[i].fields.ID || 0,
                      data.tdeduction[i].fields.Description || '-',
                      deductionTypeVal || 'None',
                      data.tdeduction[i].fields.Displayin || '',
                      deductionAmount || 0.00,
                      data.tdeduction[i].fields.Accountname || '',
                      data.tdeduction[i].fields.Accountid || 0,
                      data.tdeduction[i].fields.Payrolltaxexempt || false,
                      data.tdeduction[i].fields.Superinc || false,
                      data.tdeduction[i].fields.Workcoverexempt || false,
                      '<td contenteditable="false" class="colDeleteDeductions"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                  ];

                  splashArrayDeductionList.push(dataListDeduction);
              }

              function MakeNegative() {
                  $('td').each(function () {
                      if ($(this).text().indexOf('-' + Currency) >= 0) $(this).addClass('text-danger')
                  });
              };


              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblDeductions').DataTable({

                      data: splashArrayDeductionList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [
                          {
                              className: "colDeductionsID hiddenColumn",
                              "targets": [0]
                          },
                          {
                              className: "colDeductionsNames",
                              "targets": [1]
                          },  {
                              className: "colDeductionsType",
                              "targets": [2]
                          }, {
                              className: "colDeductionsDisplayName",
                              "targets": [3]
                          }, {
                              className: "colDeductionsAmount  text-right",
                              "targets": [4]
                          }, {
                              className: "colDeductionsAccounts",
                              "targets": [5]
                          }, {
                              className: "colDeductionsAccountsID hiddenColumn",
                              "targets": [6]
                          }, {
                              className: "colDeductionsPAYG hiddenColumn",
                              "targets": [7]
                          }, {
                              className: "colDeductionsSuperannuation hiddenColumn",
                              "targets": [8]
                          }, {
                              className: "colDeductionsReportableasW1 hiddenColumn",
                              "targets": [9]
                          }, {
                              className: "colDeleteDeductions",
                              "orderable": false,
                              "targets": -1
                          }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblDeductions').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblDeductions_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {

                              }
                          } else {

                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }

                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayDeductionListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblDeductions_filter input').val();

                                  sideBarService.getDeduction(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (dataObjectnew) {

                                              for (let j = 0; j < dataObjectnew.tdeduction.length; j++) {

                                                  let allowanceAmount = utilityService.modifynegativeCurrencyFormat(dataObjectnew.tdeduction[j].fields.Amount) || 0.00;

                                                  var dataListCustomerDupp = [
                                                    dataObjectnewdataObjectnew.tdeduction[i].fields.ID || 0,
                                                    dataObjectnew.tdeduction[i].fields.Description || '-',
                                                    dataObjectnew.tdeduction[i].fields.DeductionType || '',
                                                    dataObjectnew.tdeduction[i].fields.DisplayIn || '',
                                                    allowanceAmount || 0.00,
                                                    dataObjectnew.tdeduction[i].fields.Accountname || '',
                                                    dataObjectnew.tdeduction[i].fields.Accountid || 0,
                                                    dataObjectnew.tdeduction[i].fields.Payrolltaxexempt || false,
                                                    dataObjectnewdataObjectnew.tdeduction[i].fields.Superinc || false,
                                                    dataObjectnew.tdeduction[i].fields.Workcoverexempt || false,
                                                    '<td contenteditable="false" class="colDeleteDeductions"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                                  ];

                                                  splashArrayDeductionList.push(dataListCustomerDupp);
                                                  //}
                                              }

                                              let uniqueChars = [...new Set(splashArrayDeductionList)];
                                              var datatable = $('#tblDeductions').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblDeductions").dataTable().fnPageChange('last');
                                              }, 400);

                                              $('.fullScreenSpin').css('display', 'none');


                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });

                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                          $("<button class='btn btn-primary btnAddNewDeduction' data-dismiss='modal' data-toggle='modal'  type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblDeductions_filter");
                          $("<button class='btn btn-primary btnRefreshDeduction' type='button' id='btnRefreshDeduction' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblDeductions_filter");

                      }

                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);

                  }).on('column-reorder', function () {

                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayDeductionList = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');

                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getDeduction(dataLenght, 0).then(function (dataNonBo) {

                                addVS1Data('TDeduction', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });


              }, 0);

              $('div.dataTables_filter input').addClass('form-control form-control-sm');

              $('.fullScreenSpin').css('display', 'none');
          }).catch(function (err) {
            $('.fullScreenSpin').css('display', 'none');
          });
        }else{

          let data = JSON.parse(dataObject[0].data);

          console.log(data);
          let useData = data;
          let lineItems = [];
          let lineItemObj = {};
          let deductionTypeVal = 'None';
          for (let i = 0; i < data.tdeduction.length; i++) {
              let deductionAmount = utilityService.modifynegativeCurrencyFormat(data.tdeduction[i].fields.Amount) || 0.00;
              if(data.tdeduction[i].fields.Taxexempt == true){
                deductionTypeVal = 'None';
              }else{
                if(data.tdeduction[i].fields.IsWorkPlacegiving == true){
                  deductionTypeVal = 'Workplace Giving';
                }

                if(data.tdeduction[i].fields.Unionfees == true){
                  deductionTypeVal = 'Union / Association Fees';
                }
              }
              var dataListDeduction = [
                  data.tdeduction[i].fields.ID || 0,
                  data.tdeduction[i].fields.Description || '-',
                  deductionTypeVal || 'None',
                  data.tdeduction[i].fields.Displayin || '',
                  deductionAmount || 0.00,
                  data.tdeduction[i].fields.Accountname || '',
                  data.tdeduction[i].fields.Accountid || 0,
                  data.tdeduction[i].fields.Payrolltaxexempt || false,
                  data.tdeduction[i].fields.Superinc || false,
                  data.tdeduction[i].fields.Workcoverexempt || false,
                  '<td contenteditable="false" class="colDeleteDeductions"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
              ];

              splashArrayDeductionList.push(dataListDeduction);
          }

          function MakeNegative() {
              $('td').each(function () {
                  if ($(this).text().indexOf('-' + Currency) >= 0) $(this).addClass('text-danger')
              });
          };


          setTimeout(function () {
              MakeNegative();
          }, 100);
          setTimeout(function () {
              $('#tblDeductions').DataTable({

                  data: splashArrayDeductionList,
                  "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                  columnDefs: [
                      {
                          className: "colDeductionsID hiddenColumn",
                          "targets": [0]
                      },
                      {
                          className: "colDeductionsNames",
                          "targets": [1]
                      },  {
                          className: "colDeductionsType",
                          "targets": [2]
                      }, {
                          className: "colDeductionsDisplayName",
                          "targets": [3]
                      }, {
                          className: "colDeductionsAmount  text-right",
                          "targets": [4]
                      }, {
                          className: "colDeductionsAccounts",
                          "targets": [5]
                      }, {
                          className: "colDeductionsAccountsID hiddenColumn",
                          "targets": [6]
                      }, {
                          className: "colDeductionsPAYG hiddenColumn",
                          "targets": [7]
                      }, {
                          className: "colDeductionsSuperannuation hiddenColumn",
                          "targets": [8]
                      }, {
                          className: "colDeductionsReportableasW1 hiddenColumn",
                          "targets": [9]
                      }, {
                          className: "colDeleteDeductions",
                          "orderable": false,
                          "targets": -1
                      }
                  ],
                  select: true,
                  destroy: true,
                  colReorder: true,
                  pageLength: initialDatatableLoad,
                  lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                  info: true,
                  responsive: true,
                  "order": [[0, "asc"]],
                  action: function () {
                      $('#tblDeductions').DataTable().ajax.reload();
                  },
                  "fnDrawCallback": function (oSettings) {
                      $('.paginate_button.page-item').removeClass('disabled');
                      $('#tblDeductions_ellipsis').addClass('disabled');
                      if (oSettings._iDisplayLength == -1) {
                          if (oSettings.fnRecordsDisplay() > 150) {

                          }
                      } else {

                      }
                      if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                          $('.paginate_button.page-item.next').addClass('disabled');
                      }

                      $('.paginate_button.next:not(.disabled)', this.api().table().container())
                          .on('click', function () {
                              $('.fullScreenSpin').css('display', 'inline-block');
                              var splashArrayDeductionListDupp = new Array();
                              let dataLenght = oSettings._iDisplayLength;
                              let customerSearch = $('#tblDeductions_filter input').val();

                              sideBarService.getDeduction(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (dataObjectnew) {

                                          for (let j = 0; j < dataObjectnew.tdeduction.length; j++) {

                                              let allowanceAmount = utilityService.modifynegativeCurrencyFormat(dataObjectnew.tdeduction[j].fields.Amount) || 0.00;

                                              var dataListCustomerDupp = [
                                                dataObjectnewdataObjectnew.tdeduction[i].fields.ID || 0,
                                                dataObjectnew.tdeduction[i].fields.Description || '-',
                                                dataObjectnew.tdeduction[i].fields.DeductionType || '',
                                                dataObjectnew.tdeduction[i].fields.DisplayIn || '',
                                                allowanceAmount || 0.00,
                                                dataObjectnew.tdeduction[i].fields.Accountname || '',
                                                dataObjectnew.tdeduction[i].fields.Accountid || 0,
                                                dataObjectnew.tdeduction[i].fields.Payrolltaxexempt || false,
                                                dataObjectnewdataObjectnew.tdeduction[i].fields.Superinc || false,
                                                dataObjectnew.tdeduction[i].fields.Workcoverexempt || false,
                                                alldata = dataObjectnew.tdeduction[i].fields.Description+','
                                                          +dataObjectnew.tdeduction[i].fields.DeductionType
                                                          +','+dataObjectnew.tdeduction[i].fields.DisplayIn
                                                          +','+allowanceAmount+','
                                                          +dataObjectnew.tdeduction[i].fields.Accountname+','+dataObjectnew.tdeduction[i].fields.Accountid
                                                          +','+dataObjectnew.tdeduction[i].fields.Payrolltaxexempt+
                                                          ','+dataObjectnewdataObjectnew.tdeduction[i].fields.Superinc+','
                                                          +dataObjectnew.tdeduction[i].fields.Workcoverexempt,
                                                '<td contenteditable="false" class="colDeleteDeductions"><span class="alldataget" style="display:none;">'+alldata+'</span><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                              ];

                                              splashArrayDeductionList.push(dataListCustomerDupp);
                                              //}
                                          }

                                          let uniqueChars = [...new Set(splashArrayDeductionList)];
                                          var datatable = $('#tblDeductions').DataTable();
                                          datatable.clear();
                                          datatable.rows.add(uniqueChars);
                                          datatable.draw(false);
                                          setTimeout(function () {
                                            $("#tblDeductions").dataTable().fnPageChange('last');
                                          }, 400);

                                          $('.fullScreenSpin').css('display', 'none');


                              }).catch(function (err) {
                                  $('.fullScreenSpin').css('display', 'none');
                              });

                          });
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  },
                  "fnInitComplete": function () {
                      $("<button class='btn btn-primary btnAddNewDeduction' data-dismiss='modal' data-toggle='modal'  type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblDeductions_filter");
                      $("<button class='btn btn-primary btnRefreshDeduction' type='button' id='btnRefreshDeduction' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblDeductions_filter");

                  }

              }).on('page', function () {
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);

              }).on('column-reorder', function () {

              }).on('length.dt', function (e, settings, len) {
                //$('.fullScreenSpin').css('display', 'inline-block');
                let dataLenght = settings._iDisplayLength;
                splashArrayDeductionList = [];
                if (dataLenght == -1) {
                  $('.fullScreenSpin').css('display', 'none');

                } else {
                    if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                        $('.fullScreenSpin').css('display', 'none');
                    } else {
                        sideBarService.getDeduction(dataLenght, 0).then(function (dataNonBo) {

                            addVS1Data('TDeduction', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                templateObject.resetData(dataNonBo);
                                $('.fullScreenSpin').css('display', 'none');
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }).catch(function (err) {
                            $('.fullScreenSpin').css('display', 'none');
                        });
                    }
                }
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
              });


          }, 0);

          $('div.dataTables_filter input').addClass('form-control form-control-sm');
          $('.fullScreenSpin').css('display', 'none');

        }
    }).catch(function(err) {
      sideBarService.getDeduction(initialBaseDataLoad, 0).then(function (data) {
          addVS1Data('TDeduction', JSON.stringify(data));
          let lineItems = [];
          let lineItemObj = {};
          let deductionTypeVal = 'None';
          for (let i = 0; i < data.tdeduction.length; i++) {
              let deductionAmount = utilityService.modifynegativeCurrencyFormat(data.tdeduction[i].fields.Amount) || 0.00;
              if(data.tdeduction[i].fields.Taxexempt == true){
                deductionTypeVal = 'None';
              }else{
                if(data.tdeduction[i].fields.IsWorkPlacegiving == true){
                  deductionTypeVal = 'Workplace Giving';
                }

                if(data.tdeduction[i].fields.Unionfees == true){
                  deductionTypeVal = 'Union / Association Fees';
                }
              }
              var dataListDeduction = [
                  data.tdeduction[i].fields.ID || 0,
                  data.tdeduction[i].fields.Description || '-',
                  deductionTypeVal || 'None',
                  data.tdeduction[i].fields.Displayin || '',
                  deductionAmount || 0.00,
                  data.tdeduction[i].fields.Accountname || '',
                  data.tdeduction[i].fields.Accountid || 0,
                  data.tdeduction[i].fields.Payrolltaxexempt || false,
                  data.tdeduction[i].fields.Superinc || false,
                  data.tdeduction[i].fields.Workcoverexempt || false,
                  '<td contenteditable="false" class="colDeleteDeductions"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
              ];

              splashArrayDeductionList.push(dataListDeduction);
          }

          function MakeNegative() {
              $('td').each(function () {
                  if ($(this).text().indexOf('-' + Currency) >= 0) $(this).addClass('text-danger')
              });
          };


          setTimeout(function () {
              MakeNegative();
          }, 100);
          setTimeout(function () {
              $('#tblDeductions').DataTable({

                  data: splashArrayDeductionList,
                  "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                  columnDefs: [
                      {
                          className: "colDeductionsID hiddenColumn",
                          "targets": [0]
                      },
                      {
                          className: "colDeductionsNames",
                          "targets": [1]
                      },  {
                          className: "colDeductionsType",
                          "targets": [2]
                      }, {
                          className: "colDeductionsDisplayName",
                          "targets": [3]
                      }, {
                          className: "colDeductionsAmount  text-right",
                          "targets": [4]
                      }, {
                          className: "colDeductionsAccounts",
                          "targets": [5]
                      }, {
                          className: "colDeductionsAccountsID hiddenColumn",
                          "targets": [6]
                      }, {
                          className: "colDeductionsPAYG hiddenColumn",
                          "targets": [7]
                      }, {
                          className: "colDeductionsSuperannuation hiddenColumn",
                          "targets": [8]
                      }, {
                          className: "colDeductionsReportableasW1 hiddenColumn",
                          "targets": [9]
                      }, {
                          className: "colDeleteDeductions",
                          "orderable": false,
                          "targets": -1
                      }
                  ],
                  select: true,
                  destroy: true,
                  colReorder: true,
                  pageLength: initialDatatableLoad,
                  lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                  info: true,
                  responsive: true,
                  "order": [[0, "asc"]],
                  action: function () {
                      $('#tblDeductions').DataTable().ajax.reload();
                  },
                  "fnDrawCallback": function (oSettings) {
                      $('.paginate_button.page-item').removeClass('disabled');
                      $('#tblDeductions_ellipsis').addClass('disabled');
                      if (oSettings._iDisplayLength == -1) {
                          if (oSettings.fnRecordsDisplay() > 150) {

                          }
                      } else {

                      }
                      if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                          $('.paginate_button.page-item.next').addClass('disabled');
                      }

                      $('.paginate_button.next:not(.disabled)', this.api().table().container())
                          .on('click', function () {
                              $('.fullScreenSpin').css('display', 'inline-block');
                              var splashArrayDeductionListDupp = new Array();
                              let dataLenght = oSettings._iDisplayLength;
                              let customerSearch = $('#tblDeductions_filter input').val();

                              sideBarService.getDeduction(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (dataObjectnew) {

                                          for (let j = 0; j < dataObjectnew.tdeduction.length; j++) {

                                              let allowanceAmount = utilityService.modifynegativeCurrencyFormat(dataObjectnew.tdeduction[j].fields.Amount) || 0.00;

                                              var dataListCustomerDupp = [
                                                dataObjectnewdataObjectnew.tdeduction[i].fields.ID || 0,
                                                dataObjectnew.tdeduction[i].fields.Description || '-',
                                                dataObjectnew.tdeduction[i].fields.DeductionType || '',
                                                dataObjectnew.tdeduction[i].fields.DisplayIn || '',
                                                allowanceAmount || 0.00,
                                                dataObjectnew.tdeduction[i].fields.Accountname || '',
                                                dataObjectnew.tdeduction[i].fields.Accountid || 0,
                                                dataObjectnew.tdeduction[i].fields.Payrolltaxexempt || false,
                                                dataObjectnewdataObjectnew.tdeduction[i].fields.Superinc || false,
                                                dataObjectnew.tdeduction[i].fields.Workcoverexempt || false,
                                                '<td contenteditable="false" class="colDeleteDeductions"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                              ];

                                              splashArrayDeductionList.push(dataListCustomerDupp);
                                              //}
                                          }

                                          let uniqueChars = [...new Set(splashArrayDeductionList)];
                                          var datatable = $('#tblDeductions').DataTable();
                                          datatable.clear();
                                          datatable.rows.add(uniqueChars);
                                          datatable.draw(false);
                                          setTimeout(function () {
                                            $("#tblDeductions").dataTable().fnPageChange('last');
                                          }, 400);

                                          $('.fullScreenSpin').css('display', 'none');


                              }).catch(function (err) {
                                  $('.fullScreenSpin').css('display', 'none');
                              });

                          });
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  },
                  "fnInitComplete": function () {
                      $("<button class='btn btn-primary btnAddNewDeduction' data-dismiss='modal' data-toggle='modal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblDeductions_filter");
                      $("<button class='btn btn-primary btnRefreshDeduction' type='button' id='btnRefreshDeduction' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblDeductions_filter");

                  }

              }).on('page', function () {
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);

              }).on('column-reorder', function () {

              }).on('length.dt', function (e, settings, len) {
                //$('.fullScreenSpin').css('display', 'inline-block');
                let dataLenght = settings._iDisplayLength;
                splashArrayDeductionList = [];
                if (dataLenght == -1) {
                  $('.fullScreenSpin').css('display', 'none');

                } else {
                    if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                        $('.fullScreenSpin').css('display', 'none');
                    } else {
                        sideBarService.getDeduction(dataLenght, 0).then(function (dataNonBo) {

                            addVS1Data('TDeduction', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                templateObject.resetData(dataNonBo);
                                $('.fullScreenSpin').css('display', 'none');
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }).catch(function (err) {
                            $('.fullScreenSpin').css('display', 'none');
                        });
                    }
                }
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
              });


          }, 0);

          $('div.dataTables_filter input').addClass('form-control form-control-sm');

          $('.fullScreenSpin').css('display', 'none');
      }).catch(function (err) {
        $('.fullScreenSpin').css('display', 'none');
      });
    });
    };
    templateObject.getAllDeductions();

    templateObject.getCalenders = function(){
        getVS1Data('TPayrollCalendars').then(function(dataObject) {
           
            if (dataObject.length == 0) {
              sideBarService.getCalender(initialBaseDataLoad, 0).then(function (data) {
                  
                  addVS1Data('TPayrollCalendars', JSON.stringify(data));
                  let lineItems = [];
                  let lineItemObj = {};
                  for (let i = 0; i < data.tpayrollcalendars.length; i++) {
                    
                      var dataListAllowance = [
                          data.tpayrollcalendars[i].fields.ID || '',
                          data.tpayrollcalendars[i].fields.PayrollCalendarName || '',
                          data.tpayrollcalendars[i].fields.PayrollCalendarPayPeriod || '',
                          moment(data.tpayrollcalendars[i].fields.PayrollCalendarStartDate).format('DD/MM/YYYY') || '',
                          moment(data.tpayrollcalendars[i].fields.PayrollCalendarFirstPaymentDate).format('DD/MM/YYYY') || '',       
                          '<td contenteditable="false" class="colDeleteCalenders"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                      ];
    
                      splashArrayCalenderList.push(dataListAllowance);
                  }
    
            
    
    
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
                  setTimeout(function () {
                      $('#tblPayCalendars').DataTable({
    
                          data: splashArrayCalenderList,
                          "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                          columnDefs: [
                              {
                                className: "colCalenderID hiddenColumn",
                                "targets": [0]
                              },
                              {
                                  className: "colPayCalendarName",
                                  "targets": [1]
                              },  
                              {
                                  className: "colPayPeriod",
                                  "targets": [2]
                              }, 
                              {
                                  className: "colNextPayPeriod",
                                  "targets": [3]
                              }, 
                              {
                                  className: "colNextPaymentDate",
                                  "targets": [4]
                              },  
                              {
                                  className: "colDeleteCalenders",
                                  "orderable": false,
                                  "targets": -1
                              }
                          ],
                          select: true,
                          destroy: true,
                          colReorder: true,
                          pageLength: initialDatatableLoad,
                          lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                          info: true,
                          responsive: true,
                          "order": [[0, "asc"]],
                          action: function () {
                              $('#tblPayCalendars').DataTable().ajax.reload();
                          },
                          "fnDrawCallback": function (oSettings) {
                              $('.paginate_button.page-item').removeClass('disabled');
                              $('#tblPayCalendars_ellipsis').addClass('disabled');
                              if (oSettings._iDisplayLength == -1) {
                                  if (oSettings.fnRecordsDisplay() > 150) {
    
                                  }
                              } else {
    
                              }
                              if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                                  $('.paginate_button.page-item.next').addClass('disabled');
                              }
    
                              $('.paginate_button.next:not(.disabled)', this.api().table().container())
                                  .on('click', function () {
                                      $('.fullScreenSpin').css('display', 'inline-block');
                                      var splashArrayCalenderListDupp = new Array();
                                      let dataLenght = oSettings._iDisplayLength;
                                      let customerSearch = $('#tblPayCalendars_filter input').val();
    
                                      sideBarService.getCalender(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                          for (let i = 0; i < data.tpayrollcalendars.length; i++) {
                    
                                            var dataListAllowance = [
                                                data.tpayrollcalendars[i].fields.ID || '',
                                                data.tpayrollcalendars[i].fields.PayrollCalendarName || '',
                                                data.tpayrollcalendars[i].fields.PayrollCalendarPayPeriod || '',
                                                moment(data.tpayrollcalendars[i].fields.PayrollCalendarStartDate).format('DD/MM/YYYY') || '',
                                                moment(data.tpayrollcalendars[i].fields.PayrollCalendarFirstPaymentDate).format('DD/MM/YYYY') || '',
                                                '<td contenteditable="false" class="colDeleteCalenders"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                            ];
                          
                                            splashArrayCalenderList.push(dataListAllowance);
                                        }
    
                                                  let uniqueChars = [...new Set(splashArrayCalenderList)];
                                                  var datatable = $('#tblPayCalendars').DataTable();
                                                  datatable.clear();
                                                  datatable.rows.add(uniqueChars);
                                                  datatable.draw(false);
                                                  setTimeout(function () {
                                                    $("#tblPayCalendars").dataTable().fnPageChange('last');
                                                  }, 400);
    
                                                  $('.fullScreenSpin').css('display', 'none');
    
    
                                      }).catch(function (err) {
                                          $('.fullScreenSpin').css('display', 'none');
                                      });
    
                                  });
                              setTimeout(function () {
                                  MakeNegative();
                              }, 100);
                          },
                          "fnInitComplete": function () {
                            
                              $("<button class='btn btn-primary btnAddNewpaycalender' data-dismiss='modal' data-toggle='modal' data-target='#newPayCalendarModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblPayCalendars_filter");
                              $("<button class='btn btn-primary btnRefreshCalender' type='button' id='btnRefreshAllowance' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#ttblPayCalendars_filter");
    
                          }
    
                      }).on('page', function () {
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
    
                      }).on('column-reorder', function () {
    
                      }).on('length.dt', function (e, settings, len) {
                        //$('.fullScreenSpin').css('display', 'inline-block');
                        let dataLenght = settings._iDisplayLength;
                        splashArrayCalenderList = [];
                        if (dataLenght == -1) {
                          $('.fullScreenSpin').css('display', 'none');
    
                        } else {
                            if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                                $('.fullScreenSpin').css('display', 'none');
                            } else {
                                sideBarService.getCalender(dataLenght, 0).then(function (dataNonBo) {
    
                                    addVS1Data('TPayrollCalendars', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                        templateObject.resetData(dataNonBo);
                                        $('.fullScreenSpin').css('display', 'none');
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }
                        }
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      });
    
    
                  }, 0);
    
                  $('div.dataTables_filter input').addClass('form-control form-control-sm');
    
                  $('.fullScreenSpin').css('display', 'none');
              }).catch(function (err) {
                $('.fullScreenSpin').css('display', 'none');
              });
            }else{
    
              let data = JSON.parse(dataObject[0].data);
    
              let useData = data;
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.tpayrollcalendars.length; i++) {
                    
                var dataListAllowance = [
                    data.tpayrollcalendars[i].fields.ID || '',
                    data.tpayrollcalendars[i].fields.PayrollCalendarName || '',
                    data.tpayrollcalendars[i].fields.PayrollCalendarPayPeriod || '',
                    moment(data.tpayrollcalendars[i].fields.PayrollCalendarStartDate).format('DD/MM/YYYY') || '',
                    moment(data.tpayrollcalendars[i].fields.PayrollCalendarFirstPaymentDate).format('DD/MM/YYYY') || '',    
                    '<td contenteditable="false" class="colDeleteCalenders"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                ];

                splashArrayCalenderList.push(dataListAllowance);
            }
    
        
    
    
              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblPayCalendars').DataTable({
    
                      data: splashArrayCalenderList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [
                              
                        {
                            className: "colPayCalendarName",
                            "targets": [0]
                        },  {
                            className: "colPayPeriod",
                            "targets": [1]
                        }, {
                            className: "colNextPayPeriod",
                            "targets": [2]
                        }, {
                            className: "colNextPaymentDate",
                            "targets": [3]
                        },  {
                            className: "colDelete",
                            "orderable": false,
                            "targets": -1
                        }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblPayCalendars').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblPayCalendars_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {
    
                              }
                          } else {
    
                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }
    
                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayCalenderListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblPayCalendars_filter input').val();
    
                                  sideBarService.getCalender(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                    for (let i = 0; i < data.tpayrollcalendars.length; i++) {
                    
                                        var dataListAllowance = [
                                            data.tpayrollcalendars[i].fields.PayrollCalendarName || '',
                                            data.tpayrollcalendars[i].fields.PayrollCalendarPayPeriod || '',
                                            data.tpayrollcalendars[i].fields.PayrollCalendarStartDate || '',
                                            data.tpayrollcalendars[i].fields.PayrollCalendarFirstPaymentDate || '',       
                                            '<td contenteditable="false" class="colDelete"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                        ];
                        
                                        splashArrayCalenderList.push(dataListAllowance);
                                    }
    
                                              let uniqueChars = [...new Set(splashArrayCalenderList)];
                                              var datatable = $('#tblPayCalendars').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblPayCalendars").dataTable().fnPageChange('last');
                                              }, 400);
    
                                              $('.fullScreenSpin').css('display', 'none');
    
    
                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });
    
                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                          $("<button class='btn btn-primary btnAddNewpaycalender' data-dismiss='modal' data-toggle='modal' data-target='#newPayCalendarModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblPayCalendars_filter");
                          $("<button class='btn btn-primary btnRefreshcalender' type='button' id='btnRefreshcalender' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblPayCalendars_filter");
    
                      }
    
                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
    
                  }).on('column-reorder', function () {
    
                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayCalenderList = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');
    
                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getCalender(dataLenght, 0).then(function (dataNonBo) {
    
                                addVS1Data('TPayrollCalendars', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });
    
    
              }, 0);
    
              $('div.dataTables_filter input').addClass('form-control form-control-sm');
              $('.fullScreenSpin').css('display', 'none');
    
            }
        }).catch(function(err) {
          sideBarService.getCalender(initialBaseDataLoad, 0).then(function (data) {
              addVS1Data('TPayrollCalendars', JSON.stringify(data));
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.tpayrollcalendars.length; i++) {
                    
                var dataListAllowance = [
                    data.tpayrollcalendars[i].fields.ID || '',
                    data.tpayrollcalendars[i].fields.PayrollCalendarName || '',
                    data.tpayrollcalendars[i].fields.PayrollCalendarPayPeriod || '',
                    moment(data.tpayrollcalendars[i].fields.PayrollCalendarStartDate).format('DD/MM/YYYY') || '',
                    moment(data.tpayrollcalendars[i].fields.PayrollCalendarFirstPaymentDate).format('DD/MM/YYYY') || '',   
                    '<td contenteditable="false" class="colDeleteCalenders"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                ];

                splashArrayCalenderList.push(dataListAllowance);
            }
      
    
              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblPayCalendars').DataTable({
    
                      data: splashArrayCalenderList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [
                        {
                          className: "colCalenderID hiddenColumn",
                          "targets": [0]
                        },
                        {
                            className: "colPayCalendarName",
                            "targets": [1]
                        },  
                        {
                            className: "colPayPeriod",
                            "targets": [2]
                        }, 
                        {
                            className: "colNextPayPeriod",
                            "targets": [3]
                        }, 
                        {
                            className: "colNextPaymentDate",
                            "targets": [4]
                        },  
                        {
                            className: "colDeleteCalenders",
                            "orderable": false,
                            "targets": -1
                        }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblPayCalendars').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblPayCalendars_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {
    
                              }
                          } else {
    
                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }
    
                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayCalenderListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblPayCalendars_filter input').val();
    
                                  sideBarService.getCalender(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                    for (let i = 0; i < data.tpayrollcalendars.length; i++) {
                    
                                        var dataListAllowance = [
                                            data.tpayrollcalendars[i].fields.ID || '',
                                            data.tpayrollcalendars[i].fields.PayrollCalendarName || '',
                                            data.tpayrollcalendars[i].fields.PayrollCalendarPayPeriod || '',
                                            moment(data.tpayrollcalendars[i].fields.PayrollCalendarStartDate).format('DD/MM/YYYY') || '',
                                            moment(data.tpayrollcalendars[i].fields.PayrollCalendarFirstPaymentDate).format('DD/MM/YYYY') || '',       
                                            '<td contenteditable="false" class="colDeleteCalenders"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                        ];
                        
                                        splashArrayCalenderList.push(dataListAllowance);
                                    }
    
                                         let uniqueChars = [...new Set(splashArrayCalenderList)];
                                         var datatable = $('#tblPayCalendars').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblPayCalendars").dataTable().fnPageChange('last');
                                              }, 400);
    
                                              $('.fullScreenSpin').css('display', 'none');
    
    
                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });
    
                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                          $("<button class='btn btn-primary btnAddNewPayCalender' data-dismiss='modal' data-toggle='modal' data-target='#newPayCalendarModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblPayCalendars_filter");
                          $("<button class='btn btn-primary btnRefreshCalender' type='button' id='btnRefreshCalender' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblPayCalendars_filter");
    
                      }
    
                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
    
                  }).on('column-reorder', function () {
    
                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayCalenderList = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');
    
                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getCalender(dataLenght, 0).then(function (dataNonBo) {
    
                                addVS1Data('TPayrollCalendars', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });
    
    
              }, 0);
    
              $('div.dataTables_filter input').addClass('form-control form-control-sm');
    
              $('.fullScreenSpin').css('display', 'none');
          }).catch(function (err) {
            $('.fullScreenSpin').css('display', 'none');
          });
        });
    };
    templateObject.getCalenders();
    
    templateObject.getHolidayData = function() {
        
        getVS1Data('TPayrollHolidays').then(function(dataObject) {
            if (dataObject.length == 0) {
                 sideBarService.getHolidayData(initialBaseDataLoad, 0).then(function (data) {
                  addVS1Data('TPayrollHolidays', JSON.stringify(data));
                  let lineItems = [];
                  let lineItemObj = {};
                
                  for (let i = 0; i < data.Tpayrollholidays.length; i++) {
                    
                      var dataListAllowance = [
                          data.Tpayrollholidays[i].fields.ID || '',
                          data.Tpayrollholidays[i].fields.PayrollHolidaysName || '',
                          data.Tpayrollholidays[i].fields.PayrollHolidaysDate || '',
                          data.Tpayrollholidays[i].fields.PayrollHolidaysGroupName || '',               
                          '<td contenteditable="false" class="colHolidayDelete"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                      ];
    
                      splashArrayHolidayList.push(dataListAllowance);
                  }
    
            
    
    
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
                  setTimeout(function () {
                      $('#tblHolidays').DataTable({
    
                          data: splashArrayHolidayList,
                          "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                          columnDefs: [                              
                            
                               {
                                 className: "colHolidayID hiddenColumn",
                                 "targets": [0]
                                },
                                {
                                  className: "colHolidayName",
                                  "targets": [1]
                                },  
                                {
                                  className: "colHolidayDate",
                                  "targets": [2]
                                },  
                                {
                                   className: "colHolidaygroup hiddenColumn",
                                   "targets": [3]
                                },                                                 
                               {
                                  className: "colHolidayDelete",
                                  "orderable": false,
                                  "targets": -1
                               }
                          ],
                          select: true,
                          destroy: true,
                          colReorder: true,
                          pageLength: initialDatatableLoad,
                          lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                          info: true,
                          responsive: true,
                          "order": [[0, "asc"]],
                          action: function () {
                              $('#tblHolidays').DataTable().ajax.reload();
                          },
                          "fnDrawCallback": function (oSettings) {
                              $('.paginate_button.page-item').removeClass('disabled');
                              $('#tblHolidays_ellipsis').addClass('disabled');
                              if (oSettings._iDisplayLength == -1) {
                                  if (oSettings.fnRecordsDisplay() > 150) {
    
                                  }
                              } else {
    
                              }
                              if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                                  $('.paginate_button.page-item.next').addClass('disabled');
                              }
    
                              $('.paginate_button.next:not(.disabled)', this.api().table().container())
                                  .on('click', function () {
                                      $('.fullScreenSpin').css('display', 'inline-block');
                                      var splashArrayHolidayListDupp = new Array();
                                      let dataLenght = oSettings._iDisplayLength;
                                      let customerSearch = $('#tblHolidays_filter input').val();
    
                                      sideBarService.getHolidayData(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                        for (let i = 0; i < data.Tpayrollholidays.length; i++) {
                    
                                            var dataListAllowance = [
                                                data.Tpayrollholidays[i].fields.ID || '',
                                                data.Tpayrollholidays[i].fields.PayrollHolidaysName || '',
                                                data.Tpayrollholidays[i].fields.PayrollHolidaysDate || '',
                                                data.Tpayrollholidays[i].fields.PayrollHolidaysGroupName || '',               
                                                '<td contenteditable="false" class="colHolidayDelete"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                            ];
                          
                                            splashArrayHolidayList.push(dataListAllowance);
                                        }
    
                                      let uniqueChars = [...new Set(splashArrayHolidayList)];
                                      var datatable = $('#tblHolidays').DataTable();
                                      datatable.clear();
                                      datatable.rows.add(uniqueChars);
                                      datatable.draw(false);
                                      setTimeout(function () {
                                            $("#tblHolidays").dataTable().fnPageChange('last');
                                      }, 400);
    
                                      $('.fullScreenSpin').css('display', 'none');
    
    
                                      }).catch(function (err) {
                                          $('.fullScreenSpin').css('display', 'none');
                                      });
    
                                  });
                              setTimeout(function () {
                                  MakeNegative();
                              }, 100);
                          },
                          "fnInitComplete": function () {
                              $("<button class='btn btn-primary btnAddNewHoliday' data-dismiss='modal' data-toggle='modal' data-target='#newHolidayModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblHolidays_filter");
                              $("<button class='btn btn-primary btnRefreshHoliday' type='button' id='btnRefreshHoliday' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblHolidays_filter");
    
                          }
    
                      }).on('page', function () {
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
    
                      }).on('column-reorder', function () {
    
                      }).on('length.dt', function (e, settings, len) {
                        //$('.fullScreenSpin').css('display', 'inline-block');
                        let dataLenght = settings._iDisplayLength;
                        splashArrayHolidayList = [];
                        if (dataLenght == -1) {
                          $('.fullScreenSpin').css('display', 'none');
    
                        } else {
                            if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                                $('.fullScreenSpin').css('display', 'none');
                            } else {
                                sideBarService.getHolidayData(dataLenght, 0).then(function (dataNonBo) {
    
                                    addVS1Data('TPayrollHolidays', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                        templateObject.resetData(dataNonBo);
                                        $('.fullScreenSpin').css('display', 'none');
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }
                        }
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      });
    
    
                  }, 0);
    
                  $('div.dataTables_filter input').addClass('form-control form-control-sm');
    
                  $('.fullScreenSpin').css('display', 'none');
              }).catch(function (err) {
                $('.fullScreenSpin').css('display', 'none');
              });
            }else{
    
              let data = JSON.parse(dataObject[0].data);    
             
              let useData = data;
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.Tpayrollholidays.length; i++) {
                    
                var dataListAllowance = [
                    data.tpayrollholidays[i].fields.ID || '',
                    data.tpayrollholidays[i].fields.PayrollHolidaysName || '',
                    moment(data.tpayrollholidays[i].fields.PayrollHolidaysDate).format('DD/MM/YYYY') || '',
                    data.tpayrollholidays[i].fields.PayrollHolidaysGroupName || '',   
                    '<td contenteditable="false" class="colHolidayDelete"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                ];

                splashArrayHolidayList.push(dataListAllowance);
            }
        
    
    
              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#TPayrollHolidays').DataTable({
    
                      data: splashArrayHolidayList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                            
                        {
                          className: "colHolidayID hiddenColumn",
                          "targets": [0]
                        },
                        {
                           className: "colHolidayName",
                           "targets": [1]
                        },  
                        {
                           className: "colHolidayDate",
                           "targets": [2]
                        }, 
                        {
                            className: "colHolidaygroup hiddenColumn",
                            "targets": [3]
                        },                                                   
                        {
                           className: "colHolidayDelete",
                           "orderable": false,
                           "targets": -1
                        }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblHolidays').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblHolidays_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {
    
                              }
                          } else {
    
                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }
    
                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayHolidayListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblHolidays_filter input').val();
    
                                  sideBarService.getHolidayData(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                    for (let i = 0; i < data.Tpayrollholidays.length; i++) {
                    
                                        var dataListAllowance = [
                                            data.tpayrollholidays[i].fields.ID || '',
                                            data.tpayrollholidays[i].fields.PayrollHolidaysName || '',
                                            moment(data.tpayrollholidays[i].fields.PayrollHolidaysDate).format('DD/MM/YYYY') || '',
                                            data.tpayrollholidays[i].fields.PayrollHolidaysGroupName || '',   
                                            '<td contenteditable="false" class="colHolidayDelete"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                        ];
                        
                                        splashArrayHolidayList.push(dataListAllowance);
                                       }
                                              let uniqueChars = [...new Set(splashArrayHolidayList)];
                                              var datatable = $('#tblHolidays').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblHolidays").dataTable().fnPageChange('last');
                                              }, 400);
    
                                              $('.fullScreenSpin').css('display', 'none');
    
    
                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });
    
                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                        $("<button class='btn btn-primary btnAddNewHoliday' data-dismiss='modal' data-toggle='modal' data-target='#newHolidayModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblHolidays_filter");
                        $("<button class='btn btn-primary btnRefreshHoliday' type='button' id='btnRefreshHoliday' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblHolidays_filter");
    
                      }
    
                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
    
                  }).on('column-reorder', function () {
    
                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayHolidayList = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');
    
                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getHolidayData(dataLenght, 0).then(function (dataNonBo) {
    
                                addVS1Data('TPayrollHolidays', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });
    
    
              }, 0);
    
              $('div.dataTables_filter input').addClass('form-control form-control-sm');
              $('.fullScreenSpin').css('display', 'none');
    
            }
        }).catch(function(err) {

    
          sideBarService.getHolidayData(initialBaseDataLoad, 0).then(function (data) {
              addVS1Data('TPayrollHolidays', JSON.stringify(data));
              let lineItems = [];
              let lineItemObj = {};
             
              for (let i = 0; i < data.tpayrollholidays.length; i++) {
               
                var dataListAllowance = [
                    data.tpayrollholidays[i].fields.ID || '',
                    data.tpayrollholidays[i].fields.PayrollHolidaysName || '',
                    moment(data.tpayrollholidays[i].fields.PayrollHolidaysDate).format('DD/MM/YYYY') || '',
                    data.tpayrollholidays[i].fields.PayrollHolidaysGroupName || '',    
                    '<td contenteditable="false" class="colHolidayDelete"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                ];
                splashArrayHolidayList.push(dataListAllowance);
             }


        
              
              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblHolidays').DataTable({
    
                      data: splashArrayHolidayList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                            
                        {
                          className: "colHolidayID hiddenColumn",
                          "targets": [0]
                        },
                        {
                           className: "colHolidayName",
                           "targets": [1]
                        },  
                        {
                           className: "colHolidayDate",
                           "targets": [2]
                        },  
                        {
                            className: "colHolidaygroup hiddenColumn",
                            "targets": [3]
                        },                                                  
                        {
                           className: "colHolidayDelete",
                           "orderable": false,
                           "targets": -1
                        }
                     ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblHolidays').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblHolidays_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {
    
                              }
                          } else {
    
                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }
    
                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayHolidayListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblHolidays_filter input').val();
    
                                  sideBarService.getHolidayData(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                    for (let i = 0; i < data.Tpayrollholidays.length; i++) {
                                    
                                        var dataListAllowance = [
                                            data.tpayrollholidays[i].fields.ID || '',
                                            data.tpayrollholidays[i].fields.PayrollHolidaysName || '',
                                            moment(data.tpayrollholidays[i].fields.PayrollHolidaysDate).format('DD/MM/YYYY') || '',  
                                            data.tpayrollholidays[i].fields.PayrollHolidaysGroupName || '',    
                                            '<td contenteditable="false" class="colHolidayDelete"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                        ];
                        
                                        splashArrayHolidayList.push(dataListAllowance);
                                    }
    
                                         let uniqueChars = [...new Set(splashArrayHolidayList)];
                                         var datatable = $('#tblHolidays').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblHolidays").dataTable().fnPageChange('last');
                                              }, 400);
    
                                              $('.fullScreenSpin').css('display', 'none');
    
    
                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });
    
                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                
                        $("<button class='btn btn-primary btnAddNewHoliday' data-dismiss='modal' data-toggle='modal' data-target='#newHolidayModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblHolidays_filter");
                        $("<button class='btn btn-primary btnRefreshHoliday' type='button' id='btnRefreshHoliday' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblHolidays_filter");
    
                      }
    
                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
    
                  }).on('column-reorder', function () {
    
                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayHolidayList = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');
    
                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getHolidayData(dataLenght, 0).then(function (dataNonBo) {
    
                                addVS1Data('TPayrollHolidays', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });
    
    
              }, 0);
    
              $('div.dataTables_filter input').addClass('form-control form-control-sm');
    
              $('.fullScreenSpin').css('display', 'none');
          }).catch(function (err) {
            $('.fullScreenSpin').css('display', 'none');
          });
        });
        
     };
    templateObject.getHolidayData();

    templateObject.getOrderdinaryEarning = function(){
        getVS1Data('TOrdinaryTimeEarnings').then(function(dataObject) {
        if (dataObject.length == 0) {
             sideBarService.getOrdinarytimeEarning(initialBaseDataLoad, 0).then(function (data) {
              addVS1Data('TOrdinaryTimeEarnings', JSON.stringify(data));
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.tordinarytimeearnings.length; i++) {
                
                var dataListAllowance = [
                    data.tordinarytimeearnings[i].fields.ID || '',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsName || '',
                    'Ordinary Time Earning',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsDisplayName || '',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsRateType||'',
                    '100',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExpenseAccount || '',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExemptPaygWithholding || '',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExpenseAccount || '',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExemptSuperannuationGuaranteeCont || '',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsReportableW1onActivityStatement || '',
                 
                   '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                   ];

                  splashArrayEarningList.push(dataListAllowance);
              }

        


              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblEarnings').DataTable({

                      data: splashArrayEarningList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                        
                        {
                           className: "colEarningsID hiddenColumn",
                           "targets": [0]
                         },
                         {
                            className: "colEarningsNames",
                            "targets": [1]
                         },  
                         {
                            className: "colEarningsType",
                            "targets": [2]
                         },      
                         {
                          className: "colEarningsDisplayName",
                          "targets": [3]
                         }, 
                         {
                            className: "colEarningsratetype",
                            "targets": [4]
                          },  
                         {
                          className: "colEarningsAmount",
                          "targets": [5]
                         },  
                         {
                          className: "colEarningsAccounts",
                          "targets": [6]
                         },  
                         {
                          className: "colEarningsAccountsID hiddenColumn",
                          "targets": [7]
                         },   
                         {
                          className: "colEarningsPAYG hiddenColumn"  ,
                          "targets": [8]
                         },  
                         {
                          className: "colEarningsSuperannuation hiddenColumn",
                          "targets": [9]
                         },  
                         {
                          className: "colEarningsReportableasW1 hiddenColumn",
                          "targets": [10]
                         },                   
                         {
                            className: "colDeleteEarnings",
                            "orderable": false,
                            "targets": -1
                         }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblEarnings').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblEarnings_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {

                              }
                          } else {

                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }

                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayEarningListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblEarnings_filter input').val();

                                  sideBarService.getOrdinarytimeEarning(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {

                                    for (let i = 0; i < data.tordinarytimeearnings.length; i++) {
                
                                        var dataListAllowance = [
                                            data.tordinarytimeearnings[i].fields.ID || '',
                                            data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsName || '',
                                            'Ordinary Time Earning',
                                            data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsDisplayName || '',
                                            data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsRateType||'',
                                            '100',
                                            data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExpenseAccount || '',
                                            data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExemptPaygWithholding || '',
                                            data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExpenseAccount || '',
                                            data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExemptSuperannuationGuaranteeCont || '',
                                            data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsReportableW1onActivityStatement || '',
                                         
                                           '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                        ];
                                        splashArrayEarningList.push(dataListAllowance);
                                    }
                      

                                              let uniqueChars = [...new Set(splashArrayEarningList)];
                                              var datatable = $('#tblEarnings').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblEarnings").dataTable().fnPageChange('last');
                                              }, 400);

                                              $('.fullScreenSpin').css('display', 'none');


                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });

                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                          $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                          $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");

                      }

                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);

                  }).on('column-reorder', function () {

                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayReisument = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');

                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getOrdinarytimeEarning(dataLenght, 0).then(function (dataNonBo) {

                                addVS1Data('TOrdinaryTimeEarnings', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });


              }, 0);

              $('div.dataTables_filter input').addClass('form-control form-control-sm');

              $('.fullScreenSpin').css('display', 'none');
             }).catch(function (err) {
             $('.fullScreenSpin').css('display', 'none');
             });
        }else{

          let data = JSON.parse(dataObject[0].data);

          let useData = data;
          let lineItems = [];
          let lineItemObj = {};
          for (let i = 0; i < data.Tordinarytimeearnings.length; i++) {
               
            var dataListAllowance = [
                data.tordinarytimeearnings[i].fields.ID || '',
                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsName || '',
                'Ordinary Time Earning',
                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsDisplayName || '',
                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsRateType||'',
                '100',
                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExpenseAccount || '',
                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExemptPaygWithholding || '',
                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExpenseAccount || '',
                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExemptSuperannuationGuaranteeCont || '',
                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsReportableW1onActivityStatement || '',
             
               '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
            ];

            splashArrayEarningList.push(dataListAllowance);
        }
    


          setTimeout(function () {
              MakeNegative();
          }, 100);
          setTimeout(function () {
              $('#tblEarnings').DataTable({

                  data: splashArrayEarningList,
                  "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                  columnDefs: [                              
                        
                    {
                       className: "colEarningsID hiddenColumn",
                       "targets": [0]
                     },
                     {
                        className: "colEarningsNames",
                        "targets": [1]
                     },  
                     {
                        className: "colEarningsType",
                        "targets": [2]
                     },      
                     {
                      className: "colEarningsDisplayName",
                      "targets": [3]
                     }, 
                     {
                        className: "colEarningsratetype",
                        "targets": [4]
                      },  
                     {
                      className: "colEarningsAmount",
                      "targets": [5]
                     },  
                     {
                      className: "colEarningsAccounts",
                      "targets": [6]
                     },  
                     {
                      className: "colEarningsAccountsID hiddenColumn",
                      "targets": [7]
                     },   
                     {
                      className: "colEarningsPAYG hiddenColumn"  ,
                      "targets": [8]
                     },  
                     {
                      className: "colEarningsSuperannuation hiddenColumn",
                      "targets": [9]
                     },  
                     {
                      className: "colEarningsReportableasW1 hiddenColumn",
                      "targets": [10]
                     },                   
                     {
                        className: "colDeleteEarnings",
                        "orderable": false,
                        "targets": -1
                     }
                  ],
                  select: true,
                  destroy: true,
                  colReorder: true,
                  pageLength: initialDatatableLoad,
                  lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                  info: true,
                  responsive: true,
                  "order": [[0, "asc"]],
                  action: function () {
                      $('#tblEarnings').DataTable().ajax.reload();
                  },
                  "fnDrawCallback": function (oSettings) {
                      $('.paginate_button.page-item').removeClass('disabled');
                      $('#tblEarnings_ellipsis').addClass('disabled');
                      if (oSettings._iDisplayLength == -1) {
                          if (oSettings.fnRecordsDisplay() > 150) {

                          }
                      } else {

                      }
                      if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                          $('.paginate_button.page-item.next').addClass('disabled');
                      }

                      $('.paginate_button.next:not(.disabled)', this.api().table().container())
                          .on('click', function () {
                              $('.fullScreenSpin').css('display', 'inline-block');
                              var splashArrayEarningListDupp = new Array();
                              let dataLenght = oSettings._iDisplayLength;
                              let customerSearch = $('#tblEarnings_filter input').val();

                              sideBarService.getOrdinarytimeEarning(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {

                                for (let i = 0; i < data.tordinarytimeearnings.length; i++) {
                
                                    var dataListAllowance = [
                                        data.tordinarytimeearnings[i].fields.ID || '',
                                        data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsName || '',
                                        'Ordinary Time Earning',
                                        data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsDisplayName || '',
                                        data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsRateType||'',
                                        '100',
                                        data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExpenseAccount || '',
                                        data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExemptPaygWithholding || '',
                                        data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExpenseAccount || '',
                                        data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExemptSuperannuationGuaranteeCont || '',
                                        data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsReportableW1onActivityStatement || '',
                                     
                                       '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                    ];
                  
                                    splashArrayEarningList.push(dataListAllowance);
                                }

                                          let uniqueChars = [...new Set(splashArrayEarningList)];
                                          var datatable = $('#tblEarnings').DataTable();
                                          datatable.clear();
                                          datatable.rows.add(uniqueChars);
                                          datatable.draw(false);
                                          setTimeout(function () {
                                            $("#tblEarnings").dataTable().fnPageChange('last');
                                          }, 400);

                                          $('.fullScreenSpin').css('display', 'none');


                              }).catch(function (err) {
                                  $('.fullScreenSpin').css('display', 'none');
                              });

                          });
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  },
                  "fnInitComplete": function () {
                    $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                    $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");

                  }

              }).on('page', function () {
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);

              }).on('column-reorder', function () {

              }).on('length.dt', function (e, settings, len) {
                //$('.fullScreenSpin').css('display', 'inline-block');
                let dataLenght = settings._iDisplayLength;
                splashArrayEarningList = [];
                if (dataLenght == -1) {
                  $('.fullScreenSpin').css('display', 'none');

                } else {
                    if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                        $('.fullScreenSpin').css('display', 'none');
                    } else {
                        sideBarService.getOrdinarytimeEarning(dataLenght, 0).then(function (dataNonBo) {

                            addVS1Data('TOrdinaryTimeEarnings', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                templateObject.resetData(dataNonBo);
                                $('.fullScreenSpin').css('display', 'none');
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }).catch(function (err) {
                            $('.fullScreenSpin').css('display', 'none');
                        });
                    }
                }
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
              });


          }, 0);

          $('div.dataTables_filter input').addClass('form-control form-control-sm');
          $('.fullScreenSpin').css('display', 'none');

        }
        }).catch(function(err) {

         
           sideBarService.getOrdinarytimeEarning(initialBaseDataLoad, 0).then(function (data) {
             addVS1Data('TOrdinaryTimeEarnings', JSON.stringify(data));
               let lineItems = [];
               let lineItemObj = {};
              
              for (let i = 0; i < data.tordinarytimeearnings.length; i++) {
                     
                var dataListAllowance = [
                    data.tordinarytimeearnings[i].fields.ID || '',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsName || '',
                    'Ordinary Time Earning',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsDisplayName || '',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsRateType||'',
                    '100',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExpenseAccount || '',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExemptPaygWithholding || '',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExpenseAccount || '',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExemptSuperannuationGuaranteeCont || '',
                    data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsReportableW1onActivityStatement || '',
                 
                   '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                ];
                     
                 
                      splashArrayEarningList.push(dataListAllowance);
                   }

            
      
              

                setTimeout(function () {
                    MakeNegative();
                }, 100);
                setTimeout(function () {
                    
                    $('#tblEarnings').DataTable({
        
                        data: splashArrayEarningList,
                        "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                        columnDefs: [                              
                        
                            {
                               className: "colEarningsID hiddenColumn",
                               "targets": [0]
                             },
                             {
                                className: "colEarningsNames",
                                "targets": [1]
                             },  
                             {
                                className: "colEarningsType",
                                "targets": [2]
                             },      
                             {
                              className: "colEarningsDisplayName",
                              "targets": [3]
                             }, 
                             {
                                className: "colEarningsratetype",
                                "targets": [4]
                              },  
                             {
                              className: "colEarningsAmount",
                              "targets": [5]
                             },  
                             {
                              className: "colEarningsAccounts",
                              "targets": [6]
                             },  
                             {
                              className: "colEarningsAccountsID hiddenColumn",
                              "targets": [7]
                             },   
                             {
                              className: "colEarningsPAYG hiddenColumn"  ,
                              "targets": [8]
                             },  
                             {
                              className: "colEarningsSuperannuation hiddenColumn",
                              "targets": [9]
                             },  
                             {
                              className: "colEarningsReportableasW1 hiddenColumn",
                              "targets": [10]
                             },                   
                             {
                                className: "colDeleteEarnings",
                                "orderable": false,
                                "targets": -1
                             }
                          ],
                        select: true,
                        destroy: true,
                        colReorder: true,
                        pageLength: initialDatatableLoad,
                        lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                        info: true,
                        responsive: true,
                        "order": [[0, "asc"]],
                        action: function () {
                            $('#tblEarnings').DataTable().ajax.reload();
                        },
                        "fnDrawCallback": function (oSettings) {
                            $('.paginate_button.page-item').removeClass('disabled');
                            $('#tblEarnings_ellipsis').addClass('disabled');
                            if (oSettings._iDisplayLength == -1) {
                                if (oSettings.fnRecordsDisplay() > 150) {
        
                                }
                            } else {
        
                            }
                            if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                                $('.paginate_button.page-item.next').addClass('disabled');
                            }
        
                            $('.paginate_button.next:not(.disabled)', this.api().table().container())
                                .on('click', function () {
                                    $('.fullScreenSpin').css('display', 'inline-block');
                                    var splashArrayReisumentDupp = new Array();
                                    let dataLenght = oSettings._iDisplayLength;
                                    let customerSearch = $('#tblEarnings_filter input').val();
        
                                    sideBarService.getOrdinarytimeEarning(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
        
                                        for (let i = 0; i < data.tordinarytimeearnings.length; i++) {
                        
                                            var dataListAllowance = [
                                                data.tordinarytimeearnings[i].fields.ID || '',
                                                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsName || '',
                                                'Ordinary Time Earning',
                                                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsDisplayName || '',
                                                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsRateType||'',
                                                '100',
                                                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExpenseAccount || '',
                                                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExemptPaygWithholding || '',
                                                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExpenseAccount || '',
                                                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExemptSuperannuationGuaranteeCont || '',
                                                data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsReportableW1onActivityStatement || '',
                                             
                                               '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                            ];
                        
                                            splashArrayEarningList.push(dataListAllowance);
                                        }
        
                                            let uniqueChars = [...new Set(splashArrayEarningList)];
                                            var datatable = $('#tblEarnings').DataTable();
                                                datatable.clear();
                                                datatable.rows.add(uniqueChars);
                                                datatable.draw(false);
                                                setTimeout(function () {
                                                    $("#tblEarnings").dataTable().fnPageChange('last');
                                                }, 400);
        
                                                $('.fullScreenSpin').css('display', 'none');
        
        
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
        
                                });
                            setTimeout(function () {
                                MakeNegative();
                            }, 100);
                        },
                        "fnInitComplete": function () {
                            $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                            $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");
        
                        }
        
                    }).on('page', function () {
                        setTimeout(function () {
                            MakeNegative();
                        }, 100);
        
                    }).on('column-reorder', function () {
        
                    }).on('length.dt', function (e, settings, len) {
                        //$('.fullScreenSpin').css('display', 'inline-block');
                        let dataLenght = settings._iDisplayLength;
                        splashArrayEarningList = [];
                        if (dataLenght == -1) {
                        $('.fullScreenSpin').css('display', 'none');
        
                        } else {
                            if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                                $('.fullScreenSpin').css('display', 'none');
                            } else {
                                sideBarService.getOrdinarytimeEarning(dataLenght, 0).then(function (dataNonBo) {
        
                                    addVS1Data('TOrdinaryTimeEarnings', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                        templateObject.resetData(dataNonBo);
                                        $('.fullScreenSpin').css('display', 'none');
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }
                        }
                        setTimeout(function () {
                            MakeNegative();
                        }, 100);
                    });
        
        
                }, 0);
        
                $('div.dataTables_filter input').addClass('form-control form-control-sm');
        
                $('.fullScreenSpin').css('display', 'none');
                }).catch(function (err) {
                    $('.fullScreenSpin').css('display', 'none');
                });
                });


     };
    templateObject.getOrderdinaryEarning();
    templateObject.getovertimeEarning = function(){
        getVS1Data('Tovertimeearnings').then(function(dataObject) {
        if (dataObject.length == 0) {
             sideBarService.getExemptReportableOvertime(initialBaseDataLoad, 0).then(function (data) {
              addVS1Data('Tovertimeearnings', JSON.stringify(data));
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.tovertimeearnings.length; i++) {
                
                var dataListAllowance = [
                    data.tovertimeearnings[i].fields.ID || '',
                    data.tovertimeearnings[i].fields.OverTimeEarningsName || '',
                    'OverTime Earning',
                    data.tovertimeearnings[i].fields.OverTimeEarningsDisplayName || '',
                    data.tovertimeearnings[i].fields.OverTimeEarningsRateType||'',
                    '100',
                    data.tovertimeearnings[i].fields.OverTimeEarningsExpenseAccount || '',
                    data.tovertimeearnings[i].fields.OverTimeEarningsExemptPaygWithholding || '',
                    data.tovertimeearnings[i].fields.OverTimeEarningsExpenseAccount || '',
                    data.tovertimeearnings[i].fields.OverTimeEarningsExemptSuperannuationGuaranteeCont || '',
                    data.tovertimeearnings[i].fields.OverTimeEarningsReportableW1onActivityStatement || '',          
                   '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                   ];

                   splashArrayEarningList.push(dataListAllowance);
               }

        


              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblEarnings').DataTable({

                      data: splashArrayEarningList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                        
                        {
                           className: "colEarningsID hiddenColumn",
                           "targets": [0]
                         },
                         {
                            className: "colEarningsNames",
                            "targets": [1]
                         },  
                         {
                            className: "colEarningsType",
                            "targets": [2]
                         },      
                         {
                          className: "colEarningsDisplayName",
                          "targets": [3]
                         }, 
                         {
                            className: "colEarningsratetype",
                            "targets": [4]
                          },  
                         {
                          className: "colEarningsAmount",
                          "targets": [5]
                         },  
                         {
                          className: "colEarningsAccounts",
                          "targets": [6]
                         },  
                         {
                          className: "colEarningsAccountsID hiddenColumn",
                          "targets": [7]
                         },   
                         {
                          className: "colEarningsPAYG hiddenColumn"  ,
                          "targets": [8]
                         },  
                         {
                          className: "colEarningsSuperannuation hiddenColumn",
                          "targets": [9]
                         },  
                         {
                          className: "colEarningsReportableasW1 hiddenColumn",
                          "targets": [10]
                         },                   
                         {
                            className: "colDeleteEarnings",
                            "orderable": false,
                            "targets": -1
                         }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblEarnings').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblEarnings_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {

                              }
                          } else {

                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }

                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayEarningListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblEarnings_filter input').val();

                                  sideBarService.getExemptReportableOvertime(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {

                                    for (let i = 0; i < data.tovertimeearnings.length; i++) {
                
                                        var dataListAllowance = [
                                            data.tovertimeearnings[i].fields.ID || '',
                                            data.tovertimeearnings[i].fields.OverTimeEarningsName || '',
                                            'OverTime Earning',
                                            data.tovertimeearnings[i].fields.OverTimeEarningsDisplayName || '',
                                            data.tovertimeearnings[i].fields.OverTimeEarningsRateType||'',
                                            '100',
                                            data.tovertimeearnings[i].fields.OverTimeEarningsExpenseAccount || '',
                                            data.tovertimeearnings[i].fields.OverTimeEarningsExemptPaygWithholding || '',
                                            data.tovertimeearnings[i].fields.OverTimeEarningsExpenseAccount || '',
                                            data.tovertimeearnings[i].fields.OverTimeEarningsExemptSuperannuationGuaranteeCont || '',
                                            data.tovertimeearnings[i].fields.OverTimeEarningsReportableW1onActivityStatement || '',          
                                           '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                           ];
                        
                                           splashArrayEarningList.push(dataListAllowance);
                                       }
                      

                                              let uniqueChars = [...new Set(splashArrayEarningList)];
                                              var datatable = $('#tblEarnings').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblEarnings").dataTable().fnPageChange('last');
                                              }, 400);

                                              $('.fullScreenSpin').css('display', 'none');


                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });

                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                          $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                          $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");

                      }

                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);

                  }).on('column-reorder', function () {

                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayReisument = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');

                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getExemptReportableOvertime(dataLenght, 0).then(function (dataNonBo) {

                                addVS1Data('Tovertimeearnings', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });


              }, 0);

              $('div.dataTables_filter input').addClass('form-control form-control-sm');

              $('.fullScreenSpin').css('display', 'none');
             }).catch(function (err) {
             $('.fullScreenSpin').css('display', 'none');
             });
        }else{

          let data = JSON.parse(dataObject[0].data);

          let useData = data;
          let lineItems = [];
          let lineItemObj = {};
          for (let i = 0; i < data.tovertimeearnings.length; i++) {
                
            var dataListAllowance = [
                data.tovertimeearnings[i].fields.ID || '',
                data.tovertimeearnings[i].fields.OverTimeEarningsName || '',
                'OverTime Earning',
                data.tovertimeearnings[i].fields.OverTimeEarningsDisplayName || '',
                data.tovertimeearnings[i].fields.OverTimeEarningsRateType||'',
                '100',
                data.tovertimeearnings[i].fields.OverTimeEarningsExpenseAccount || '',
                data.tovertimeearnings[i].fields.OverTimeEarningsExemptPaygWithholding || '',
                data.tovertimeearnings[i].fields.OverTimeEarningsExpenseAccount || '',
                data.tovertimeearnings[i].fields.OverTimeEarningsExemptSuperannuationGuaranteeCont || '',
                data.tovertimeearnings[i].fields.OverTimeEarningsReportableW1onActivityStatement || '',          
               '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
               ];

               splashArrayEarningList.push(dataListAllowance);
           }
    


          setTimeout(function () {
              MakeNegative();
          }, 100);
          setTimeout(function () {
              $('#tblEarnings').DataTable({

                  data: splashArrayEarningList,
                  "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                  columnDefs: [                              
                        
                    {
                       className: "colEarningsID hiddenColumn",
                       "targets": [0]
                     },
                     {
                        className: "colEarningsNames",
                        "targets": [1]
                     },  
                     {
                        className: "colEarningsType",
                        "targets": [2]
                     },      
                     {
                      className: "colEarningsDisplayName",
                      "targets": [3]
                     }, 
                     {
                        className: "colEarningsratetype",
                        "targets": [4]
                      },  
                     {
                      className: "colEarningsAmount",
                      "targets": [5]
                     },  
                     {
                      className: "colEarningsAccounts",
                      "targets": [6]
                     },  
                     {
                      className: "colEarningsAccountsID hiddenColumn",
                      "targets": [7]
                     },   
                     {
                      className: "colEarningsPAYG hiddenColumn"  ,
                      "targets": [8]
                     },  
                     {
                      className: "colEarningsSuperannuation hiddenColumn",
                      "targets": [9]
                     },  
                     {
                      className: "colEarningsReportableasW1 hiddenColumn",
                      "targets": [10]
                     },                   
                     {
                        className: "colDeleteEarnings",
                        "orderable": false,
                        "targets": -1
                     }
                  ],
                  select: true,
                  destroy: true,
                  colReorder: true,
                  pageLength: initialDatatableLoad,
                  lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                  info: true,
                  responsive: true,
                  "order": [[0, "asc"]],
                  action: function () {
                      $('#tblEarnings').DataTable().ajax.reload();
                  },
                  "fnDrawCallback": function (oSettings) {
                      $('.paginate_button.page-item').removeClass('disabled');
                      $('#tblEarnings_ellipsis').addClass('disabled');
                      if (oSettings._iDisplayLength == -1) {
                          if (oSettings.fnRecordsDisplay() > 150) {

                          }
                      } else {

                      }
                      if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                          $('.paginate_button.page-item.next').addClass('disabled');
                      }

                      $('.paginate_button.next:not(.disabled)', this.api().table().container())
                          .on('click', function () {
                              $('.fullScreenSpin').css('display', 'inline-block');
                              var splashArrayEarningListDupp = new Array();
                              let dataLenght = oSettings._iDisplayLength;
                              let customerSearch = $('#tblEarnings_filter input').val();

                              sideBarService.getExemptReportableOvertime(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {

                                for (let i = 0; i < data.tovertimeearnings.length; i++) {
                
                                    var dataListAllowance = [
                                        data.tovertimeearnings[i].fields.ID || '',
                                        data.tovertimeearnings[i].fields.OverTimeEarningsName || '',
                                        'OverTime Earning',
                                        data.tovertimeearnings[i].fields.OverTimeEarningsDisplayName || '',
                                        data.tovertimeearnings[i].fields.OverTimeEarningsRateType||'',
                                        '100',
                                        data.tovertimeearnings[i].fields.OverTimeEarningsExpenseAccount || '',
                                        data.tovertimeearnings[i].fields.OverTimeEarningsExemptPaygWithholding || '',
                                        data.tovertimeearnings[i].fields.OverTimeEarningsExpenseAccount || '',
                                        data.tovertimeearnings[i].fields.OverTimeEarningsExemptSuperannuationGuaranteeCont || '',
                                        data.tovertimeearnings[i].fields.OverTimeEarningsReportableW1onActivityStatement || '',          
                                       '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                       ];
                    
                                       splashArrayEarningList.push(dataListAllowance);
                                   }

                                          let uniqueChars = [...new Set(splashArrayEarningList)];
                                          var datatable = $('#tblEarnings').DataTable();
                                          datatable.clear();
                                          datatable.rows.add(uniqueChars);
                                          datatable.draw(false);
                                          setTimeout(function () {
                                            $("#tblEarnings").dataTable().fnPageChange('last');
                                          }, 400);

                                          $('.fullScreenSpin').css('display', 'none');


                              }).catch(function (err) {
                                  $('.fullScreenSpin').css('display', 'none');
                              });

                          });
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  },
                  "fnInitComplete": function () {
                    $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                    $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");

                  }

              }).on('page', function () {
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);

              }).on('column-reorder', function () {

              }).on('length.dt', function (e, settings, len) {
                //$('.fullScreenSpin').css('display', 'inline-block');
                let dataLenght = settings._iDisplayLength;
                splashArrayEarningList = [];
                if (dataLenght == -1) {
                  $('.fullScreenSpin').css('display', 'none');

                } else {
                    if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                        $('.fullScreenSpin').css('display', 'none');
                    } else {
                        sideBarService.getExemptReportableOvertime(dataLenght, 0).then(function (dataNonBo) {

                            addVS1Data('Tovertimeearnings', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                templateObject.resetData(dataNonBo);
                                $('.fullScreenSpin').css('display', 'none');
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }).catch(function (err) {
                            $('.fullScreenSpin').css('display', 'none');
                        });
                    }
                }
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
              });


          }, 0);

          $('div.dataTables_filter input').addClass('form-control form-control-sm');
          $('.fullScreenSpin').css('display', 'none');

        }
        }).catch(function(err) {

         
           sideBarService.getExemptReportableOvertime(initialBaseDataLoad, 0).then(function (data) {
             addVS1Data('Tovertimeearnings', JSON.stringify(data));
               let lineItems = [];
               let lineItemObj = {};
              
               for (let i = 0; i < data.tovertimeearnings.length; i++) {
                
                var dataListAllowance = [
                    data.tovertimeearnings[i].fields.ID || '',
                    data.tovertimeearnings[i].fields.OverTimeEarningsName || '',
                    'OverTime Earning',
                    data.tovertimeearnings[i].fields.OverTimeEarningsDisplayName || '',
                    data.tovertimeearnings[i].fields.OverTimeEarningsRateType||'',
                    '100',
                    data.tovertimeearnings[i].fields.OverTimeEarningsExpenseAccount || '',
                    data.tovertimeearnings[i].fields.OverTimeEarningsExemptPaygWithholding || '',
                    data.tovertimeearnings[i].fields.OverTimeEarningsExpenseAccount || '',
                    data.tovertimeearnings[i].fields.OverTimeEarningsExemptSuperannuationGuaranteeCont || '',
                    data.tovertimeearnings[i].fields.OverTimeEarningsReportableW1onActivityStatement || '',          
                   '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                   ];

                   splashArrayEarningList.push(dataListAllowance);
               }

            
      
              

                setTimeout(function () {
                    MakeNegative();
                }, 100);
                setTimeout(function () {
                    
                    $('#tblEarnings').DataTable({
        
                        data: splashArrayEarningList,
                        "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                        columnDefs: [                              
                        
                            {
                               className: "colEarningsID hiddenColumn",
                               "targets": [0]
                             },
                             {
                                className: "colEarningsNames",
                                "targets": [1]
                             },  
                             {
                                className: "colEarningsType",
                                "targets": [2]
                             },      
                             {
                              className: "colEarningsDisplayName",
                              "targets": [3]
                             }, 
                             {
                                className: "colEarningsratetype",
                                "targets": [4]
                              },  
                             {
                              className: "colEarningsAmount",
                              "targets": [5]
                             },  
                             {
                              className: "colEarningsAccounts",
                              "targets": [6]
                             },  
                             {
                              className: "colEarningsAccountsID hiddenColumn",
                              "targets": [7]
                             },   
                             {
                              className: "colEarningsPAYG hiddenColumn"  ,
                              "targets": [8]
                             },  
                             {
                              className: "colEarningsSuperannuation hiddenColumn",
                              "targets": [9]
                             },  
                             {
                              className: "colEarningsReportableasW1 hiddenColumn",
                              "targets": [10]
                             },                   
                             {
                                className: "colDeleteEarnings",
                                "orderable": false,
                                "targets": -1
                             }
                          ],
                        select: true,
                        destroy: true,
                        colReorder: true,
                        pageLength: initialDatatableLoad,
                        lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                        info: true,
                        responsive: true,
                        "order": [[0, "asc"]],
                        action: function () {
                            $('#tblEarnings').DataTable().ajax.reload();
                        },
                        "fnDrawCallback": function (oSettings) {
                            $('.paginate_button.page-item').removeClass('disabled');
                            $('#tblEarnings_ellipsis').addClass('disabled');
                            if (oSettings._iDisplayLength == -1) {
                                if (oSettings.fnRecordsDisplay() > 150) {
        
                                }
                            } else {
        
                            }
                            if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                                $('.paginate_button.page-item.next').addClass('disabled');
                            }
        
                            $('.paginate_button.next:not(.disabled)', this.api().table().container())
                                .on('click', function () {
                                    $('.fullScreenSpin').css('display', 'inline-block');
                                    var splashArrayReisumentDupp = new Array();
                                    let dataLenght = oSettings._iDisplayLength;
                                    let customerSearch = $('#tblEarnings_filter input').val();
        
                                    sideBarService.getExemptReportableOvertime(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
        
                                        for (let i = 0; i < data.tovertimeearnings.length; i++) {
                
                                            var dataListAllowance = [
                                                data.tovertimeearnings[i].fields.ID || '',
                                                data.tovertimeearnings[i].fields.OverTimeEarningsName || '',
                                                'OverTime Earning',
                                                data.tovertimeearnings[i].fields.OverTimeEarningsDisplayName || '',
                                                data.tovertimeearnings[i].fields.OverTimeEarningsRateType||'',
                                                '100',
                                                data.tovertimeearnings[i].fields.OverTimeEarningsExpenseAccount || '',
                                                data.tovertimeearnings[i].fields.OverTimeEarningsExemptPaygWithholding || '',
                                                data.tovertimeearnings[i].fields.OverTimeEarningsExpenseAccount || '',
                                                data.tovertimeearnings[i].fields.OverTimeEarningsExemptSuperannuationGuaranteeCont || '',
                                                data.tovertimeearnings[i].fields.OverTimeEarningsReportableW1onActivityStatement || '',          
                                               '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                               ];
                            
                                               splashArrayEarningList.push(dataListAllowance);
                                           }
        
                                            let uniqueChars = [...new Set(splashArrayEarningList)];
                                            var datatable = $('#tblEarnings').DataTable();
                                                datatable.clear();
                                                datatable.rows.add(uniqueChars);
                                                datatable.draw(false);
                                                setTimeout(function () {
                                                    $("#tblEarnings").dataTable().fnPageChange('last');
                                                }, 400);
        
                                                $('.fullScreenSpin').css('display', 'none');
        
        
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
        
                                });
                            setTimeout(function () {
                                MakeNegative();
                            }, 100);
                        },
                        "fnInitComplete": function () {
                            $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                            $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");
        
                        }
        
                    }).on('page', function () {
                        setTimeout(function () {
                            MakeNegative();
                        }, 100);
        
                    }).on('column-reorder', function () {
        
                    }).on('length.dt', function (e, settings, len) {
                        //$('.fullScreenSpin').css('display', 'inline-block');
                        let dataLenght = settings._iDisplayLength;
                        splashArrayEarningList = [];
                        if (dataLenght == -1) {
                        $('.fullScreenSpin').css('display', 'none');
        
                        } else {
                            if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                                $('.fullScreenSpin').css('display', 'none');
                            } else {
                                sideBarService.getExemptReportableOvertime(dataLenght, 0).then(function (dataNonBo) {
        
                                    addVS1Data('Tovertimeearnings', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                        templateObject.resetData(dataNonBo);
                                        $('.fullScreenSpin').css('display', 'none');
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }
                        }
                        setTimeout(function () {
                            MakeNegative();
                        }, 100);
                    });
        
        
                }, 0);
        
                $('div.dataTables_filter input').addClass('form-control form-control-sm');
        
                $('.fullScreenSpin').css('display', 'none');
                }).catch(function (err) {
                    $('.fullScreenSpin').css('display', 'none');
                });
                });


     };
    templateObject.getovertimeEarning();

    templateObject.employmentTermnination = function(){
        getVS1Data('TTerminationSimple').then(function(dataObject) {
        if (dataObject.length == 0) {
             sideBarService.getExemptReportableTermnination(initialBaseDataLoad, 0).then(function (data) {
              addVS1Data('TTerminationSimple', JSON.stringify(data));
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.tterminationsimple.length; i++) {
                
                var dataListAllowance = [
                    data.tterminationsimple[i].fields.ID || '',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsName || '',
                    'Employee Termnination',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsDisplayName || '',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsRateType||'',
                    '100',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExpenseAccount || '',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExemptPaygWithholding || '',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExpenseAccount || '',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExemptSuperannuationGuaranteeCont || '',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsReportableW1onActivityStatement || '',
                 
                   '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                   ];

                  splashArrayEarningList.push(dataListAllowance);
              }

        


              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblEarnings').DataTable({

                      data: splashArrayEarningList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                        
                        {
                           className: "colEarningsID hiddenColumn",
                           "targets": [0]
                         },
                         {
                            className: "colEarningsNames",
                            "targets": [1]
                         },  
                         {
                            className: "colEarningsType",
                            "targets": [2]
                         },      
                         {
                          className: "colEarningsDisplayName",
                          "targets": [3]
                         }, 
                         {
                            className: "colEarningsratetype",
                            "targets": [4]
                          },  
                         {
                          className: "colEarningsAmount",
                          "targets": [5]
                         },  
                         {
                          className: "colEarningsAccounts",
                          "targets": [6]
                         },  
                         {
                          className: "colEarningsAccountsID hiddenColumn",
                          "targets": [7]
                         },   
                         {
                          className: "colEarningsPAYG hiddenColumn"  ,
                          "targets": [8]
                         },  
                         {
                          className: "colEarningsSuperannuation hiddenColumn",
                          "targets": [9]
                         },  
                         {
                          className: "colEarningsReportableasW1 hiddenColumn",
                          "targets": [10]
                         },                   
                         {
                            className: "colDeleteEarnings",
                            "orderable": false,
                            "targets": -1
                         }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblEarnings').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblEarnings_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {

                              }
                          } else {

                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }

                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayEarningListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblEarnings_filter input').val();

                                  sideBarService.getExemptReportableTermnination(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {

                                    for (let i = 0; i < data.tterminationsimple.length; i++) {
                
                                        var dataListAllowance = [
                                            data.tterminationsimple[i].fields.ID || '',
                                            data.tterminationsimple[i].fields.EmployeeTerminationPaymentsName || '',
                                            'Employee Termnination',
                                            data.tterminationsimple[i].fields.EmployeeTerminationPaymentsDisplayName || '',
                                            data.tterminationsimple[i].fields.EmployeeTerminationPaymentsRateType||'',
                                            '100',
                                            data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExpenseAccount || '',        
                                            data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExemptPaygWithholding || '',
                                            data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExpenseAccount || '',
                                            data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExemptSuperannuationGuaranteeCont || '',
                                            data.tterminationsimple[i].fields.EmployeeTerminationPaymentsReportableW1onActivityStatement || '',
                                         
                                           '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                           ];
                        
                                          splashArrayEarningList.push(dataListAllowance);
                                        }
                      

                                              let uniqueChars = [...new Set(splashArrayEarningList)];
                                              var datatable = $('#tblEarnings').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblEarnings").dataTable().fnPageChange('last');
                                              }, 400);

                                              $('.fullScreenSpin').css('display', 'none');


                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });

                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                          $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                          $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");

                      }

                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);

                  }).on('column-reorder', function () {

                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayReisument = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');

                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getExemptReportableTermnination(dataLenght, 0).then(function (dataNonBo) {

                                addVS1Data('TTerminationSimple', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });


              }, 0);

              $('div.dataTables_filter input').addClass('form-control form-control-sm');

              $('.fullScreenSpin').css('display', 'none');
             }).catch(function (err) {
             $('.fullScreenSpin').css('display', 'none');
             });
        }else{

          let data = JSON.parse(dataObject[0].data);

          let useData = data;
          let lineItems = [];
          let lineItemObj = {};
          for (let i = 0; i < data.tterminationsimple.length; i++) {
                
            var dataListAllowance = [
                data.tterminationsimple[i].fields.ID || '',
                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsName || '',
                'Employee Termnination',
                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsDisplayName || '',
                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsRateType||'',
                '100',
                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExpenseAccount || '',
                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExemptPaygWithholding || '',
                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExpenseAccount || '',
                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExemptSuperannuationGuaranteeCont || '',
                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsReportableW1onActivityStatement || '',
                '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
               ];

              splashArrayEarningList.push(dataListAllowance);
          }
    


          setTimeout(function () {
              MakeNegative();
          }, 100);
          setTimeout(function () {
              $('#tblEarnings').DataTable({

                  data: splashArrayEarningList,
                  "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                  columnDefs: [                              
                        
                    {
                       className: "colEarningsID hiddenColumn",
                       "targets": [0]
                     },
                     {
                        className: "colEarningsNames",
                        "targets": [1]
                     },  
                     {
                        className: "colEarningsType",
                        "targets": [2]
                     },      
                     {
                      className: "colEarningsDisplayName",
                      "targets": [3]
                     }, 
                     {
                        className: "colEarningsratetype",
                        "targets": [4]
                      },  
                     {
                      className: "colEarningsAmount",
                      "targets": [5]
                     },  
                     {
                      className: "colEarningsAccounts",
                      "targets": [6]
                     },  
                     {
                      className: "colEarningsAccountsID hiddenColumn",
                      "targets": [7]
                     },   
                     {
                      className: "colEarningsPAYG hiddenColumn"  ,
                      "targets": [8]
                     },  
                     {
                      className: "colEarningsSuperannuation hiddenColumn",
                      "targets": [9]
                     },  
                     {
                      className: "colEarningsReportableasW1 hiddenColumn",
                      "targets": [10]
                     },                   
                     {
                        className: "colDeleteEarnings",
                        "orderable": false,
                        "targets": -1
                     }
                  ],
                  select: true,
                  destroy: true,
                  colReorder: true,
                  pageLength: initialDatatableLoad,
                  lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                  info: true,
                  responsive: true,
                  "order": [[0, "asc"]],
                  action: function () {
                      $('#tblEarnings').DataTable().ajax.reload();
                  },
                  "fnDrawCallback": function (oSettings) {
                      $('.paginate_button.page-item').removeClass('disabled');
                      $('#tblEarnings_ellipsis').addClass('disabled');
                      if (oSettings._iDisplayLength == -1) {
                          if (oSettings.fnRecordsDisplay() > 150) {

                          }
                      } else {

                      }
                      if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                          $('.paginate_button.page-item.next').addClass('disabled');
                      }

                      $('.paginate_button.next:not(.disabled)', this.api().table().container())
                          .on('click', function () {
                              $('.fullScreenSpin').css('display', 'inline-block');
                              var splashArrayEarningListDupp = new Array();
                              let dataLenght = oSettings._iDisplayLength;
                              let customerSearch = $('#tblEarnings_filter input').val();

                              sideBarService.getExemptReportableTermnination(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {

                                for (let i = 0; i < data.tterminationsimple.length; i++) {
                
                                    var dataListAllowance = [
                                        data.tterminationsimple[i].fields.ID || '',
                                        data.tterminationsimple[i].fields.EmployeeTerminationPaymentsName || '',
                                        'Employee Termnination',
                                        data.tterminationsimple[i].fields.EmployeeTerminationPaymentsDisplayName || '',
                                        data.tterminationsimple[i].fields.EmployeeTerminationPaymentsRateType||'',
                                        '100',
                                        data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExpenseAccount || '',
                                        data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExemptPaygWithholding || '',
                                        data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExpenseAccount || '',
                                        data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExemptSuperannuationGuaranteeCont || '',
                                        data.tterminationsimple[i].fields.EmployeeTerminationPaymentsReportableW1onActivityStatement || '',
                                     
                                       '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                       ];
                    
                                      splashArrayEarningList.push(dataListAllowance);
                                  }

                                          let uniqueChars = [...new Set(splashArrayEarningList)];
                                          var datatable = $('#tblEarnings').DataTable();
                                          datatable.clear();
                                          datatable.rows.add(uniqueChars);
                                          datatable.draw(false);
                                          setTimeout(function () {
                                            $("#tblEarnings").dataTable().fnPageChange('last');
                                          }, 400);

                                          $('.fullScreenSpin').css('display', 'none');


                              }).catch(function (err) {
                                  $('.fullScreenSpin').css('display', 'none');
                              });

                          });
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  },
                  "fnInitComplete": function () {
                    $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                    $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");

                  }

              }).on('page', function () {
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);

              }).on('column-reorder', function () {

              }).on('length.dt', function (e, settings, len) {
                //$('.fullScreenSpin').css('display', 'inline-block');
                let dataLenght = settings._iDisplayLength;
                splashArrayEarningList = [];
                if (dataLenght == -1) {
                  $('.fullScreenSpin').css('display', 'none');

                } else {
                    if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                        $('.fullScreenSpin').css('display', 'none');
                    } else {
                        sideBarService.getExemptReportableTermnination(dataLenght, 0).then(function (dataNonBo) {

                            addVS1Data('TTerminationSimple', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                templateObject.resetData(dataNonBo);
                                $('.fullScreenSpin').css('display', 'none');
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }).catch(function (err) {
                            $('.fullScreenSpin').css('display', 'none');
                        });
                    }
                }
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
              });


          }, 0);

          $('div.dataTables_filter input').addClass('form-control form-control-sm');
          $('.fullScreenSpin').css('display', 'none');

        }
        }).catch(function(err) {

         
           sideBarService.getExemptReportableTermnination(initialBaseDataLoad, 0).then(function (data) {
             addVS1Data('TTerminationSimple', JSON.stringify(data));
               let lineItems = [];
               let lineItemObj = {};
              
               for (let i = 0; i < data.tterminationsimple.length; i++) {
                
                var dataListAllowance = [
                    data.tterminationsimple[i].fields.ID || '',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsName || '',
                    'Employee Termnination',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsDisplayName || '',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsRateType||'',
                    '100',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExpenseAccount || '',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExemptPaygWithholding || '',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExpenseAccount || '',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExemptSuperannuationGuaranteeCont || '',
                    data.tterminationsimple[i].fields.EmployeeTerminationPaymentsReportableW1onActivityStatement || '',
                 
                   '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                   ];

                  splashArrayEarningList.push(dataListAllowance);
              }

            
      
              

                setTimeout(function () {
                    MakeNegative();
                }, 100);
                setTimeout(function () {
                    
                    $('#tblEarnings').DataTable({
        
                        data: splashArrayEarningList,
                        "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                        columnDefs: [                              
                        
                            {
                               className: "colEarningsID hiddenColumn",
                               "targets": [0]
                             },
                             {
                                className: "colEarningsNames",
                                "targets": [1]
                             },  
                             {
                                className: "colEarningsType",
                                "targets": [2]
                             },      
                             {
                              className: "colEarningsDisplayName",
                              "targets": [3]
                             }, 
                             {
                                className: "colEarningsratetype",
                                "targets": [4]
                              },  
                             {
                              className: "colEarningsAmount",
                              "targets": [5]
                             },  
                             {
                              className: "colEarningsAccounts",
                              "targets": [6]
                             },  
                             {
                              className: "colEarningsAccountsID hiddenColumn",
                              "targets": [7]
                             },   
                             {
                              className: "colEarningsPAYG hiddenColumn"  ,
                              "targets": [8]
                             },  
                             {
                              className: "colEarningsSuperannuation hiddenColumn",
                              "targets": [9]
                             },  
                             {
                              className: "colEarningsReportableasW1 hiddenColumn",
                              "targets": [10]
                             },                   
                             {
                                className: "colDeleteEarnings",
                                "orderable": false,
                                "targets": -1
                             }
                          ],
                        select: true,
                        destroy: true,
                        colReorder: true,
                        pageLength: initialDatatableLoad,
                        lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                        info: true,
                        responsive: true,
                        "order": [[0, "asc"]],
                        action: function () {
                            $('#tblEarnings').DataTable().ajax.reload();
                        },
                        "fnDrawCallback": function (oSettings) {
                            $('.paginate_button.page-item').removeClass('disabled');
                            $('#tblEarnings_ellipsis').addClass('disabled');
                            if (oSettings._iDisplayLength == -1) {
                                if (oSettings.fnRecordsDisplay() > 150) {
        
                                }
                            } else {
        
                            }
                            if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                                $('.paginate_button.page-item.next').addClass('disabled');
                            }
        
                            $('.paginate_button.next:not(.disabled)', this.api().table().container())
                                .on('click', function () {
                                    $('.fullScreenSpin').css('display', 'inline-block');
                                    var splashArrayReisumentDupp = new Array();
                                    let dataLenght = oSettings._iDisplayLength;
                                    let customerSearch = $('#tblEarnings_filter input').val();
        
                                    sideBarService.getExemptReportableTermnination(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
        
                                        for (let i = 0; i < data.tterminationsimple.length; i++) {
                
                                            var dataListAllowance = [
                                                data.tterminationsimple[i].fields.ID || '',
                                                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsName || '',
                                                'Employee Termnination',
                                                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsDisplayName || '',
                                                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsRateType||'',
                                                '100',
                                                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExpenseAccount || '',
                                                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExemptPaygWithholding || '',
                                                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExpenseAccount || '',
                                                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsExemptSuperannuationGuaranteeCont || '',
                                                data.tterminationsimple[i].fields.EmployeeTerminationPaymentsReportableW1onActivityStatement || '',
                                             
                                               '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                               ];
                            
                                              splashArrayEarningList.push(dataListAllowance);
                                          }
        
                                            let uniqueChars = [...new Set(splashArrayEarningList)];
                                            var datatable = $('#tblEarnings').DataTable();
                                                datatable.clear();
                                                datatable.rows.add(uniqueChars);
                                                datatable.draw(false);
                                                setTimeout(function () {
                                                    $("#tblEarnings").dataTable().fnPageChange('last');
                                                }, 400);
        
                                                $('.fullScreenSpin').css('display', 'none');
        
        
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
        
                                });
                            setTimeout(function () {
                                MakeNegative();
                            }, 100);
                        },
                        "fnInitComplete": function () {
                            $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                            $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");
        
                        }
        
                    }).on('page', function () {
                        setTimeout(function () {
                            MakeNegative();
                        }, 100);
        
                    }).on('column-reorder', function () {
        
                    }).on('length.dt', function (e, settings, len) {
                        //$('.fullScreenSpin').css('display', 'inline-block');
                        let dataLenght = settings._iDisplayLength;
                        splashArrayEarningList = [];
                        if (dataLenght == -1) {
                        $('.fullScreenSpin').css('display', 'none');
        
                        } else {
                            if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                                $('.fullScreenSpin').css('display', 'none');
                            } else {
                                sideBarService.getExemptReportableTermnination(dataLenght, 0).then(function (dataNonBo) {
        
                                    addVS1Data('TTerminationSimple', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                        templateObject.resetData(dataNonBo);
                                        $('.fullScreenSpin').css('display', 'none');
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }
                        }
                        setTimeout(function () {
                            MakeNegative();
                        }, 100);
                    });
        
        
                }, 0);
        
                $('div.dataTables_filter input').addClass('form-control form-control-sm');
        
                $('.fullScreenSpin').css('display', 'none');
                }).catch(function (err) {
                    $('.fullScreenSpin').css('display', 'none');
                });
                });


     };
    templateObject.employmentTermnination();
    
    templateObject.getlumpSumE = function(){
        getVS1Data('TLumpSumE').then(function(dataObject) {
        if (dataObject.length == 0) {
             sideBarService.getExemptReportableLumpSumE(initialBaseDataLoad, 0).then(function (data) {
              addVS1Data('TLumpSumE', JSON.stringify(data));
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.tlumpsume.length; i++) {
                
                var dataListAllowance = [
                    data.tlumpsume[i].fields.ID || '',
                    data.tlumpsume[i].fields.LumpSumEName || '',
                    'Lump Sum E Earning',
                    data.tlumpsume[i].fields.LumpSumEDisplayName || '',
                    data.tlumpsume[i].fields.LumpSumERateType||'',
                    '100',
                    data.tlumpsume[i].fields.LumpSumEExpenseAccount || '',
                    data.tlumpsume[i].fields.LumpSumEExemptPaygWithholding || '',
                    data.tlumpsume[i].fields.LumpSumEExpenseAccount || '',
                    data.tlumpsume[i].fields.LumpSumEExemptSuperannuationGuaranteeCont || '',
                    data.tlumpsume[i].fields.LumpSumEReportableW1onActivityStatement || '',
                 
                   '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                   ];

                  splashArrayEarningList.push(dataListAllowance);
              }

        


              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblEarnings').DataTable({

                      data: splashArrayEarningList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                        
                        {
                           className: "colEarningsID hiddenColumn",
                           "targets": [0]
                         },
                         {
                            className: "colEarningsNames",
                            "targets": [1]
                         },  
                         {
                            className: "colEarningsType",
                            "targets": [2]
                         },      
                         {
                          className: "colEarningsDisplayName",
                          "targets": [3]
                         }, 
                         {
                            className: "colEarningsratetype",
                            "targets": [4]
                          },  
                         {
                          className: "colEarningsAmount",
                          "targets": [5]
                         },  
                         {
                          className: "colEarningsAccounts",
                          "targets": [6]
                         },  
                         {
                          className: "colEarningsAccountsID hiddenColumn",
                          "targets": [7]
                         },   
                         {
                          className: "colEarningsPAYG hiddenColumn"  ,
                          "targets": [8]
                         },  
                         {
                          className: "colEarningsSuperannuation hiddenColumn",
                          "targets": [9]
                         },  
                         {
                          className: "colEarningsReportableasW1 hiddenColumn",
                          "targets": [10]
                         },                   
                         {
                            className: "colDeleteEarnings",
                            "orderable": false,
                            "targets": -1
                         }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblEarnings').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblEarnings_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {

                              }
                          } else {

                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }

                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayEarningListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblEarnings_filter input').val();

                                  sideBarService.getOrdigetExemptReportableLumpSumEnarytimeEarning(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {

                                    for (let i = 0; i < data.tlumpsume.length; i++) {
                
                                        var dataListAllowance = [
                                            data.tlumpsume[i].fields.ID || '',
                                            data.tlumpsume[i].fields.LumpSumEName || '',
                                            'Lump Sum E Earning',
                                            data.tlumpsume[i].fields.LumpSumEDisplayName || '',
                                            data.tlumpsume[i].fields.LumpSumERateType||'',
                                            '100',
                                            data.tlumpsume[i].fields.LumpSumEExpenseAccount || '',
                                            data.tlumpsume[i].fields.LumpSumEExemptPaygWithholding || '',
                                            data.tlumpsume[i].fields.LumpSumEExpenseAccount || '',
                                            data.tlumpsume[i].fields.LumpSumEExemptSuperannuationGuaranteeCont || '',
                                            data.tlumpsume[i].fields.LumpSumEReportableW1onActivityStatement || '',
                                         
                                           '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                           ];
                        
                                          splashArrayEarningList.push(dataListAllowance);
                                      }
                      

                                              let uniqueChars = [...new Set(splashArrayEarningList)];
                                              var datatable = $('#tblEarnings').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblEarnings").dataTable().fnPageChange('last');
                                              }, 400);

                                              $('.fullScreenSpin').css('display', 'none');


                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });

                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                          $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                          $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");

                      }

                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);

                  }).on('column-reorder', function () {

                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayReisument = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');

                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getExemptReportableLumpSumE(dataLenght, 0).then(function (dataNonBo) {

                                addVS1Data('TLumpSumE', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });


              }, 0);

              $('div.dataTables_filter input').addClass('form-control form-control-sm');

              $('.fullScreenSpin').css('display', 'none');
             }).catch(function (err) {
             $('.fullScreenSpin').css('display', 'none');
             });
        }else{

          let data = JSON.parse(dataObject[0].data);

          let useData = data;
          let lineItems = [];
          let lineItemObj = {};
          for (let i = 0; i < data.tlumpsume.length; i++) {
                
            var dataListAllowance = [
                data.tlumpsume[i].fields.ID || '',
                data.tlumpsume[i].fields.LumpSumEName || '',
                'Lump Sum E Earning',
                data.tlumpsume[i].fields.LumpSumEDisplayName || '',
                data.tlumpsume[i].fields.LumpSumERateType||'',
                '100',
                data.tlumpsume[i].fields.LumpSumEExpenseAccount || '',
                data.tlumpsume[i].fields.LumpSumEExemptPaygWithholding || '',
                data.tlumpsume[i].fields.LumpSumEExpenseAccount || '',
                data.tlumpsume[i].fields.LumpSumEExemptSuperannuationGuaranteeCont || '',
                data.tlumpsume[i].fields.LumpSumEReportableW1onActivityStatement || '',
             
               '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
               ];

              splashArrayEarningList.push(dataListAllowance);
          }


          setTimeout(function () {
              MakeNegative();
          }, 100);
          setTimeout(function () {
              $('#tblEarnings').DataTable({

                  data: splashArrayEarningList,
                  "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                  columnDefs: [                              
                        
                    {
                       className: "colEarningsID hiddenColumn",
                       "targets": [0]
                     },
                     {
                        className: "colEarningsNames",
                        "targets": [1]
                     },  
                     {
                        className: "colEarningsType",
                        "targets": [2]
                     },      
                     {
                      className: "colEarningsDisplayName",
                      "targets": [3]
                     }, 
                     {
                        className: "colEarningsratetype",
                        "targets": [4]
                      },  
                     {
                      className: "colEarningsAmount",
                      "targets": [5]
                     },  
                     {
                      className: "colEarningsAccounts",
                      "targets": [6]
                     },  
                     {
                      className: "colEarningsAccountsID hiddenColumn",
                      "targets": [7]
                     },   
                     {
                      className: "colEarningsPAYG hiddenColumn"  ,
                      "targets": [8]
                     },  
                     {
                      className: "colEarningsSuperannuation hiddenColumn",
                      "targets": [9]
                     },  
                     {
                      className: "colEarningsReportableasW1 hiddenColumn",
                      "targets": [10]
                     },                   
                     {
                        className: "colDeleteEarnings",
                        "orderable": false,
                        "targets": -1
                     }
                  ],
                  select: true,
                  destroy: true,
                  colReorder: true,
                  pageLength: initialDatatableLoad,
                  lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                  info: true,
                  responsive: true,
                  "order": [[0, "asc"]],
                  action: function () {
                      $('#tblEarnings').DataTable().ajax.reload();
                  },
                  "fnDrawCallback": function (oSettings) {
                      $('.paginate_button.page-item').removeClass('disabled');
                      $('#tblEarnings_ellipsis').addClass('disabled');
                      if (oSettings._iDisplayLength == -1) {
                          if (oSettings.fnRecordsDisplay() > 150) {

                          }
                      } else {

                      }
                      if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                          $('.paginate_button.page-item.next').addClass('disabled');
                      }

                      $('.paginate_button.next:not(.disabled)', this.api().table().container())
                          .on('click', function () {
                              $('.fullScreenSpin').css('display', 'inline-block');
                              var splashArrayEarningListDupp = new Array();
                              let dataLenght = oSettings._iDisplayLength;
                              let customerSearch = $('#tblEarnings_filter input').val();

                              sideBarService.getExemptReportableLumpSumE(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {

                                for (let i = 0; i < data.tlumpsume.length; i++) {
                
                                    var dataListAllowance = [
                                        data.tlumpsume[i].fields.ID || '',
                                        data.tlumpsume[i].fields.LumpSumEName || '',
                                        'Lump Sum E Earning',
                                        data.tlumpsume[i].fields.LumpSumEDisplayName || '',
                                        data.tlumpsume[i].fields.LumpSumERateType||'',
                                        '100',
                                        data.tlumpsume[i].fields.LumpSumEExpenseAccount || '',
                                        data.tlumpsume[i].fields.LumpSumEExemptPaygWithholding || '',
                                        data.tlumpsume[i].fields.LumpSumEExpenseAccount || '',
                                        data.tlumpsume[i].fields.LumpSumEExemptSuperannuationGuaranteeCont || '',
                                        data.tlumpsume[i].fields.LumpSumEReportableW1onActivityStatement || '',
                                     
                                       '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                       ];
                        
                                      splashArrayEarningList.push(dataListAllowance);
                                  }
                        

                                          let uniqueChars = [...new Set(splashArrayEarningList)];
                                          var datatable = $('#tblEarnings').DataTable();
                                          datatable.clear();
                                          datatable.rows.add(uniqueChars);
                                          datatable.draw(false);
                                          setTimeout(function () {
                                            $("#tblEarnings").dataTable().fnPageChange('last');
                                          }, 400);

                                          $('.fullScreenSpin').css('display', 'none');


                              }).catch(function (err) {
                                  $('.fullScreenSpin').css('display', 'none');
                              });

                          });
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  },
                  "fnInitComplete": function () {
                    $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                    $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");

                  }

              }).on('page', function () {
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);

              }).on('column-reorder', function () {

              }).on('length.dt', function (e, settings, len) {
                //$('.fullScreenSpin').css('display', 'inline-block');
                let dataLenght = settings._iDisplayLength;
                splashArrayEarningList = [];
                if (dataLenght == -1) {
                  $('.fullScreenSpin').css('display', 'none');

                } else {
                    if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                        $('.fullScreenSpin').css('display', 'none');
                    } else {
                        sideBarService.getExemptReportableLumpSumE(dataLenght, 0).then(function (dataNonBo) {

                            addVS1Data('TLumpSumE', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                templateObject.resetData(dataNonBo);
                                $('.fullScreenSpin').css('display', 'none');
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }).catch(function (err) {
                            $('.fullScreenSpin').css('display', 'none');
                        });
                    }
                }
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
              });


          }, 0);

          $('div.dataTables_filter input').addClass('form-control form-control-sm');
          $('.fullScreenSpin').css('display', 'none');

        }
        }).catch(function(err) {

         
           sideBarService.getExemptReportableLumpSumE(initialBaseDataLoad, 0).then(function (data) {
             addVS1Data('TLumpSumE', JSON.stringify(data));
               let lineItems = [];
               let lineItemObj = {};
              
               for (let i = 0; i < data.tlumpsume.length; i++) {
                
                var dataListAllowance = [
                    data.tlumpsume[i].fields.ID || '',
                    data.tlumpsume[i].fields.LumpSumEName || '',
                    'Lump Sum E Earning',
                    data.tlumpsume[i].fields.LumpSumEDisplayName || '',
                    data.tlumpsume[i].fields.LumpSumERateType||'',
                    '100',
                    data.tlumpsume[i].fields.LumpSumEExpenseAccount || '',
                    data.tlumpsume[i].fields.LumpSumEExemptPaygWithholding || '',
                    data.tlumpsume[i].fields.LumpSumEExpenseAccount || '',
                    data.tlumpsume[i].fields.LumpSumEExemptSuperannuationGuaranteeCont || '',
                    data.tlumpsume[i].fields.LumpSumEReportableW1onActivityStatement || '',
                 
                   '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                   ];
    
                  splashArrayEarningList.push(dataListAllowance);
              }
    

            
      
              

                setTimeout(function () {
                    MakeNegative();
                }, 100);
                setTimeout(function () {
                    
                    $('#tblEarnings').DataTable({
        
                        data: splashArrayEarningList,
                        "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                        columnDefs: [                              
                        
                            {
                               className: "colEarningsID hiddenColumn",
                               "targets": [0]
                             },
                             {
                                className: "colEarningsNames",
                                "targets": [1]
                             },  
                             {
                                className: "colEarningsType",
                                "targets": [2]
                             },      
                             {
                              className: "colEarningsDisplayName",
                              "targets": [3]
                             }, 
                             {
                                className: "colEarningsratetype",
                                "targets": [4]
                              },  
                             {
                              className: "colEarningsAmount",
                              "targets": [5]
                             },  
                             {
                              className: "colEarningsAccounts",
                              "targets": [6]
                             },  
                             {
                              className: "colEarningsAccountsID hiddenColumn",
                              "targets": [7]
                             },   
                             {
                              className: "colEarningsPAYG hiddenColumn"  ,
                              "targets": [8]
                             },  
                             {
                              className: "colEarningsSuperannuation hiddenColumn",
                              "targets": [9]
                             },  
                             {
                              className: "colEarningsReportableasW1 hiddenColumn",
                              "targets": [10]
                             },                   
                             {
                                className: "colDeleteEarnings",
                                "orderable": false,
                                "targets": -1
                             }
                          ],
                        select: true,
                        destroy: true,
                        colReorder: true,
                        pageLength: initialDatatableLoad,
                        lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                        info: true,
                        responsive: true,
                        "order": [[0, "asc"]],
                        action: function () {
                            $('#tblEarnings').DataTable().ajax.reload();
                        },
                        "fnDrawCallback": function (oSettings) {
                            $('.paginate_button.page-item').removeClass('disabled');
                            $('#tblEarnings_ellipsis').addClass('disabled');
                            if (oSettings._iDisplayLength == -1) {
                                if (oSettings.fnRecordsDisplay() > 150) {
        
                                }
                            } else {
        
                            }
                            if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                                $('.paginate_button.page-item.next').addClass('disabled');
                            }
        
                            $('.paginate_button.next:not(.disabled)', this.api().table().container())
                                .on('click', function () {
                                    $('.fullScreenSpin').css('display', 'inline-block');
                                    var splashArrayReisumentDupp = new Array();
                                    let dataLenght = oSettings._iDisplayLength;
                                    let customerSearch = $('#tblEarnings_filter input').val();
        
                                    sideBarService.getExemptReportableLumpSumE(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
                                        for (let i = 0; i < data.tlumpsume.length; i++) {
                
                                            var dataListAllowance = [
                                                data.tlumpsume[i].fields.ID || '',
                                                data.tlumpsume[i].fields.LumpSumEName || '',
                                                'Lump Sum E Earning',
                                                data.tlumpsume[i].fields.LumpSumEDisplayName || '',
                                                data.tlumpsume[i].fields.LumpSumERateType||'',
                                                '100',
                                                data.tlumpsume[i].fields.LumpSumEExpenseAccount || '',
                                                data.tlumpsume[i].fields.LumpSumEExemptPaygWithholding || '',
                                                data.tlumpsume[i].fields.LumpSumEExpenseAccount || '',
                                                data.tlumpsume[i].fields.LumpSumEExemptSuperannuationGuaranteeCont || '',
                                                data.tlumpsume[i].fields.LumpSumEReportableW1onActivityStatement || '',
                                             
                                               '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                               ];
                                
                                              splashArrayEarningList.push(dataListAllowance);
                                          }
                                
        
                                            let uniqueChars = [...new Set(splashArrayEarningList)];
                                            var datatable = $('#tblEarnings').DataTable();
                                                datatable.clear();
                                                datatable.rows.add(uniqueChars);
                                                datatable.draw(false);
                                                setTimeout(function () {
                                                    $("#tblEarnings").dataTable().fnPageChange('last');
                                                }, 400);
        
                                                $('.fullScreenSpin').css('display', 'none');
        
        
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
        
                                });
                            setTimeout(function () {
                                MakeNegative();
                            }, 100);
                        },
                        "fnInitComplete": function () {
                            $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                            $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");
        
                        }
        
                    }).on('page', function () {
                        setTimeout(function () {
                            MakeNegative();
                        }, 100);
        
                    }).on('column-reorder', function () {
        
                    }).on('length.dt', function (e, settings, len) {
                        //$('.fullScreenSpin').css('display', 'inline-block');
                        let dataLenght = settings._iDisplayLength;
                        splashArrayEarningList = [];
                        if (dataLenght == -1) {
                        $('.fullScreenSpin').css('display', 'none');
        
                        } else {
                            if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                                $('.fullScreenSpin').css('display', 'none');
                            } else {
                                sideBarService.getExemptReportableLumpSumE(dataLenght, 0).then(function (dataNonBo) {
        
                                    addVS1Data('TLumpSumE', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                        templateObject.resetData(dataNonBo);
                                        $('.fullScreenSpin').css('display', 'none');
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }
                        }
                        setTimeout(function () {
                            MakeNegative();
                        }, 100);
                    });
        
        
                }, 0);
        
                $('div.dataTables_filter input').addClass('form-control form-control-sm');
        
                $('.fullScreenSpin').css('display', 'none');
                }).catch(function (err) {
                    $('.fullScreenSpin').css('display', 'none');
                });
                });


     };
    templateObject.getlumpSumE();
    
    templateObject.getbonusesCommissions = function(){
        getVS1Data('TEarningsBonusesCommissions').then(function(dataObject) {
        if (dataObject.length == 0) {
             sideBarService.getsuperannuationBonusesCommissions(initialBaseDataLoad, 0).then(function (data) {
              addVS1Data('TEarningsBonusesCommissions', JSON.stringify(data));
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.tearningsbonusescommissions.length; i++) {
                
                var dataListAllowance = [
                    data.tearningsbonusescommissions[i].fields.ID || '',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsName || '',
                    'Bonuese Commission',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsDisplayName || '',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsRateType||'',
                    '100',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExpenseAccount || '',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExemptPaygWithholding || '',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExpenseAccount || '',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExemptSuperannuationGuaranteeCont || '',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsReportableW1onActivityStatement || '',
                 
                   '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                   ];

                  splashArrayEarningList.push(dataListAllowance);
              }

        


              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblEarnings').DataTable({

                      data: splashArrayEarningList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                        
                        {
                           className: "colEarningsID hiddenColumn",
                           "targets": [0]
                         },
                         {
                            className: "colEarningsNames",
                            "targets": [1]
                         },  
                         {
                            className: "colEarningsType",
                            "targets": [2]
                         },      
                         {
                          className: "colEarningsDisplayName",
                          "targets": [3]
                         }, 
                         {
                            className: "colEarningsratetype",
                            "targets": [4]
                          },  
                         {
                          className: "colEarningsAmount",
                          "targets": [5]
                         },  
                         {
                          className: "colEarningsAccounts",
                          "targets": [6]
                         },  
                         {
                          className: "colEarningsAccountsID hiddenColumn",
                          "targets": [7]
                         },   
                         {
                          className: "colEarningsPAYG hiddenColumn"  ,
                          "targets": [8]
                         },  
                         {
                          className: "colEarningsSuperannuation hiddenColumn",
                          "targets": [9]
                         },  
                         {
                          className: "colEarningsReportableasW1 hiddenColumn",
                          "targets": [10]
                         },                   
                         {
                            className: "colDeleteEarnings",
                            "orderable": false,
                            "targets": -1
                         }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblEarnings').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblEarnings_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {

                              }
                          } else {

                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }

                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayEarningListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblEarnings_filter input').val();

                                  sideBarService.getsuperannuationBonusesCommissions(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {

                                    for (let i = 0; i < data.tearningsbonusescommissions.length; i++) {
                
                                        var dataListAllowance = [
                                            data.tearningsbonusescommissions[i].fields.ID || '',
                                            data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsName || '',
                                            'Bonuese Commission',
                                            data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsDisplayName || '',
                                            data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsRateType||'',
                                            '100',
                                            data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExpenseAccount || '',
                                            data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExemptPaygWithholding || '',
                                            data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExpenseAccount || '',
                                            data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExemptSuperannuationGuaranteeCont || '',
                                            data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsReportableW1onActivityStatement || '',
                                         
                                           '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                           ];
                        
                                          splashArrayEarningList.push(dataListAllowance);
                                      }
                      

                                              let uniqueChars = [...new Set(splashArrayEarningList)];
                                              var datatable = $('#tblEarnings').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblEarnings").dataTable().fnPageChange('last');
                                              }, 400);

                                              $('.fullScreenSpin').css('display', 'none');


                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });

                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                          $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                          $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");

                      }

                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);

                  }).on('column-reorder', function () {

                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayReisument = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');

                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getsuperannuationBonusesCommissions(dataLenght, 0).then(function (dataNonBo) {

                                addVS1Data('TEarningsBonusesCommissions', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });


              }, 0);

              $('div.dataTables_filter input').addClass('form-control form-control-sm');

              $('.fullScreenSpin').css('display', 'none');
             }).catch(function (err) {
             $('.fullScreenSpin').css('display', 'none');
             });
        }else{

          let data = JSON.parse(dataObject[0].data);

          let useData = data;
          let lineItems = [];
          let lineItemObj = {};
          for (let i = 0; i < data.tearningsbonusescommissions.length; i++) {
                
            var dataListAllowance = [
                data.tearningsbonusescommissions[i].fields.ID || '',
                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsName || '',
                'Bonuese Commission',
                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsDisplayName || '',
                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsRateType||'',
                '100',
                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExpenseAccount || '',
                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExemptPaygWithholding || '',
                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExpenseAccount || '',
                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExemptSuperannuationGuaranteeCont || '',
                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsReportableW1onActivityStatement || '',
             
               '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
               ];

              splashArrayEarningList.push(dataListAllowance);
          }
    


          setTimeout(function () {
              MakeNegative();
          }, 100);
          setTimeout(function () {
              $('#tblEarnings').DataTable({

                  data: splashArrayEarningList,
                  "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                  columnDefs: [                              
                        
                    {
                       className: "colEarningsID hiddenColumn",
                       "targets": [0]
                     },
                     {
                        className: "colEarningsNames",
                        "targets": [1]
                     },  
                     {
                        className: "colEarningsType",
                        "targets": [2]
                     },      
                     {
                      className: "colEarningsDisplayName",
                      "targets": [3]
                     }, 
                     {
                        className: "colEarningsratetype",
                        "targets": [4]
                      },  
                     {
                      className: "colEarningsAmount",
                      "targets": [5]
                     },  
                     {
                      className: "colEarningsAccounts",
                      "targets": [6]
                     },  
                     {
                      className: "colEarningsAccountsID hiddenColumn",
                      "targets": [7]
                     },   
                     {
                      className: "colEarningsPAYG hiddenColumn"  ,
                      "targets": [8]
                     },  
                     {
                      className: "colEarningsSuperannuation hiddenColumn",
                      "targets": [9]
                     },  
                     {
                      className: "colEarningsReportableasW1 hiddenColumn",
                      "targets": [10]
                     },                   
                     {
                        className: "colDeleteEarnings",
                        "orderable": false,
                        "targets": -1
                     }
                  ],
                  select: true,
                  destroy: true,
                  colReorder: true,
                  pageLength: initialDatatableLoad,
                  lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                  info: true,
                  responsive: true,
                  "order": [[0, "asc"]],
                  action: function () {
                      $('#tblEarnings').DataTable().ajax.reload();
                  },
                  "fnDrawCallback": function (oSettings) {
                      $('.paginate_button.page-item').removeClass('disabled');
                      $('#tblEarnings_ellipsis').addClass('disabled');
                      if (oSettings._iDisplayLength == -1) {
                          if (oSettings.fnRecordsDisplay() > 150) {

                          }
                      } else {

                      }
                      if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                          $('.paginate_button.page-item.next').addClass('disabled');
                      }

                      $('.paginate_button.next:not(.disabled)', this.api().table().container())
                          .on('click', function () {
                              $('.fullScreenSpin').css('display', 'inline-block');
                              var splashArrayEarningListDupp = new Array();
                              let dataLenght = oSettings._iDisplayLength;
                              let customerSearch = $('#tblEarnings_filter input').val();

                              sideBarService.getsuperannuationBonusesCommissions(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {

                                for (let i = 0; i < data.tearningsbonusescommissions.length; i++) {
                
                                    var dataListAllowance = [
                                        data.tearningsbonusescommissions[i].fields.ID || '',
                                        data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsName || '',
                                        'Bonuese Commission',
                                        data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsDisplayName || '',
                                        data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsRateType||'',
                                        '100',
                                        data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExpenseAccount || '',
                                        data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExemptPaygWithholding || '',
                                        data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExpenseAccount || '',
                                        data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExemptSuperannuationGuaranteeCont || '',
                                        data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsReportableW1onActivityStatement || '',
                                     
                                       '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                       ];
                    
                                      splashArrayEarningList.push(dataListAllowance);
                                  }

                                          let uniqueChars = [...new Set(splashArrayEarningList)];
                                          var datatable = $('#tblEarnings').DataTable();
                                          datatable.clear();
                                          datatable.rows.add(uniqueChars);
                                          datatable.draw(false);
                                          setTimeout(function () {
                                            $("#tblEarnings").dataTable().fnPageChange('last');
                                          }, 400);

                                          $('.fullScreenSpin').css('display', 'none');


                              }).catch(function (err) {
                                  $('.fullScreenSpin').css('display', 'none');
                              });

                          });
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  },
                  "fnInitComplete": function () {
                    $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                    $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");

                  }

              }).on('page', function () {
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);

              }).on('column-reorder', function () {

              }).on('length.dt', function (e, settings, len) {
                //$('.fullScreenSpin').css('display', 'inline-block');
                let dataLenght = settings._iDisplayLength;
                splashArrayEarningList = [];
                if (dataLenght == -1) {
                  $('.fullScreenSpin').css('display', 'none');

                } else {
                    if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                        $('.fullScreenSpin').css('display', 'none');
                    } else {
                        sideBarService.getsuperannuationBonusesCommissions(dataLenght, 0).then(function (dataNonBo) {

                            addVS1Data('TEarningsBonusesCommissions', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                templateObject.resetData(dataNonBo);
                                $('.fullScreenSpin').css('display', 'none');
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }).catch(function (err) {
                            $('.fullScreenSpin').css('display', 'none');
                        });
                    }
                }
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
              });


          }, 0);

          $('div.dataTables_filter input').addClass('form-control form-control-sm');
          $('.fullScreenSpin').css('display', 'none');

        }
        }).catch(function(err) {

         
           sideBarService.getsuperannuationBonusesCommissions(initialBaseDataLoad, 0).then(function (data) {
             addVS1Data('TEarningsBonusesCommissions', JSON.stringify(data));
               let lineItems = [];
               let lineItemObj = {};
              
               for (let i = 0; i < data.tearningsbonusescommissions.length; i++) {
                
                var dataListAllowance = [
                    data.tearningsbonusescommissions[i].fields.ID || '',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsName || '',
                    'Bonuese Commission',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsDisplayName || '',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsRateType||'',
                    '100',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExpenseAccount || '',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExemptPaygWithholding || '',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExpenseAccount || '',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExemptSuperannuationGuaranteeCont || '',
                    data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsReportableW1onActivityStatement || '',
                 
                   '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                   ];

                  splashArrayEarningList.push(dataListAllowance);
              }

            
      
              

                setTimeout(function () {
                    MakeNegative();
                }, 100);
                setTimeout(function () {
                    
                    $('#tblEarnings').DataTable({
        
                        data: splashArrayEarningList,
                        "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                        columnDefs: [                              
                        
                            {
                               className: "colEarningsID hiddenColumn",
                               "targets": [0]
                             },
                             {
                                className: "colEarningsNames",
                                "targets": [1]
                             },  
                             {
                                className: "colEarningsType",
                                "targets": [2]
                             },      
                             {
                              className: "colEarningsDisplayName",
                              "targets": [3]
                             }, 
                             {
                                className: "colEarningsratetype",
                                "targets": [4]
                              },  
                             {
                              className: "colEarningsAmount",
                              "targets": [5]
                             },  
                             {
                              className: "colEarningsAccounts",
                              "targets": [6]
                             },  
                             {
                              className: "colEarningsAccountsID hiddenColumn",
                              "targets": [7]
                             },   
                             {
                              className: "colEarningsPAYG hiddenColumn"  ,
                              "targets": [8]
                             },  
                             {
                              className: "colEarningsSuperannuation hiddenColumn",
                              "targets": [9]
                             },  
                             {
                              className: "colEarningsReportableasW1 hiddenColumn",
                              "targets": [10]
                             },                   
                             {
                                className: "colDeleteEarnings",
                                "orderable": false,
                                "targets": -1
                             }
                          ],
                        select: true,
                        destroy: true,
                        colReorder: true,
                        pageLength: initialDatatableLoad,
                        lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                        info: true,
                        responsive: true,
                        "order": [[0, "asc"]],
                        action: function () {
                            $('#tblEarnings').DataTable().ajax.reload();
                        },
                        "fnDrawCallback": function (oSettings) {
                            $('.paginate_button.page-item').removeClass('disabled');
                            $('#tblEarnings_ellipsis').addClass('disabled');
                            if (oSettings._iDisplayLength == -1) {
                                if (oSettings.fnRecordsDisplay() > 150) {
        
                                }
                            } else {
        
                            }
                            if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                                $('.paginate_button.page-item.next').addClass('disabled');
                            }
        
                            $('.paginate_button.next:not(.disabled)', this.api().table().container())
                                .on('click', function () {
                                    $('.fullScreenSpin').css('display', 'inline-block');
                                    var splashArrayReisumentDupp = new Array();
                                    let dataLenght = oSettings._iDisplayLength;
                                    let customerSearch = $('#tblEarnings_filter input').val();
        
                                    sideBarService.getsuperannuationBonusesCommissions(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
        
                                        for (let i = 0; i < data.tearningsbonusescommissions.length; i++) {
                
                                            var dataListAllowance = [
                                                data.tearningsbonusescommissions[i].fields.ID || '',
                                                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsName || '',
                                                'Bonuese Commission',
                                                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsDisplayName || '',
                                                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsRateType||'',
                                                '100',
                                                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExpenseAccount || '',
                                                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExemptPaygWithholding || '',
                                                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExpenseAccount || '',
                                                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsExemptSuperannuationGuaranteeCont || '',
                                                data.tearningsbonusescommissions[i].fields.EarningBonusesCommisionsReportableW1onActivityStatement || '',
                                             
                                               '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                               ];
                            
                                              splashArrayEarningList.push(dataListAllowance);
                                          }
        
                                            let uniqueChars = [...new Set(splashArrayEarningList)];
                                            var datatable = $('#tblEarnings').DataTable();
                                                datatable.clear();
                                                datatable.rows.add(uniqueChars);
                                                datatable.draw(false);
                                                setTimeout(function () {
                                                    $("#tblEarnings").dataTable().fnPageChange('last');
                                                }, 400);
        
                                                $('.fullScreenSpin').css('display', 'none');
        
        
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
        
                                });
                            setTimeout(function () {
                                MakeNegative();
                            }, 100);
                        },
                        "fnInitComplete": function () {
                            $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                            $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");
        
                        }
        
                    }).on('page', function () {
                        setTimeout(function () {
                            MakeNegative();
                        }, 100);
        
                    }).on('column-reorder', function () {
        
                    }).on('length.dt', function (e, settings, len) {
                        //$('.fullScreenSpin').css('display', 'inline-block');
                        let dataLenght = settings._iDisplayLength;
                        splashArrayEarningList = [];
                        if (dataLenght == -1) {
                        $('.fullScreenSpin').css('display', 'none');
        
                        } else {
                            if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                                $('.fullScreenSpin').css('display', 'none');
                            } else {
                                sideBarService.getsuperannuationBonusesCommissions(dataLenght, 0).then(function (dataNonBo) {
        
                                    addVS1Data('TEarningsBonusesCommissions', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                        templateObject.resetData(dataNonBo);
                                        $('.fullScreenSpin').css('display', 'none');
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }
                        }
                        setTimeout(function () {
                            MakeNegative();
                        }, 100);
                    });
        
        
                }, 0);
        
                $('div.dataTables_filter input').addClass('form-control form-control-sm');
        
                $('.fullScreenSpin').css('display', 'none');
                }).catch(function (err) {
                    $('.fullScreenSpin').css('display', 'none');
             });
         });


     };
    templateObject.getbonusesCommissions();

 
    templateObject.getlumpSumW = function(){
        getVS1Data('TLumpSumW').then(function(dataObject) {
        if (dataObject.length == 0) {
             sideBarService.getLumpSumW(initialBaseDataLoad, 0).then(function (data) {
              addVS1Data('TLumpSumW', JSON.stringify(data));
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.tlumpsumw.length; i++) {
                
                var dataListAllowance = [
                    data.tlumpsumw[i].fields.ID || '',
                    data.tlumpsumw[i].fields.LumpSumWName || '',
                    'Lump Sumw',
                    data.tlumpsumw[i].fields.LumpSumWDisplayName || '',
                    data.tlumpsumw[i].fields.LumpSumWRateType||'',
                    '100',
                    data.tlumpsumw[i].fields.LumpSumWExpenseAccount || '',
                    data.tlumpsumw[i].fields.LumpSumWExemptPaygWithholding || '',
                    data.tlumpsumw[i].fields.LumpSumWExpenseAccount || '',
                    data.tlumpsumw[i].fields.LumpSumWExemptSuperannuationGuaranteeCont || '',
                    data.tlumpsumw[i].fields.LumpSumWReportableW1onActivityStatement || '',
                   '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                   ];

                  splashArrayEarningList.push(dataListAllowance);
              }

        


              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblEarnings').DataTable({

                      data: splashArrayEarningList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                        
                        {
                           className: "colEarningsID hiddenColumn",
                           "targets": [0]
                         },
                         {
                            className: "colEarningsNames",
                            "targets": [1]
                         },  
                         {
                            className: "colEarningsType",
                            "targets": [2]
                         },      
                         {
                          className: "colEarningsDisplayName",
                          "targets": [3]
                         }, 
                         {
                            className: "colEarningsratetype",
                            "targets": [4]
                          },  
                         {
                          className: "colEarningsAmount",
                          "targets": [5]
                         },  
                         {
                          className: "colEarningsAccounts",
                          "targets": [6]
                         },  
                         {
                          className: "colEarningsAccountsID hiddenColumn",
                          "targets": [7]
                         },   
                         {
                          className: "colEarningsPAYG hiddenColumn"  ,
                          "targets": [8]
                         },  
                         {
                          className: "colEarningsSuperannuation hiddenColumn",
                          "targets": [9]
                         },  
                         {
                          className: "colEarningsReportableasW1 hiddenColumn",
                          "targets": [10]
                         },                   
                         {
                            className: "colDeleteEarnings",
                            "orderable": false,
                            "targets": -1
                         }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblEarnings').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblEarnings_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {

                              }
                          } else {

                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }

                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayEarningListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblEarnings_filter input').val();

                                  sideBarService.getLumpSumW(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {

                                    for (let i = 0; i < data.tlumpsumw.length; i++) {
                
                                        var dataListAllowance = [
                                            data.tlumpsumw[i].fields.ID || '',
                                            data.tlumpsumw[i].fields.LumpSumWName || '',
                                            'Lump Sumw',
                                            data.tlumpsumw[i].fields.LumpSumWDisplayName || '',
                                            data.tlumpsumw[i].fields.LumpSumWRateType||'',
                                            '100',
                                            data.tlumpsumw[i].fields.LumpSumWExpenseAccount || '',
                                            data.tlumpsumw[i].fields.LumpSumWExemptPaygWithholding || '',
                                            data.tlumpsumw[i].fields.LumpSumWExpenseAccount || '',
                                            data.tlumpsumw[i].fields.LumpSumWExemptSuperannuationGuaranteeCont || '',
                                            data.tlumpsumw[i].fields.LumpSumWReportableW1onActivityStatement || '',
                                           '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                           ];
                        
                                          splashArrayEarningList.push(dataListAllowance);
                                      }
                      

                                              let uniqueChars = [...new Set(splashArrayEarningList)];
                                              var datatable = $('#tblEarnings').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblEarnings").dataTable().fnPageChange('last');
                                              }, 400);

                                              $('.fullScreenSpin').css('display', 'none');


                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });

                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                          $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                          $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");

                      }

                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);

                  }).on('column-reorder', function () {

                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayReisument = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');

                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getLumpSumW(dataLenght, 0).then(function (dataNonBo) {

                                addVS1Data('TLumpSumW', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });


              }, 0);

              $('div.dataTables_filter input').addClass('form-control form-control-sm');

              $('.fullScreenSpin').css('display', 'none');
             }).catch(function (err) {
             $('.fullScreenSpin').css('display', 'none');
             });
        }else{

          let data = JSON.parse(dataObject[0].data);

          let useData = data;
          let lineItems = [];
          let lineItemObj = {};
          for (let i = 0; i < data.tlumpsumw.length; i++) {
                
            var dataListAllowance = [
                data.tlumpsumw[i].fields.ID || '',
                data.tlumpsumw[i].fields.LumpSumWName || '',
                'Lump Sumw',
                data.tlumpsumw[i].fields.LumpSumWDisplayName || '',
                data.tlumpsumw[i].fields.LumpSumWRateType||'',
                '100',
                data.tlumpsumw[i].fields.LumpSumWExpenseAccount || '',
                data.tlumpsumw[i].fields.LumpSumWExemptPaygWithholding || '',
                data.tlumpsumw[i].fields.LumpSumWExpenseAccount || '',
                data.tlumpsumw[i].fields.LumpSumWExemptSuperannuationGuaranteeCont || '',
                data.tlumpsumw[i].fields.LumpSumWReportableW1onActivityStatement || '',
               '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
               ];

              splashArrayEarningList.push(dataListAllowance);
          }
    


          setTimeout(function () {
              MakeNegative();
          }, 100);
          setTimeout(function () {
              $('#tblEarnings').DataTable({

                  data: splashArrayEarningList,
                  "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                  columnDefs: [                              
                        
                    {
                       className: "colEarningsID hiddenColumn",
                       "targets": [0]
                     },
                     {
                        className: "colEarningsNames",
                        "targets": [1]
                     },  
                     {
                        className: "colEarningsType",
                        "targets": [2]
                     },      
                     {
                      className: "colEarningsDisplayName",
                      "targets": [3]
                     }, 
                     {
                        className: "colEarningsratetype",
                        "targets": [4]
                      },  
                     {
                      className: "colEarningsAmount",
                      "targets": [5]
                     },  
                     {
                      className: "colEarningsAccounts",
                      "targets": [6]
                     },  
                     {
                      className: "colEarningsAccountsID hiddenColumn",
                      "targets": [7]
                     },   
                     {
                      className: "colEarningsPAYG hiddenColumn"  ,
                      "targets": [8]
                     },  
                     {
                      className: "colEarningsSuperannuation hiddenColumn",
                      "targets": [9]
                     },  
                     {
                      className: "colEarningsReportableasW1 hiddenColumn",
                      "targets": [10]
                     },                   
                     {
                        className: "colDeleteEarnings",
                        "orderable": false,
                        "targets": -1
                     }
                  ],
                  select: true,
                  destroy: true,
                  colReorder: true,
                  pageLength: initialDatatableLoad,
                  lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                  info: true,
                  responsive: true,
                  "order": [[0, "asc"]],
                  action: function () {
                      $('#tblEarnings').DataTable().ajax.reload();
                  },
                  "fnDrawCallback": function (oSettings) {
                      $('.paginate_button.page-item').removeClass('disabled');
                      $('#tblEarnings_ellipsis').addClass('disabled');
                      if (oSettings._iDisplayLength == -1) {
                          if (oSettings.fnRecordsDisplay() > 150) {

                          }
                      } else {

                      }
                      if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                          $('.paginate_button.page-item.next').addClass('disabled');
                      }

                      $('.paginate_button.next:not(.disabled)', this.api().table().container())
                          .on('click', function () {
                              $('.fullScreenSpin').css('display', 'inline-block');
                              var splashArrayEarningListDupp = new Array();
                              let dataLenght = oSettings._iDisplayLength;
                              let customerSearch = $('#tblEarnings_filter input').val();

                              sideBarService.getLumpSumW(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {

                                for (let i = 0; i < data.tlumpsumw.length; i++) {
                
                                    var dataListAllowance = [
                                        data.tlumpsumw[i].fields.ID || '',
                                        data.tlumpsumw[i].fields.LumpSumWName || '',
                                        'Lump Sumw',
                                        data.tlumpsumw[i].fields.LumpSumWDisplayName || '',
                                        data.tlumpsumw[i].fields.LumpSumWRateType||'',
                                        '100',
                                        data.tlumpsumw[i].fields.LumpSumWExpenseAccount || '',
                                        data.tlumpsumw[i].fields.LumpSumWExemptPaygWithholding || '',
                                        data.tlumpsumw[i].fields.LumpSumWExpenseAccount || '',
                                        data.tlumpsumw[i].fields.LumpSumWExemptSuperannuationGuaranteeCont || '',
                                        data.tlumpsumw[i].fields.LumpSumWReportableW1onActivityStatement || '',
                                       '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                       ];
                    
                                      splashArrayEarningList.push(dataListAllowance);
                                  }

                                          let uniqueChars = [...new Set(splashArrayEarningList)];
                                          var datatable = $('#tblEarnings').DataTable();
                                          datatable.clear();
                                          datatable.rows.add(uniqueChars);
                                          datatable.draw(false);
                                          setTimeout(function () {
                                            $("#tblEarnings").dataTable().fnPageChange('last');
                                          }, 400);

                                          $('.fullScreenSpin').css('display', 'none');


                              }).catch(function (err) {
                                  $('.fullScreenSpin').css('display', 'none');
                              });

                          });
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  },
                  "fnInitComplete": function () {
                    $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                    $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");

                  }

              }).on('page', function () {
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);

              }).on('column-reorder', function () {

              }).on('length.dt', function (e, settings, len) {
                //$('.fullScreenSpin').css('display', 'inline-block');
                let dataLenght = settings._iDisplayLength;
                splashArrayEarningList = [];
                if (dataLenght == -1) {
                  $('.fullScreenSpin').css('display', 'none');

                } else {
                    if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                        $('.fullScreenSpin').css('display', 'none');
                    } else {
                        sideBarService.getLumpSumW(dataLenght, 0).then(function (dataNonBo) {

                            addVS1Data('TLumpSumW', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                templateObject.resetData(dataNonBo);
                                $('.fullScreenSpin').css('display', 'none');
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }).catch(function (err) {
                            $('.fullScreenSpin').css('display', 'none');
                        });
                    }
                }
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
              });


          }, 0);

          $('div.dataTables_filter input').addClass('form-control form-control-sm');
          $('.fullScreenSpin').css('display', 'none');

        }
        }).catch(function(err) {

         
           sideBarService.getLumpSumW(initialBaseDataLoad, 0).then(function (data) {
             addVS1Data('TLumpSumW', JSON.stringify(data));
               let lineItems = [];
               let lineItemObj = {};
              
               for (let i = 0; i < data.tlumpsumw.length; i++) {
                
                var dataListAllowance = [
                    data.tlumpsumw[i].fields.ID || '',
                    data.tlumpsumw[i].fields.LumpSumWName || '',
                    'Lump Sumw',
                    data.tlumpsumw[i].fields.LumpSumWDisplayName || '',
                    data.tlumpsumw[i].fields.LumpSumWRateType||'',
                    '100',
                    data.tlumpsumw[i].fields.LumpSumWExpenseAccount || '',
                    data.tlumpsumw[i].fields.LumpSumWExemptPaygWithholding || '',
                    data.tlumpsumw[i].fields.LumpSumWExpenseAccount || '',
                    data.tlumpsumw[i].fields.LumpSumWExemptSuperannuationGuaranteeCont || '',
                    data.tlumpsumw[i].fields.LumpSumWReportableW1onActivityStatement || '',
                   '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                   ];

                  splashArrayEarningList.push(dataListAllowance);
              }

            
      
              

                setTimeout(function () {
                    MakeNegative();
                }, 100);
                setTimeout(function () {
                    
                    $('#tblEarnings').DataTable({
        
                        data: splashArrayEarningList,
                        "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                        columnDefs: [                              
                        
                            {
                               className: "colEarningsID hiddenColumn",
                               "targets": [0]
                             },
                             {
                                className: "colEarningsNames",
                                "targets": [1]
                             },  
                             {
                                className: "colEarningsType",
                                "targets": [2]
                             },      
                             {
                              className: "colEarningsDisplayName",
                              "targets": [3]
                             }, 
                             {
                                className: "colEarningsratetype",
                                "targets": [4]
                              },  
                             {
                              className: "colEarningsAmount",
                              "targets": [5]
                             },  
                             {
                              className: "colEarningsAccounts",
                              "targets": [6]
                             },  
                             {
                              className: "colEarningsAccountsID hiddenColumn",
                              "targets": [7]
                             },   
                             {
                              className: "colEarningsPAYG hiddenColumn"  ,
                              "targets": [8]
                             },  
                             {
                              className: "colEarningsSuperannuation hiddenColumn",
                              "targets": [9]
                             },  
                             {
                              className: "colEarningsReportableasW1 hiddenColumn",
                              "targets": [10]
                             },                   
                             {
                                className: "colDeleteEarnings",
                                "orderable": false,
                                "targets": -1
                             }
                          ],
                        select: true,
                        destroy: true,
                        colReorder: true,
                        pageLength: initialDatatableLoad,
                        lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                        info: true,
                        responsive: true,
                        "order": [[0, "asc"]],
                        action: function () {
                            $('#tblEarnings').DataTable().ajax.reload();
                        },
                        "fnDrawCallback": function (oSettings) {
                            $('.paginate_button.page-item').removeClass('disabled');
                            $('#tblEarnings_ellipsis').addClass('disabled');
                            if (oSettings._iDisplayLength == -1) {
                                if (oSettings.fnRecordsDisplay() > 150) {
        
                                }
                            } else {
        
                            }
                            if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                                $('.paginate_button.page-item.next').addClass('disabled');
                            }
        
                            $('.paginate_button.next:not(.disabled)', this.api().table().container())
                                .on('click', function () {
                                    $('.fullScreenSpin').css('display', 'inline-block');
                                    var splashArrayReisumentDupp = new Array();
                                    let dataLenght = oSettings._iDisplayLength;
                                    let customerSearch = $('#tblEarnings_filter input').val();
        
                                    sideBarService.getLumpSumW(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
        
                                        for (let i = 0; i < data.tlumpsumw.length; i++) {
                
                                            var dataListAllowance = [
                                                data.tlumpsumw[i].fields.ID || '',
                                                data.tlumpsumw[i].fields.LumpSumWName || '',
                                                'Lump Sumw',
                                                data.tlumpsumw[i].fields.LumpSumWDisplayName || '',
                                                data.tlumpsumw[i].fields.LumpSumWRateType||'',
                                                '100',
                                                data.tlumpsumw[i].fields.LumpSumWExpenseAccount || '',
                                                data.tlumpsumw[i].fields.LumpSumWExemptPaygWithholding || '',
                                                data.tlumpsumw[i].fields.LumpSumWExpenseAccount || '',
                                                data.tlumpsumw[i].fields.LumpSumWExemptSuperannuationGuaranteeCont || '',
                                                data.tlumpsumw[i].fields.LumpSumWReportableW1onActivityStatement || '',
                                               '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                               ];
                            
                                              splashArrayEarningList.push(dataListAllowance);
                                          }
        
                                            let uniqueChars = [...new Set(splashArrayEarningList)];
                                            var datatable = $('#tblEarnings').DataTable();
                                                datatable.clear();
                                                datatable.rows.add(uniqueChars);
                                                datatable.draw(false);
                                                setTimeout(function () {
                                                    $("#tblEarnings").dataTable().fnPageChange('last');
                                                }, 400);
        
                                                $('.fullScreenSpin').css('display', 'none');
        
        
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
        
                                });
                            setTimeout(function () {
                                MakeNegative();
                            }, 100);
                        },
                        "fnInitComplete": function () {
                            $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                            $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");
        
                        }
        
                    }).on('page', function () {
                        setTimeout(function () {
                            MakeNegative();
                        }, 100);
        
                    }).on('column-reorder', function () {
        
                    }).on('length.dt', function (e, settings, len) {
                        //$('.fullScreenSpin').css('display', 'inline-block');
                        let dataLenght = settings._iDisplayLength;
                        splashArrayEarningList = [];
                        if (dataLenght == -1) {
                        $('.fullScreenSpin').css('display', 'none');
        
                        } else {
                            if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                                $('.fullScreenSpin').css('display', 'none');
                            } else {
                                sideBarService.getLumpSumW(dataLenght, 0).then(function (dataNonBo) {
        
                                    addVS1Data('TLumpSumW', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                        templateObject.resetData(dataNonBo);
                                        $('.fullScreenSpin').css('display', 'none');
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }
                        }
                        setTimeout(function () {
                            MakeNegative();
                        }, 100);
                    });
        
        
                }, 0);
        
                $('div.dataTables_filter input').addClass('form-control form-control-sm');
        
                $('.fullScreenSpin').css('display', 'none');
                }).catch(function (err) {
                    $('.fullScreenSpin').css('display', 'none');
                });
                });


     };
    templateObject.getlumpSumW();

    templateObject.getdirectorsFees = function(){
        getVS1Data('TDirectorsFees').then(function(dataObject) {
        if (dataObject.length == 0) {
             sideBarService.getDirectorFee(initialBaseDataLoad, 0).then(function (data) {
              addVS1Data('TDirectorsFees', JSON.stringify(data));
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.tdirectorsfees.length; i++) {
                
                var dataListAllowance = [
                    data.tdirectorsfees[i].fields.ID || '',
                    data.tdirectorsfees[i].fields.DirectorsFeesName || '',
                    'Directors Fees',
                    data.tdirectorsfees[i].fields.DirectorsFeesDisplayName || '',
                    data.tdirectorsfees[i].fields.DirectorsFeesRateType||'',
                    '100',
                    data.tdirectorsfees[i].fields.DirectorsFeesExpenseAccount || '',
                    data.tdirectorsfees[i].fields.DirectorsFeesExemptPaygWithholding || '',
                    data.tdirectorsfees[i].fields.DirectorsFeesExpenseAccount || '',
                    data.tdirectorsfees[i].fields.DirectorsFeesExemptSuperannuationGuaranteeCont || '',
                    data.tdirectorsfees[i].fields.DirectorsFeesReportableW1onActivityStatement || '',
                 
                   '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                   ];

                  splashArrayEarningList.push(dataListAllowance);
              }

        


              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblEarnings').DataTable({

                      data: splashArrayEarningList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                        
                        {
                           className: "colEarningsID hiddenColumn",
                           "targets": [0]
                         },
                         {
                            className: "colEarningsNames",
                            "targets": [1]
                         },  
                         {
                            className: "colEarningsType",
                            "targets": [2]
                         },      
                         {
                          className: "colEarningsDisplayName",
                          "targets": [3]
                         }, 
                         {
                            className: "colEarningsratetype",
                            "targets": [4]
                          },  
                         {
                          className: "colEarningsAmount",
                          "targets": [5]
                         },  
                         {
                          className: "colEarningsAccounts",
                          "targets": [6]
                         },  
                         {
                          className: "colEarningsAccountsID hiddenColumn",
                          "targets": [7]
                         },   
                         {
                          className: "colEarningsPAYG hiddenColumn"  ,
                          "targets": [8]
                         },  
                         {
                          className: "colEarningsSuperannuation hiddenColumn",
                          "targets": [9]
                         },  
                         {
                          className: "colEarningsReportableasW1 hiddenColumn",
                          "targets": [10]
                         },                   
                         {
                            className: "colDeleteEarnings",
                            "orderable": false,
                            "targets": -1
                         }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblEarnings').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblEarnings_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {

                              }
                          } else {

                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }

                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayEarningListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblEarnings_filter input').val();

                                  sideBarService.getDirectorFee(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {

                                    for (let i = 0; i < data.tdirectorsfees.length; i++) {
                
                                        var dataListAllowance = [
                                            data.tdirectorsfees[i].fields.ID || '',
                                            data.tdirectorsfees[i].fields.DirectorsFeesName || '',
                                            'Directors Fees',
                                            data.tdirectorsfees[i].fields.DirectorsFeesDisplayName || '',
                                            data.tdirectorsfees[i].fields.DirectorsFeesRateType||'',
                                            '100',
                                            data.tdirectorsfees[i].fields.DirectorsFeesExpenseAccount || '',
                                            data.tdirectorsfees[i].fields.DirectorsFeesExemptPaygWithholding || '',
                                            data.tdirectorsfees[i].fields.DirectorsFeesExpenseAccount || '',
                                            data.tdirectorsfees[i].fields.DirectorsFeesExemptSuperannuationGuaranteeCont || '',
                                            data.tdirectorsfees[i].fields.DirectorsFeesReportableW1onActivityStatement || '',
                                         
                                           '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                           ];
                        
                                          splashArrayEarningList.push(dataListAllowance);
                                      }
                      

                                              let uniqueChars = [...new Set(splashArrayEarningList)];
                                              var datatable = $('#tblEarnings').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblEarnings").dataTable().fnPageChange('last');
                                              }, 400);

                                              $('.fullScreenSpin').css('display', 'none');


                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });

                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                          $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                          $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");

                      }

                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);

                  }).on('column-reorder', function () {

                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayReisument = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');

                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getDirectorFee(dataLenght, 0).then(function (dataNonBo) {

                                addVS1Data('TDirectorsFees', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });


              }, 0);

              $('div.dataTables_filter input').addClass('form-control form-control-sm');

              $('.fullScreenSpin').css('display', 'none');
             }).catch(function (err) {
             $('.fullScreenSpin').css('display', 'none');
             });
        }else{

          let data = JSON.parse(dataObject[0].data);

          let useData = data;
          let lineItems = [];
          let lineItemObj = {};
          
          
          for (let i = 0; i < data.tdirectorsfees.length; i++) {
                
            var dataListAllowance = [
                data.tdirectorsfees[i].fields.ID || '',
                data.tdirectorsfees[i].fields.DirectorsFeesName || '',
                'Directors Fees',
                data.tdirectorsfees[i].fields.DirectorsFeesDisplayName || '',
                data.tdirectorsfees[i].fields.DirectorsFeesRateType||'',
                '100',
                data.tdirectorsfees[i].fields.DirectorsFeesExpenseAccount || '',
                data.tdirectorsfees[i].fields.DirectorsFeesExemptPaygWithholding || '',
                data.tdirectorsfees[i].fields.DirectorsFeesExpenseAccount || '',
                data.tdirectorsfees[i].fields.DirectorsFeesExemptSuperannuationGuaranteeCont || '',
                data.tdirectorsfees[i].fields.DirectorsFeesReportableW1onActivityStatement || '',
             
               '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
               ];

              splashArrayEarningList.push(dataListAllowance);
          }
    


          setTimeout(function () {
              MakeNegative();
          }, 100);
          setTimeout(function () {
              $('#tblEarnings').DataTable({

                  data: splashArrayEarningList,
                  "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                  columnDefs: [                              
                        
                    {
                       className: "colEarningsID hiddenColumn",
                       "targets": [0]
                     },
                     {
                        className: "colEarningsNames",
                        "targets": [1]
                     },  
                     {
                        className: "colEarningsType",
                        "targets": [2]
                     },      
                     {
                      className: "colEarningsDisplayName",
                      "targets": [3]
                     }, 
                     {
                        className: "colEarningsratetype",
                        "targets": [4]
                      },  
                     {
                      className: "colEarningsAmount",
                      "targets": [5]
                     },  
                     {
                      className: "colEarningsAccounts",
                      "targets": [6]
                     },  
                     {
                      className: "colEarningsAccountsID hiddenColumn",
                      "targets": [7]
                     },   
                     {
                      className: "colEarningsPAYG hiddenColumn"  ,
                      "targets": [8]
                     },  
                     {
                      className: "colEarningsSuperannuation hiddenColumn",
                      "targets": [9]
                     },  
                     {
                      className: "colEarningsReportableasW1 hiddenColumn",
                      "targets": [10]
                     },                   
                     {
                        className: "colDeleteEarnings",
                        "orderable": false,
                        "targets": -1
                     }
                  ],
                  select: true,
                  destroy: true,
                  colReorder: true,
                  pageLength: initialDatatableLoad,
                  lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                  info: true,
                  responsive: true,
                  "order": [[0, "asc"]],
                  action: function () {
                      $('#tblEarnings').DataTable().ajax.reload();
                  },
                  "fnDrawCallback": function (oSettings) {
                      $('.paginate_button.page-item').removeClass('disabled');
                      $('#tblEarnings_ellipsis').addClass('disabled');
                      if (oSettings._iDisplayLength == -1) {
                          if (oSettings.fnRecordsDisplay() > 150) {

                          }
                      } else {

                      }
                      if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                          $('.paginate_button.page-item.next').addClass('disabled');
                      }

                      $('.paginate_button.next:not(.disabled)', this.api().table().container())
                          .on('click', function () {
                              $('.fullScreenSpin').css('display', 'inline-block');
                              var splashArrayEarningListDupp = new Array();
                              let dataLenght = oSettings._iDisplayLength;
                              let customerSearch = $('#tblEarnings_filter input').val();

                              sideBarService.getDirectorFee(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {

                                for (let i = 0; i < data.tdirectorsfees.length; i++) {
                
                                    var dataListAllowance = [
                                        data.tdirectorsfees[i].fields.ID || '',
                                        data.tdirectorsfees[i].fields.DirectorsFeesName || '',
                                        'Directors Fees',
                                        data.tdirectorsfees[i].fields.DirectorsFeesDisplayName || '',
                                        data.tdirectorsfees[i].fields.DirectorsFeesRateType||'',
                                        '100',
                                        data.tdirectorsfees[i].fields.DirectorsFeesExpenseAccount || '',
                                        data.tdirectorsfees[i].fields.DirectorsFeesExemptPaygWithholding || '',
                                        data.tdirectorsfees[i].fields.DirectorsFeesExpenseAccount || '',
                                        data.tdirectorsfees[i].fields.DirectorsFeesExemptSuperannuationGuaranteeCont || '',
                                        data.tdirectorsfees[i].fields.DirectorsFeesReportableW1onActivityStatement || '',
                                     
                                       '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                       ];
                    
                                      splashArrayEarningList.push(dataListAllowance);
                                  }

                                          let uniqueChars = [...new Set(splashArrayEarningList)];
                                          var datatable = $('#tblEarnings').DataTable();
                                          datatable.clear();
                                          datatable.rows.add(uniqueChars);
                                          datatable.draw(false);
                                          setTimeout(function () {
                                            $("#tblEarnings").dataTable().fnPageChange('last');
                                          }, 400);

                                          $('.fullScreenSpin').css('display', 'none');


                              }).catch(function (err) {
                                  $('.fullScreenSpin').css('display', 'none');
                              });

                          });
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  },
                  "fnInitComplete": function () {
                    $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                    $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");

                  }

              }).on('page', function () {
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);

              }).on('column-reorder', function () {

              }).on('length.dt', function (e, settings, len) {
                //$('.fullScreenSpin').css('display', 'inline-block');
                let dataLenght = settings._iDisplayLength;
                splashArrayEarningList = [];
                if (dataLenght == -1) {
                  $('.fullScreenSpin').css('display', 'none');

                } else {
                    if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                        $('.fullScreenSpin').css('display', 'none');
                    } else {
                        sideBarService.getDirectorFee(dataLenght, 0).then(function (dataNonBo) {

                            addVS1Data('TDirectorsFees', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                templateObject.resetData(dataNonBo);
                                $('.fullScreenSpin').css('display', 'none');
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }).catch(function (err) {
                            $('.fullScreenSpin').css('display', 'none');
                        });
                    }
                }
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
              });


          }, 0);

          $('div.dataTables_filter input').addClass('form-control form-control-sm');
          $('.fullScreenSpin').css('display', 'none');

        }
        }).catch(function(err) {

         
           sideBarService.getDirectorFee(initialBaseDataLoad, 0).then(function (data) {
             addVS1Data('TDirectorsFees', JSON.stringify(data));
               let lineItems = [];
               let lineItemObj = {};
              
               for (let i = 0; i < data.tdirectorsfees.length; i++) {
                
                var dataListAllowance = [
                    data.tdirectorsfees[i].fields.ID || '',
                    data.tdirectorsfees[i].fields.DirectorsFeesName || '',
                    'Directors Fees',
                    data.tdirectorsfees[i].fields.DirectorsFeesDisplayName || '',
                    data.tdirectorsfees[i].fields.DirectorsFeesRateType||'',
                    '100',
                    data.tdirectorsfees[i].fields.DirectorsFeesExpenseAccount || '',
                    data.tdirectorsfees[i].fields.DirectorsFeesExemptPaygWithholding || '',
                    data.tdirectorsfees[i].fields.DirectorsFeesExpenseAccount || '',
                    data.tdirectorsfees[i].fields.DirectorsFeesExemptSuperannuationGuaranteeCont || '',
                    data.tdirectorsfees[i].fields.DirectorsFeesReportableW1onActivityStatement || '',
                 
                   '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                   ];

                  splashArrayEarningList.push(dataListAllowance);
              }


            
      
              

                setTimeout(function () {
                    MakeNegative();
                }, 100);
                setTimeout(function () {
                    
                    $('#tblEarnings').DataTable({
        
                        data: splashArrayEarningList,
                        "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                        columnDefs: [                              
                        
                            {
                               className: "colEarningsID hiddenColumn",
                               "targets": [0]
                             },
                             {
                                className: "colEarningsNames",
                                "targets": [1]
                             },  
                             {
                                className: "colEarningsType",
                                "targets": [2]
                             },      
                             {
                              className: "colEarningsDisplayName",
                              "targets": [3]
                             }, 
                             {
                                className: "colEarningsratetype",
                                "targets": [4]
                              },  
                             {
                              className: "colEarningsAmount",
                              "targets": [5]
                             },  
                             {
                              className: "colEarningsAccounts",
                              "targets": [6]
                             },  
                             {
                              className: "colEarningsAccountsID hiddenColumn",
                              "targets": [7]
                             },   
                             {
                              className: "colEarningsPAYG hiddenColumn"  ,
                              "targets": [8]
                             },  
                             {
                              className: "colEarningsSuperannuation hiddenColumn",
                              "targets": [9]
                             },  
                             {
                              className: "colEarningsReportableasW1 hiddenColumn",
                              "targets": [10]
                             },                   
                             {
                                className: "colDeleteEarnings",
                                "orderable": false,
                                "targets": -1
                             }
                          ],
                        select: true,
                        destroy: true,
                        colReorder: true,
                        pageLength: initialDatatableLoad,
                        lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                        info: true,
                        responsive: true,
                        "order": [[0, "asc"]],
                        action: function () {
                            $('#tblEarnings').DataTable().ajax.reload();
                        },
                        "fnDrawCallback": function (oSettings) {
                            $('.paginate_button.page-item').removeClass('disabled');
                            $('#tblEarnings_ellipsis').addClass('disabled');
                            if (oSettings._iDisplayLength == -1) {
                                if (oSettings.fnRecordsDisplay() > 150) {
        
                                }
                            } else {
        
                            }
                            if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                                $('.paginate_button.page-item.next').addClass('disabled');
                            }
        
                            $('.paginate_button.next:not(.disabled)', this.api().table().container())
                                .on('click', function () {
                                    $('.fullScreenSpin').css('display', 'inline-block');
                                    var splashArrayReisumentDupp = new Array();
                                    let dataLenght = oSettings._iDisplayLength;
                                    let customerSearch = $('#tblEarnings_filter input').val();
        
                                    sideBarService.getDirectorFee(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
        
                                        for (let i = 0; i < data.tdirectorsfees.length; i++) {
                
                                            var dataListAllowance = [
                                                data.tdirectorsfees[i].fields.ID || '',
                                                data.tdirectorsfees[i].fields.DirectorsFeesName || '',
                                                'Directors Fees',
                                                data.tdirectorsfees[i].fields.DirectorsFeesDisplayName || '',
                                                data.tdirectorsfees[i].fields.DirectorsFeesRateType||'',
                                                '100',
                                                data.tdirectorsfees[i].fields.DirectorsFeesExpenseAccount || '',
                                                data.tdirectorsfees[i].fields.DirectorsFeesExemptPaygWithholding || '',
                                                data.tdirectorsfees[i].fields.DirectorsFeesExpenseAccount || '',
                                                data.tdirectorsfees[i].fields.DirectorsFeesExemptSuperannuationGuaranteeCont || '',
                                                data.tdirectorsfees[i].fields.DirectorsFeesReportableW1onActivityStatement || '',
                                             
                                               '<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                               ];
                            
                                              splashArrayEarningList.push(dataListAllowance);
                                          }
        
                                            let uniqueChars = [...new Set(splashArrayEarningList)];
                                            var datatable = $('#tblEarnings').DataTable();
                                                datatable.clear();
                                                datatable.rows.add(uniqueChars);
                                                datatable.draw(false);
                                                setTimeout(function () {
                                                    $("#tblEarnings").dataTable().fnPageChange('last');
                                                }, 400);
        
                                                $('.fullScreenSpin').css('display', 'none');
        
        
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
        
                                });
                            setTimeout(function () {
                                MakeNegative();
                            }, 100);
                        },
                        "fnInitComplete": function () {
                            $("<button class='btn btn-primary btnAddordinaryTimeEarnings' data-dismiss='modal' data-toggle='modal' data-target='#ordinaryTimeEarningsModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblEarnings_filter");
                            $("<button class='btn btn-primary btnRefreshEarnings' type='button' id='btnRefreshEarnings' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblEarnings_filter");
        
                        }
        
                    }).on('page', function () {
                        setTimeout(function () {
                            MakeNegative();
                        }, 100);
        
                    }).on('column-reorder', function () {
        
                    }).on('length.dt', function (e, settings, len) {
                        //$('.fullScreenSpin').css('display', 'inline-block');
                        let dataLenght = settings._iDisplayLength;
                        splashArrayEarningList = [];
                        if (dataLenght == -1) {
                        $('.fullScreenSpin').css('display', 'none');
        
                        } else {
                            if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                                $('.fullScreenSpin').css('display', 'none');
                            } else {
                                sideBarService.getDirectorFee(dataLenght, 0).then(function (dataNonBo) {
        
                                    addVS1Data('TDirectorsFees', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                        templateObject.resetData(dataNonBo);
                                        $('.fullScreenSpin').css('display', 'none');
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }
                        }
                        setTimeout(function () {
                            MakeNegative();
                        }, 100);
                    });
        
        
                }, 0);
        
                $('div.dataTables_filter input').addClass('form-control form-control-sm');
        
                $('.fullScreenSpin').css('display', 'none');
                }).catch(function (err) {
                    $('.fullScreenSpin').css('display', 'none');
                });
                });


     };
    templateObject.getdirectorsFees();

    templateObject.getLeaveTypeData = function(){

        getVS1Data('TPaidLeave').then(function(dataObject) {
            if (dataObject.length == 0) {
                 sideBarService.getPaidLeave(initialBaseDataLoad, 0).then(function (data) {
                  addVS1Data('TPaidLeave', JSON.stringify(data));
                  let lineItems = [];
                  let lineItemObj = {};
                  for (let i = 0; i < data.tpaidleave.length; i++) {
                    
                      var dataListAllowance = [
                          data.tpaidleave[i].fields.ID || '',
                          data.tpaidleave[i].fields.LeavePaidName || '',
                          data.tpaidleave[i].fields.LeavePaidUnits || '',
                          data.tpaidleave[i].fields.LeavePaidNormalEntitlement || '',
                          data.tpaidleave[i].fields.LeavePaidLeaveLoadingRate || '',
                          'paid',
                          data.tpaidleave[i].fields.LeavePaidShowBalanceOnPayslip == true ? 'show': 'hide',
                          '<td contenteditable="false" class="colDeletepaidrem"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                      ];
    
                      splashArrayLeaveList.push(dataListAllowance);
                         
                  }
    
            
    
    
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
                  setTimeout(function () {
                      $('#tblLeave').DataTable({
    
                          data: splashArrayLeaveList,
                          "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                          columnDefs: [                              
                            
                            {
                                 className: "colLeaveID hiddenColumn",
                                 "targets": [0]
                               },
                               {
                                  className: "colLeaveName",
                                  "targets": [1]
                               },  
                               {
                                  className: "colLeaveUnits",
                                  "targets": [2]
                               },  
                               {
                                className: "colLeaveNormalEntitlement",
                                "targets": [3]
                               },  
                               {
                                className: "colLeaveLeaveLoadingRate",
                                "targets": [4]
                               },  
                               {
                                className: "colLeavePaidLeave",
                                "targets": [5]
                               },  
                               {
                                className: "colLeaveShownOnPayslip",
                                "targets": [6]
                               },                        
                               {
                                  className: "colDeletepaidrem",
                                  "orderable": false,
                                  "targets": -1
                               }
                          ],
                          select: true,
                          destroy: true,
                          colReorder: true,
                          pageLength: initialDatatableLoad,
                          lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                          info: true,
                          responsive: true,
                          "order": [[0, "asc"]],
                          action: function () {
                              $('#tblLeave').DataTable().ajax.reload();
                          },
                          "fnDrawCallback": function (oSettings) {
                              $('.paginate_button.page-item').removeClass('disabled');
                              $('#tblLeave_ellipsis').addClass('disabled');
                              if (oSettings._iDisplayLength == -1) {
                                  if (oSettings.fnRecordsDisplay() > 150) {
    
                                  }
                              } else {
    
                              }
                              if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                                  $('.paginate_button.page-item.next').addClass('disabled');
                              }
    
                              $('.paginate_button.next:not(.disabled)', this.api().table().container())
                                  .on('click', function () {
                                      $('.fullScreenSpin').css('display', 'inline-block');
                                      var splashArrayLeaveListDupp = new Array();
                                      let dataLenght = oSettings._iDisplayLength;
                                      let customerSearch = $('#tblLeave_filter input').val();
    
                                      sideBarService.getPaidLeave(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                        for (let i = 0; i < data.tpaidleave.length; i++) {
                    
                                            var dataListAllowance = [
                                                data.tpaidleave[i].fields.ID || '',
                                                data.tpaidleave[i].fields.LeavePaidName || '',
                                                data.tpaidleave[i].fields.LeavePaidUnits || '',
                                                data.tpaidleave[i].fields.LeavePaidNormalEntitlement || '',
                                                data.tpaidleave[i].fields.LeavePaidLeaveLoadingRate || '',
                                                'paid',
                                                data.tpaidleave[i].fields.LeavePaidShowBalanceOnPayslip == true ? 'show': 'hide',
                                               '<td contenteditable="false" class="colDeletepaidrem"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                            ];
                          
                                            splashArrayLeaveList.push(dataListAllowance);
                                        }
    
                                                  let uniqueChars = [...new Set(splashArrayLeaveList)];
                                                  var datatable = $('#tblLeave').DataTable();
                                                  datatable.clear();
                                                  datatable.rows.add(uniqueChars);
                                                  datatable.draw(false);
                                                  setTimeout(function () {
                                                    $("#tblLeave").dataTable().fnPageChange('last');
                                                  }, 400);
    
                                                  $('.fullScreenSpin').css('display', 'none');
    
    
                                      }).catch(function (err) {
                                          $('.fullScreenSpin').css('display', 'none');
                                      });
    
                                  });
                              setTimeout(function () {
                                  MakeNegative();
                              }, 100);
                          },
                          "fnInitComplete": function () {
                              $("<button class='btn btn-primary btnAddNewPaidLeave' data-dismiss='modal' data-toggle='modal' data-target='#paidLeaveModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblLeave_filter");
                              $("<button class='btn btn-primary btnRefreshPaidLeave' type='button' id='btnRefreshPaidLeave' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblLeave_filter");
    
                          }
    
                      }).on('page', function () {
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
    
                      }).on('column-reorder', function () {
    
                      }).on('length.dt', function (e, settings, len) {
                        //$('.fullScreenSpin').css('display', 'inline-block');
                        let dataLenght = settings._iDisplayLength;
                        splashArrayLeaveList = [];
                        if (dataLenght == -1) {
                          $('.fullScreenSpin').css('display', 'none');
    
                        } else {
                            if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                                $('.fullScreenSpin').css('display', 'none');
                            } else {
                                sideBarService.getPaidLeave(dataLenght, 0).then(function (dataNonBo) {
    
                                    addVS1Data('TPaidLeave', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                        templateObject.resetData(dataNonBo);
                                        $('.fullScreenSpin').css('display', 'none');
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }
                        }
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      });
    
    
                  }, 0);
    
                  $('div.dataTables_filter input').addClass('form-control form-control-sm');
    
                  $('.fullScreenSpin').css('display', 'none');
              }).catch(function (err) {
                $('.fullScreenSpin').css('display', 'none');
              });
            }else{
    
              let data = JSON.parse(dataObject[0].data);
    
              let useData = data;
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.tpaidleave.length; i++) {
                    
                var dataListAllowance = [
                    data.tpaidleave[i].fields.ID || '',
                    data.tpaidleave[i].fields.LeavePaidName || '',
                    data.tpaidleave[i].fields.LeavePaidUnits || '',
                    data.tpaidleave[i].fields.LeavePaidNormalEntitlement || '',
                    data.tpaidleave[i].fields.LeavePaidLeaveLoadingRate || '',
                    'paid',
                    data.tpaidleave[i].fields.LeavePaidShowBalanceOnPayslip == true ? 'show': 'hide',
                   '<td contenteditable="false" class="colDeletepaidrem"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                   ];

                splashArrayLeaveList.push(dataListAllowance);
                leavetypearraylist.push(dataListAllowance);
                
              }
        
              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblLeave').DataTable({
    
                      data: splashArrayLeaveList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                            
                        {
                             className: "colLeaveID hiddenColumn",
                             "targets": [0]
                           },
                           {
                              className: "colLeaveName",
                              "targets": [1]
                           },  
                           {
                              className: "colLeaveUnits",
                              "targets": [2]
                           },  
                           {
                            className: "colLeaveNormalEntitlement",
                            "targets": [3]
                           },  
                           {
                            className: "colLeaveLeaveLoadingRate",
                            "targets": [4]
                           },  
                           {
                            className: "colLeavePaidLeave",
                            "targets": [5]
                           },  
                           {
                            className: "colLeaveShownOnPayslip",
                            "targets": [6]
                           },                        
                           {
                              className: "colDeletepaidrem",
                              "orderable": false,
                              "targets": -1
                           }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblLeave').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblLeave_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {
    
                              }
                          } else {
    
                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }
    
                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayLeaveListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblLeave_filter input').val();
    
                                  sideBarService.getPaidLeave(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                    for (let i = 0; i < data.tpaidleave.length; i++) {
                    
                                        var dataListAllowance = [
                                            data.tpaidleave[i].fields.ID || '',
                                            data.tpaidleave[i].fields.LeavePaidName || '',
                                            data.tpaidleave[i].fields.LeavePaidUnits || '',
                                            data.tpaidleave[i].fields.LeavePaidNormalEntitlement || '',
                                            data.tpaidleave[i].fields.LeavePaidLeaveLoadingRate || '',
                                            'paid',
                                            data.tpaidleave[i].fields.LeavePaidShowBalanceOnPayslip == true ? 'show': 'hide',
                                           '<td contenteditable="false" class="colDeletepaidrem"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                           ];
                                           leavetypearraylist.push(dataListAllowance);
                                           splashArrayLeaveList.push(dataListAllowance);
                                    }
    
                                              let uniqueChars = [...new Set(splashArrayLeaveList)];
                                              var datatable = $('#tblLeave').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblLeave").dataTable().fnPageChange('last');
                                              }, 400);
    
                                              $('.fullScreenSpin').css('display', 'none');
    
    
                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });
    
                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                        $("<button class='btn btn-primary btnAddNewPaidLeave' data-dismiss='modal' data-toggle='modal' data-target='#paidLeaveModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblLeave_filter");
                        $("<button class='btn btn-primary btnRefreshPaidLeave' type='button' id='btnRefreshPaidLeave' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblLeave_filter");
    
                      }
    
                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
    
                  }).on('column-reorder', function () {
    
                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayLeaveList = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');
    
                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getPaidLeave(dataLenght, 0).then(function (dataNonBo) {
    
                                addVS1Data('TPaidLeave', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });
    
    
              }, 0);
    
              $('div.dataTables_filter input').addClass('form-control form-control-sm');
              $('.fullScreenSpin').css('display', 'none');
    
            }
        }).catch(function(err) {
          sideBarService.getPaidLeave(initialBaseDataLoad, 0).then(function (data) {
              addVS1Data('TPaidLeave', JSON.stringify(data));
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.tpaidleave.length; i++) {
                    
                var dataListAllowance = [
                    data.tpaidleave[i].fields.ID || '',
                    data.tpaidleave[i].fields.LeavePaidName || '',
                    data.tpaidleave[i].fields.LeavePaidUnits || '',
                    data.tpaidleave[i].fields.LeavePaidNormalEntitlement || '',
                    data.tpaidleave[i].fields.LeavePaidLeaveLoadingRate || '',
                    'paid',
                    data.tpaidleave[i].fields.LeavePaidShowBalanceOnPayslip == true ? 'show': 'hide',
                   '<td contenteditable="false" class="colDeletepaidrem"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                   ];

                splashArrayLeaveList.push(dataListAllowance);
                leavetypearraylist.push(dataListAllowance);
                
            }
      
    
              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblLeave').DataTable({
    
                      data: splashArrayLeaveList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                            
                        {
                             className: "colLeaveID hiddenColumn",
                             "targets": [0]
                           },
                           {
                              className: "colLeaveName",
                              "targets": [1]
                           },  
                           {
                              className: "colLeaveUnits",
                              "targets": [2]
                           },  
                           {
                            className: "colLeaveNormalEntitlement",
                            "targets": [3]
                           },  
                           {
                            className: "colLeaveLeaveLoadingRate",
                            "targets": [4]
                           },  
                           {
                            className: "colLeavePaidLeave",
                            "targets": [5]
                           },  
                           {
                            className: "colLeaveShownOnPayslip",
                            "targets": [6]
                           },                        
                           {
                              className: "colDeletepaidrem",
                              "orderable": false,
                              "targets": -1
                           }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblLeave').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblLeave_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {
    
                              }
                          } else {
    
                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }
    
                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayLeaveListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblLeave_filter input').val();
    
                                  sideBarService.getPaidLeave(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                    for (let i = 0; i < data.tpaidleave.length; i++) {
                    
                                        var dataListAllowance = [
                                            data.tpaidleave[i].fields.ID || '',
                                            data.tpaidleave[i].fields.LeavePaidUnits || '',
                                            data.tpaidleave[i].fields.LeavePaidNormalEntitlement || '',
                                            data.tpaidleave[i].fields.LeavePaidLeaveLoadingRate || '',
                                            'paid',
                                            data.tpaidleave[i].fields.LeavePaidShowBalanceOnPayslip == true ? 'show': 'hide',
                                           '<td contenteditable="false" class="colDeletepaidrem"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                        ];
                                        leavetypearraylist.push(dataListAllowance);
                                        splashArrayLeaveList.push(dataListAllowance);
                                       
                                    }
    
                                         let uniqueChars = [...new Set(splashArrayLeaveList)];
                                         var datatable = $('#tblLeave').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblLeave").dataTable().fnPageChange('last');
                                              }, 400);
    
                                              $('.fullScreenSpin').css('display', 'none');
    
    
                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });
    
                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                        $("<button class='btn btn-primary btnAddNewPaidLeave' data-dismiss='modal' data-toggle='modal' data-target='#paidLeaveModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblLeave_filter");
                        $("<button class='btn btn-primary btnRefreshPaidLeave' type='button' id='btnRefreshPaidLeave' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblLeave_filter");
    
                      }
    
                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
    
                  }).on('column-reorder', function () {
    
                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayLeaveList = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');
    
                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getPaidLeave(dataLenght, 0).then(function (dataNonBo) {
    
                                addVS1Data('TPaidLeave', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });
    
    
              }, 0);
    
              $('div.dataTables_filter input').addClass('form-control form-control-sm');
    
              $('.fullScreenSpin').css('display', 'none');
          }).catch(function (err) {
            $('.fullScreenSpin').css('display', 'none');
          });
        });

    };

    templateObject.getLeaveTypeData();
   
    templateObject.getunpaidleavedata = function(){
              getVS1Data('TUnpaidLeave').then(function(dataObject) {
            if (dataObject.length == 0) {
                 sideBarService.getUnPaidLeave(initialBaseDataLoad, 0).then(function (data) {
                  addVS1Data('TUnpaidLeave', JSON.stringify(data));
                  let lineItems = [];
                  let lineItemObj = {};
                  for (let i = 0; i < data.tunpaidleave.length; i++) {
                    
                    var dataListAllowance = [
                        data.tunpaidleave[i].fields.ID || '',
                        data.tunpaidleave[i].fields.LeaveUnpaidName || '',
                        data.tunpaidleave[i].fields.LeaveUnpaidUnits || '',
                        data.tunpaidleave[i].fields.LeaveUnpaidNormalEntitlement || '',
                        data.tunpaidleave[i].fields.LeaveUnpaidLeaveLoadingRate || '',
                        'unpaid',
                        data.tunpaidleave[i].fields.LeaveUnpaidShowBalanceOnPayslip == true ? 'show': 'hide',
                        '<td contenteditable="false" class="colDeletepaidrem"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                    ];
                   
                     splashArrayLeaveList.push(dataListAllowance);               
                 }
    
        
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
                  setTimeout(function () {
                      $('#tblLeave').DataTable({
    
                          data: splashArrayLeaveList,
                          "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                          columnDefs: [                              
                            
                            {
                                 className: "colLeaveID hiddenColumn",
                                 "targets": [0]
                               },
                               {
                                  className: "colLeaveName",
                                  "targets": [1]
                               },  
                               {
                                  className: "colLeaveUnits",
                                  "targets": [2]
                               },  
                               {
                                className: "colLeaveNormalEntitlement",
                                "targets": [3]
                               },  
                               {
                                className: "colLeaveLeaveLoadingRate",
                                "targets": [4]
                               },  
                               {
                                className: "colLeavePaidLeave",
                                "targets": [5]
                               },  
                               {
                                className: "colLeaveShownOnPayslip",
                                "targets": [6]
                               },                        
                               {
                                  className: "colDeletepaidrem",
                                  "orderable": false,
                                  "targets": -1
                               }
                          ],
                          select: true,
                          destroy: true,
                          colReorder: true,
                          pageLength: initialDatatableLoad,
                          lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                          info: true,
                          responsive: true,
                          "order": [[0, "asc"]],
                          action: function () {
                              $('#tblLeave').DataTable().ajax.reload();
                          },
                          "fnDrawCallback": function (oSettings) {
                              $('.paginate_button.page-item').removeClass('disabled');
                              $('#tblLeave_ellipsis').addClass('disabled');
                              if (oSettings._iDisplayLength == -1) {
                                  if (oSettings.fnRecordsDisplay() > 150) {
    
                                  }
                              } else {
    
                              }
                              if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                                  $('.paginate_button.page-item.next').addClass('disabled');
                              }
    
                              $('.paginate_button.next:not(.disabled)', this.api().table().container())
                                  .on('click', function () {
                                      $('.fullScreenSpin').css('display', 'inline-block');
                                      var splashArrayLeaveListDupp = new Array();
                                      let dataLenght = oSettings._iDisplayLength;
                                      let customerSearch = $('#tblLeave_filter input').val();
    
                                      sideBarService.getUnPaidLeave(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                        for (let i = 0; i < data.tunpaidleave.length; i++) {
                    
                                            var dataListAllowance = [
                                                data.tunpaidleave[i].fields.ID || '',
                                                data.tunpaidleave[i].fields.LeaveUnpaidName || '',
                                                data.tunpaidleave[i].fields.LeaveUnpaidUnits || '',
                                                data.tunpaidleave[i].fields.LeaveUnpaidNormalEntitlement || '',
                                                data.tunpaidleave[i].fields.LeaveUnpaidLeaveLoadingRate || '',
                                                'unpaid',
                                                data.tunpaidleave[i].fields.LeaveUnpaidShowBalanceOnPayslip == true ? 'show': 'hide',
                                                '<td contenteditable="false" class="colDeletepaidrem"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                            ];
                                           
                                             splashArrayLeaveList.push(dataListAllowance);               
                                         }
                            
    
                                        let uniqueChars = [...new Set(splashArrayLeaveList)];
                                        var datatable = $('#tblLeave').DataTable();
                                        datatable.clear();
                                        datatable.rows.add(uniqueChars);
                                        datatable.draw(false);
                                        setTimeout(function () {
                                        $("#tblLeave").dataTable().fnPageChange('last');
                                        }, 400);
                                        $('.fullScreenSpin').css('display', 'none');
    
    
                                      }).catch(function (err) {
                                          $('.fullScreenSpin').css('display', 'none');
                                      });
    
                                  });
                              setTimeout(function () {
                                  MakeNegative();
                              }, 100);
                          },
                          "fnInitComplete": function () {
                              $("<button class='btn btn-primary btnAddNewPaidLeave' data-dismiss='modal' data-toggle='modal' data-target='#paidLeaveModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblLeave_filter");
                              $("<button class='btn btn-primary btnRefreshPaidLeave' type='button' id='btnRefreshPaidLeave' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblLeave_filter");
    
                          }
    
                      }).on('page', function () {
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
    
                      }).on('column-reorder', function () {
    
                      }).on('length.dt', function (e, settings, len) {
                        //$('.fullScreenSpin').css('display', 'inline-block');
                        let dataLenght = settings._iDisplayLength;
                        splashArrayLeaveList = [];
                        if (dataLenght == -1) {
                          $('.fullScreenSpin').css('display', 'none');
    
                        } else {
                            if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                                $('.fullScreenSpin').css('display', 'none');
                            } else {
                                sideBarService.getUnPaidLeave(dataLenght, 0).then(function (dataNonBo) {
    
                                    addVS1Data('TUnpaidLeave', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                        templateObject.resetData(dataNonBo);
                                        $('.fullScreenSpin').css('display', 'none');
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }
                        }
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      });
    
    
                  }, 0);
    
                  $('div.dataTables_filter input').addClass('form-control form-control-sm');
    
                  $('.fullScreenSpin').css('display', 'none');
              }).catch(function (err) {
                $('.fullScreenSpin').css('display', 'none');
              });
            }else{
    
              let data = JSON.parse(dataObject[0].data);
    
              let useData = data;
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.tunpaidleave.length; i++) {
                    
                var dataListAllowance = [
                    data.tunpaidleave[i].fields.ID || '',
                    data.tunpaidleave[i].fields.LeaveUnpaidName || '',
                    data.tunpaidleave[i].fields.LeaveUnpaidUnits || '',
                    data.tunpaidleave[i].fields.LeaveUnpaidNormalEntitlement || '',
                    data.tunpaidleave[i].fields.LeaveUnpaidLeaveLoadingRate || '',
                    'unpaid',
                    data.tunpaidleave[i].fields.LeaveUnpaidShowBalanceOnPayslip == true ? 'show': 'hide',
                    '<td contenteditable="false" class="colDeletepaidrem"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                ];
               
                 splashArrayLeaveList.push(dataListAllowance);               
              }

        
              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblLeave').DataTable({
    
                      data: splashArrayLeaveList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                            
                        {
                             className: "colLeaveID hiddenColumn",
                             "targets": [0]
                           },
                           {
                              className: "colLeaveName",
                              "targets": [1]
                           },  
                           {
                              className: "colLeaveUnits",
                              "targets": [2]
                           },  
                           {
                            className: "colLeaveNormalEntitlement",
                            "targets": [3]
                           },  
                           {
                            className: "colLeaveLeaveLoadingRate",
                            "targets": [4]
                           },  
                           {
                            className: "colLeavePaidLeave",
                            "targets": [5]
                           },  
                           {
                            className: "colLeaveShownOnPayslip",
                            "targets": [6]
                           },                        
                           {
                              className: "colDeletepaidrem",
                              "orderable": false,
                              "targets": -1
                           }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblLeave').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblLeave_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {
    
                              }
                          } else {
    
                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }
    
                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayLeaveListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblLeave_filter input').val();
    
                                  sideBarService.getPaidLeave(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                    for (let i = 0; i < data.tunpaidleave.length; i++) {
                    
                                        var dataListAllowance = [
                                            data.tunpaidleave[i].fields.ID || '',
                                            data.tunpaidleave[i].fields.LeaveUnpaidName || '',
                                            data.tunpaidleave[i].fields.LeaveUnpaidUnits || '',
                                            data.tunpaidleave[i].fields.LeaveUnpaidNormalEntitlement || '',
                                            data.tunpaidleave[i].fields.LeaveUnpaidLeaveLoadingRate || '',
                                            'unpaid',
                                            data.tunpaidleave[i].fields.LeaveUnpaidShowBalanceOnPayslip == true ? 'show': 'hide',
                                            '<td contenteditable="false" class="colDeletepaidrem"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                        ];
                                       
                                         splashArrayLeaveList.push(dataListAllowance);               
                                     }
                        
    
                                              let uniqueChars = [...new Set(splashArrayLeaveList)];
                                              var datatable = $('#tblLeave').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblLeave").dataTable().fnPageChange('last');
                                              }, 400);
    
                                              $('.fullScreenSpin').css('display', 'none');
    
    
                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });
    
                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                        $("<button class='btn btn-primary btnAddNewPaidLeave' data-dismiss='modal' data-toggle='modal' data-target='#paidLeaveModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblLeave_filter");
                        $("<button class='btn btn-primary btnRefreshPaidLeave' type='button' id='btnRefreshPaidLeave' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblLeave_filter");
    
                      }
    
                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
    
                  }).on('column-reorder', function () {
    
                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayLeaveList = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');
    
                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getUnPaidLeave(dataLenght, 0).then(function (dataNonBo) {
    
                                addVS1Data('TUnpaidLeave', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });
    
    
              }, 0);
    
              $('div.dataTables_filter input').addClass('form-control form-control-sm');
              $('.fullScreenSpin').css('display', 'none');
    
            }
        }).catch(function(err) {
     
          sideBarService.getUnPaidLeave(initialBaseDataLoad, 0).then(function (data) {
              addVS1Data('TUnpaidLeave', JSON.stringify(data));
           
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.tunpaidleave.length; i++) {
                    
                var dataListAllowance = [
                    data.tunpaidleave[i].fields.ID || '',
                    data.tunpaidleave[i].fields.LeaveUnpaidName || '',
                    data.tunpaidleave[i].fields.LeaveUnpaidUnits || '',
                    data.tunpaidleave[i].fields.LeaveUnpaidNormalEntitlement || '',
                    data.tunpaidleave[i].fields.LeaveUnpaidLeaveLoadingRate || '',
                    'unpaid',
                    data.tunpaidleave[i].fields.LeaveUnpaidShowBalanceOnPayslip == true ? 'show': 'hide',
                    '<td contenteditable="false" class="colDeletepaidrem"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                ];
               
                 splashArrayLeaveList.push(dataListAllowance);               
             }

              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblLeave').DataTable({
    
                      data: splashArrayLeaveList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                            
                        {
                             className: "colLeaveID hiddenColumn",
                             "targets": [0]
                           },
                           {
                              className: "colLeaveName",
                              "targets": [1]
                           },  
                           {
                              className: "colLeaveUnits",
                              "targets": [2]
                           },  
                           {
                            className: "colLeaveNormalEntitlement",
                            "targets": [3]
                           },  
                           {
                            className: "colLeaveLeaveLoadingRate",
                            "targets": [4]
                           },  
                           {
                            className: "colLeavePaidLeave",
                            "targets": [5]
                           },  
                           {
                            className: "colLeaveShownOnPayslip",
                            "targets": [6]
                           },                        
                           {
                              className: "colDeletepaidrem",
                              "orderable": false,
                              "targets": -1
                           }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblLeave').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblLeave_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {
    
                              }
                          } else {
    
                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }
    
                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayLeaveListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblLeave_filter input').val();
    
                                  sideBarService.getUnPaidLeave(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                    for (let i = 0; i < data.tunpaidleave.length; i++) {
                    
                                        var dataListAllowance = [
                                            data.tunpaidleave[i].fields.ID || '',
                                            data.tunpaidleave[i].fields.LeaveUnpaidName || '',
                                            data.tunpaidleave[i].fields.LeaveUnpaidUnits || '',
                                            data.tunpaidleave[i].fields.LeaveUnpaidNormalEntitlement || '',
                                            data.tunpaidleave[i].fields.LeaveUnpaidLeaveLoadingRate || '',
                                            'unpaid',
                                            data.tunpaidleave[i].fields.LeaveUnpaidShowBalanceOnPayslip == true ? 'show': 'hide',
                                            '<td contenteditable="false" class="colDeletepaidrem"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                        ];
                                       
                                         splashArrayLeaveList.push(dataListAllowance);               
                                     }
                        
    
                                         let uniqueChars = [...new Set(splashArrayLeaveList)];
                                         var datatable = $('#tblLeave').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblLeave").dataTable().fnPageChange('last');
                                              }, 400);
    
                                              $('.fullScreenSpin').css('display', 'none');
    
    
                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });
    
                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                        $("<button class='btn btn-primary btnAddNewPaidLeave' data-dismiss='modal' data-toggle='modal' data-target='#paidLeaveModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblLeave_filter");
                        $("<button class='btn btn-primary btnRefreshPaidLeave' type='button' id='btnRefreshPaidLeave' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblLeave_filter");
    
                      }
    
                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
    
                  }).on('column-reorder', function () {
    
                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayLeaveList = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');
    
                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getUnPaidLeave(dataLenght, 0).then(function (dataNonBo) {
    
                                addVS1Data('TUnpaidLeave', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });
    
    
              }, 0);
    
              $('div.dataTables_filter input').addClass('form-control form-control-sm');
    
              $('.fullScreenSpin').css('display', 'none');
          }).catch(function (err) {
            $('.fullScreenSpin').css('display', 'none');
          });
        });

    };
    templateObject.getunpaidleavedata();
  
    templateObject.getReimbursement = function(){
 
        getVS1Data('TReimbursement').then(function(dataObject) {
            if (dataObject.length == 0) {
                 sideBarService.getReimbursement(initialBaseDataLoad, 0).then(function (data) {
                  addVS1Data('TReimbursement', JSON.stringify(data));
                  let lineItems = [];
                  let lineItemObj = {};
                  for (let i = 0; i < data.treimbursement.length; i++) {
                    
                      var dataListAllowance = [
                          data.treimbursement[i].fields.ID || '',
                          data.treimbursement[i].fields.ReimbursementName || 0,
                          data.treimbursement[i].fields.ReimbursementAccount || 0,
                         '<td contenteditable="false" class="colDeleterei"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                      ];
    
                      splashArrayReisument.push(dataListAllowance);
                  }
    
            
    
    
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
                  setTimeout(function () {
                      $('#tblReimbursements').DataTable({
    
                          data: splashArrayReisument,
                          "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                          columnDefs: [                              
                            
                            {
                                 className: "colReimbursementID hiddenColumn",
                                 "targets": [0]
                               },
                               {
                                  className: "colReimbursementName",
                                  "targets": [1]
                               },  
                               {
                                  className: "colReimbursementAccount",
                                  "targets": [2]
                               },                        
                               {
                                  className: "colDeleterei",
                                  "orderable": false,
                                  "targets": -1
                               }
                          ],
                          select: true,
                          destroy: true,
                          colReorder: true,
                          pageLength: initialDatatableLoad,
                          lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                          info: true,
                          responsive: true,
                          "order": [[0, "asc"]],
                          action: function () {
                              $('#tblReimbursements').DataTable().ajax.reload();
                          },
                          "fnDrawCallback": function (oSettings) {
                              $('.paginate_button.page-item').removeClass('disabled');
                              $('#tblReimbursements_ellipsis').addClass('disabled');
                              if (oSettings._iDisplayLength == -1) {
                                  if (oSettings.fnRecordsDisplay() > 150) {
    
                                  }
                              } else {
    
                              }
                              if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                                  $('.paginate_button.page-item.next').addClass('disabled');
                              }
    
                              $('.paginate_button.next:not(.disabled)', this.api().table().container())
                                  .on('click', function () {
                                      $('.fullScreenSpin').css('display', 'inline-block');
                                      var splashArrayReisumentDupp = new Array();
                                      let dataLenght = oSettings._iDisplayLength;
                                      let customerSearch = $('#tblReimbursements_filter input').val();
    
                                      sideBarService.getReimbursement(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                        for (let i = 0; i < data.treimbursement.length; i++) {
                    
                                            var dataListAllowance = [
                                                data.treimbursement[i].fields.ID || '',
                                                data.treimbursement[i].fields.ReimbursementName || 0,
                                                data.treimbursement[i].fields.ReimbursementAccount || 0,
                                               '<td contenteditable="false" class="colDeleterei"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                            ];
                          
                                            splashArrayReisument.push(dataListAllowance);
                                        }
    
                                                  let uniqueChars = [...new Set(splashArrayReisument)];
                                                  var datatable = $('#tblReimbursements').DataTable();
                                                  datatable.clear();
                                                  datatable.rows.add(uniqueChars);
                                                  datatable.draw(false);
                                                  setTimeout(function () {
                                                    $("#tblReimbursements").dataTable().fnPageChange('last');
                                                  }, 400);
    
                                                  $('.fullScreenSpin').css('display', 'none');
    
    
                                      }).catch(function (err) {
                                          $('.fullScreenSpin').css('display', 'none');
                                      });
    
                                  });
                              setTimeout(function () {
                                  MakeNegative();
                              }, 100);
                          },
                          "fnInitComplete": function () {
                              $("<button class='btn btn-primary btnAddNewReimbursements' data-dismiss='modal' data-toggle='modal' data-target='#newReimbursementModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblReimbursements_filter");
                              $("<button class='btn btn-primary btnRefreshReimbursements' type='button' id='btnRefreshReimbursements' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblReimbursements_filter");
    
                          }
    
                      }).on('page', function () {
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
    
                      }).on('column-reorder', function () {
    
                      }).on('length.dt', function (e, settings, len) {
                        //$('.fullScreenSpin').css('display', 'inline-block');
                        let dataLenght = settings._iDisplayLength;
                        splashArrayReisument = [];
                        if (dataLenght == -1) {
                          $('.fullScreenSpin').css('display', 'none');
    
                        } else {
                            if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                                $('.fullScreenSpin').css('display', 'none');
                            } else {
                                sideBarService.getReimbursement(dataLenght, 0).then(function (dataNonBo) {
    
                                    addVS1Data('tblReimbursements', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                        templateObject.resetData(dataNonBo);
                                        $('.fullScreenSpin').css('display', 'none');
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }
                        }
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      });
    
    
                  }, 0);
    
                  $('div.dataTables_filter input').addClass('form-control form-control-sm');
    
                  $('.fullScreenSpin').css('display', 'none');
              }).catch(function (err) {
                $('.fullScreenSpin').css('display', 'none');
              });
            }else{
    
              let data = JSON.parse(dataObject[0].data);
    
              let useData = data;
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.treimbursement.length; i++) {
                    
                var dataListAllowance = [
                    data.treimbursement[i].fields.ID || '',
                    data.treimbursement[i].fields.ReimbursementName || 0,
                    data.treimbursement[i].fields.ReimbursementAccount || 0,
                   '<td contenteditable="false" class="colDeleterei"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                ];

                splashArrayReisument.push(dataListAllowance);
            }
        
    
    
              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblReimbursements').DataTable({
    
                      data: splashArrayReisument,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                            
                        {
                             className: "colReimbursementID hiddenColumn",
                             "targets": [0]
                           },
                           {
                              className: "colReimbursementName",
                              "targets": [1]
                           },  
                           {
                              className: "colReimbursementAccount",
                              "targets": [2]
                           },                        
                           {
                              className: "colDeleterei",
                              "orderable": false,
                              "targets": -1
                           }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblReimbursements').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblReimbursements_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {
    
                              }
                          } else {
    
                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }
    
                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayReisumentDuppDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblReimbursements_filter input').val();
    
                                  sideBarService.getReimbursement(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                    for (let i = 0; i < data.treimbursement.length; i++) {
                    
                                        var dataListAllowance = [
                                            data.treimbursement[i].fields.ID || '',
                                            data.treimbursement[i].fields.ReimbursementName || 0,
                                            data.treimbursement[i].fields.ReimbursementAccount || 0,
                                           '<td contenteditable="false" class="colDeleterei"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                        ];
                        
                                        splashArrayReisument.push(dataListAllowance);
                                      }
    
                                              let uniqueChars = [...new Set(splashArrayReisument)];
                                              var datatable = $('#tblReimbursements').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblReimbursements").dataTable().fnPageChange('last');
                                              }, 400);
    
                                              $('.fullScreenSpin').css('display', 'none');
    
    
                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });
    
                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                        $("<button class='btn btn-primary btnAddNewReimbursements' data-dismiss='modal' data-toggle='modal' data-target='#newReimbursementModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblReimbursements_filter");
                        $("<button class='btn btn-primary btnRefreshReimbursements' type='button' id='btnRefreshReimbursements' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblReimbursements_filter");
    
                      }
    
                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
    
                  }).on('column-reorder', function () {
    
                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayCalenderList = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');
    
                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getReimbursement(dataLenght, 0).then(function (dataNonBo) {
    
                                addVS1Data('TReimbursement', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });
    
    
              }, 0);
    
              $('div.dataTables_filter input').addClass('form-control form-control-sm');
              $('.fullScreenSpin').css('display', 'none');
    
            }
        }).catch(function(err) {
          sideBarService.getReimbursement(initialBaseDataLoad, 0).then(function (data) {
              addVS1Data('TReimbursement', JSON.stringify(data));
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.treimbursement.length; i++) {
                    
                var dataListAllowance = [
                    data.treimbursement[i].fields.ID || '',
                    data.treimbursement[i].fields.ReimbursementName || 0,
                    data.treimbursement[i].fields.ReimbursementAccount || 0,
                   '<td contenteditable="false" class="colDeleterei"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                ];

                splashArrayReisument.push(dataListAllowance);
            }
      
    
              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblReimbursements').DataTable({
    
                      data: splashArrayReisument,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                            
                        {
                             className: "colReimbursementID hiddenColumn",
                             "targets": [0]
                           },
                           {
                              className: "colReimbursementName",
                              "targets": [1]
                           },  
                           {
                              className: "colReimbursementAccount",
                              "targets": [2]
                           },                        
                           {
                              className: "colDeleterei",
                              "orderable": false,
                              "targets": -1
                           }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblReimbursements').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblReimbursements_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {
    
                              }
                          } else {
    
                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }
    
                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArrayReisumentDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblReimbursements_filter input').val();
    
                                  sideBarService.getReimbursement(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                    for (let i = 0; i < data.treimbursement.length; i++) {
                    
                                        var dataListAllowance = [
                                            data.treimbursement[i].fields.ID || '',
                                            data.treimbursement[i].fields.ReimbursementName || 0,
                                            data.treimbursement[i].fields.ReimbursementAccount || 0,
                                           '<td contenteditable="false" class="colDeleterei"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                        ];
                        
                                        splashArrayReisument.push(dataListAllowance);
                                    }
    
                                         let uniqueChars = [...new Set(splashArrayReisument)];
                                         var datatable = $('#tblReimbursements').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblReimbursements").dataTable().fnPageChange('last');
                                              }, 400);
    
                                              $('.fullScreenSpin').css('display', 'none');
    
    
                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });
    
                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                        $("<button class='btn btn-primary btnAddNewReimbursements' data-dismiss='modal' data-toggle='modal' data-target='#newReimbursementModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblReimbursements_filter");
                        $("<button class='btn btn-primary btnRefreshReimbursements' type='button' id='btnRefreshReimbursements' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblReimbursements_filter");
    
                      }
    
                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
    
                  }).on('column-reorder', function () {
    
                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArrayReisument = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');
    
                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getReimbursement(dataLenght, 0).then(function (dataNonBo) {
    
                                addVS1Data('TReimbursement', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });
    
    
              }, 0);
    
              $('div.dataTables_filter input').addClass('form-control form-control-sm');
    
              $('.fullScreenSpin').css('display', 'none');
          }).catch(function (err) {
            $('.fullScreenSpin').css('display', 'none');
          });
        });

    };
    templateObject.getReimbursement();

  
    templateObject.getSuperannuationData = function(){
        getVS1Data('TSuperannuation').then(function(dataObject) {
            if (dataObject.length == 0) {
                 sideBarService.getSuperannuation(initialBaseDataLoad, 0).then(function (data) {
                  addVS1Data('TSuperannuation', JSON.stringify(data));
                  let lineItems = [];
                  let lineItemObj = {};
                  for (let i = 0; i < data.tsuperannuation.length; i++) {
                    
                    var dataListAllowance = [
                        data.tsuperannuation[i].fields.ID || '',
                        data.tsuperannuation[i].fields.Superfund || '',
                        data.tsuperannuation[i].fields.Supertypeid || '',
                        data.tsuperannuation[i].fields.Employeeid || '',
                        'Key Missing',
                        'Key Missing',
                        'Key Missing',
                        data.tsuperannuation[i].fields.Accountno || '',
                        'Key Missing',
                        '<td contenteditable="false" class="colDeletesup"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                     ];
    
                      splashArraySuperannuationList.push(dataListAllowance);
                  }
    
            
    
    
                  setTimeout(function () {
                      MakeNegative();
                  }, 100);
                  setTimeout(function () {
                      $('#tblSuperannuation').DataTable({
    
                          data: splashArraySuperannuationList,
                          "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                          columnDefs: [                              
                            
                            {
                              className: "colSuperannuationID hiddenColumn",
                              "targets": [0]
                            },
                            {
                               className: "colSuperannuationName",
                               "targets": [1]
                            },  
                            {
                               className: "colSuperannuationType",
                               "targets": [2]
                            },  
                            {
                             className: "colEmployerNum",
                             "targets": [3]
                            },  
                            {
                             className: "colabn",
                             "targets": [4]
                            },  
                            {
                             className: "colservicealias",
                             "targets": [5]
                            },  
                            {
                             className: "colbsb",
                             "targets": [6]
                            },  
                            {
                             className: "colaccountnumber",
                             "targets": [7]
                            },  
                            {
                             className: "colaccountname",
                             "targets": [8]
                            },  
                                                
                            {
                               className: "colDeletesup",
                               "orderable": false,
                               "targets": -1
                            }
                          ],
                          select: true,
                          destroy: true,
                          colReorder: true,
                          pageLength: initialDatatableLoad,
                          lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                          info: true,
                          responsive: true,
                          "order": [[0, "asc"]],
                          action: function () {
                              $('#tblSuperannuation').DataTable().ajax.reload();
                          },
                          "fnDrawCallback": function (oSettings) {
                              $('.paginate_button.page-item').removeClass('disabled');
                              $('#tblSuperannuation_ellipsis').addClass('disabled');
                              if (oSettings._iDisplayLength == -1) {
                                  if (oSettings.fnRecordsDisplay() > 150) {
    
                                  }
                              } else {
    
                              }
                              if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                                  $('.paginate_button.page-item.next').addClass('disabled');
                              }
    
                              $('.paginate_button.next:not(.disabled)', this.api().table().container())
                                  .on('click', function () {
                                      $('.fullScreenSpin').css('display', 'inline-block');
                                      var splashArraySuperannuationListDupp = new Array();
                                      let dataLenght = oSettings._iDisplayLength;
                                      let customerSearch = $('#tblLeave_filter input').val();
    
                                      sideBarService.getSuperannuation(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                        for (let i = 0; i < data.tsuperannuation.length; i++) {
                    
                                            var dataListAllowance = [
                                                data.tsuperannuation[i].fields.ID || '',
                                                data.tsuperannuation[i].fields.Superfund || '',
                                                data.tsuperannuation[i].fields.Supertypeid || '',
                                                data.tsuperannuation[i].fields.Employeeid || '',
                                                'Key Missing',
                                                'Key Missing',
                                                'Key Missing',
                                                data.tsuperannuation[i].fields.Accountno || '',
                                                'Key Missing',
                                                '<td contenteditable="false" class="colDeletesup"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                             ];
                            
                                            splashArraySuperannuationList.push(dataListAllowance);
                                        }
    
                                                  let uniqueChars = [...new Set(splashArraySuperannuationList)];
                                                  var datatable = $('#tblLeave').DataTable();
                                                  datatable.clear();
                                                  datatable.rows.add(uniqueChars);
                                                  datatable.draw(false);
                                                  setTimeout(function () {
                                                    $("#tblSuperannuation").dataTable().fnPageChange('last');
                                                  }, 400);
    
                                                  $('.fullScreenSpin').css('display', 'none');
    
    
                                      }).catch(function (err) {
                                          $('.fullScreenSpin').css('display', 'none');
                                      });
    
                                  });
                              setTimeout(function () {
                                  MakeNegative();
                              }, 100);
                          },
                          "fnInitComplete": function () {
                              $("<button class='btn btn-primary btnAddNewSuperannuation' data-dismiss='modal' data-toggle='modal' data-target='#newSuperannuationFundModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblSuperannuation_filter");
                              $("<button class='btn btn-primary btnRefreshSuperannuation' type='button' id='btnRefreshSuperannuation' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblSuperannuation_filter");
    
                          }
    
                      }).on('page', function () {
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
    
                      }).on('column-reorder', function () {
    
                      }).on('length.dt', function (e, settings, len) {
                        //$('.fullScreenSpin').css('display', 'inline-block');
                        let dataLenght = settings._iDisplayLength;
                        splashArraySuperannuationList = [];
                        if (dataLenght == -1) {
                          $('.fullScreenSpin').css('display', 'none');
    
                        } else {
                            if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                                $('.fullScreenSpin').css('display', 'none');
                            } else {
                                sideBarService.getSuperannuation(dataLenght, 0).then(function (dataNonBo) {
    
                                    addVS1Data('TSuperannuation', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                        templateObject.resetData(dataNonBo);
                                        $('.fullScreenSpin').css('display', 'none');
                                    }).catch(function (err) {
                                        $('.fullScreenSpin').css('display', 'none');
                                    });
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }
                        }
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      });
    
    
                  }, 0);
    
                  $('div.dataTables_filter input').addClass('form-control form-control-sm');
    
                  $('.fullScreenSpin').css('display', 'none');
              }).catch(function (err) {
                $('.fullScreenSpin').css('display', 'none');
              });
            }else{
    
              let data = JSON.parse(dataObject[0].data);
              console.log(data);
              let useData = data;
              let lineItems = [];
              let lineItemObj = {};
              for (let i = 0; i < data.tsuperannuation.length; i++) {
                    
                var dataListAllowance = [
                    data.tsuperannuation[i].fields.ID || '',
                    data.tsuperannuation[i].fields.Superfund || '',
                    data.tsuperannuation[i].fields.Supertypeid || '',
                    data.tsuperannuation[i].fields.Employeeid || '',
                    'Key Missing',
                    'Key Missing',
                    'Key Missing',
                    data.tsuperannuation[i].fields.Accountno || '',
                    'Key Missing',
                    '<td contenteditable="false" class="colDeletesup"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                ];

                splashArraySuperannuationList.push(dataListAllowance);
            }
        
    
    
              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblSuperannuation').DataTable({
    
                      data: splashArraySuperannuationList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                            
                        {
                          className: "colSuperannuationID hiddenColumn",
                          "targets": [0]
                        },
                        {
                           className: "colSuperannuationName",
                           "targets": [1]
                        },  
                        {
                           className: "colSuperannuationType",
                           "targets": [2]
                        },  
                        {
                         className: "colEmployerNum",
                         "targets": [3]
                        },  
                        {
                         className: "colabn",
                         "targets": [4]
                        },  
                        {
                         className: "colservicealias",
                         "targets": [5]
                        },  
                        {
                         className: "colbsb",
                         "targets": [6]
                        },  
                        {
                         className: "colaccountnumber",
                         "targets": [7]
                        },  
                        {
                         className: "colaccountname",
                         "targets": [8]
                        },  
                                            
                        {
                           className: "colDeletesup",
                           "orderable": false,
                           "targets": -1
                        }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblSuperannuation').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblSuperannuation_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {
    
                              }
                          } else {
    
                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }
    
                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArraySuperannuationListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblSuperannuation_filter input').val();
    
                                  sideBarService.getSuperannuation(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                    for (let i = 0; i < data.tsuperannuation.length; i++) {
                    
                                        var dataListAllowance = [
                                            data.tsuperannuation[i].fields.ID || '',
                                            data.tsuperannuation[i].fields.Superfund || '',
                                            data.tsuperannuation[i].fields.Supertypeid || '',
                                            data.tsuperannuation[i].fields.Employeeid || '',
                                            'Key Missing',
                                            'Key Missing',
                                            'Key Missing',
                                            data.tsuperannuation[i].fields.Accountno || '',
                                            'Key Missing',
                                            '<td contenteditable="false" class="colDeletesup"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                        ];
                        
                                        splashArraySuperannuationList.push(dataListAllowance);
                                    }
                                              let uniqueChars = [...new Set(splashArraySuperannuationList)];
                                              var datatable = $('#tblSuperannuation').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblSuperannuation").dataTable().fnPageChange('last');
                                              }, 400);
    
                                              $('.fullScreenSpin').css('display', 'none');
    
    
                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });
    
                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                        $("<button class='btn btn-primary btnAddNewSuperannuation' data-dismiss='modal' data-toggle='modal' data-target='#newSuperannuationFundModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblSuperannuation_filter");
                        $("<button class='btn btn-primary btnRefreshSuperannuation' type='button' id='btnRefreshSuperannuation' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblSuperannuation_filter");
    
                      }
    
                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
    
                  }).on('column-reorder', function () {
    
                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArraySuperannuationList = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');
    
                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getSuperannuation(dataLenght, 0).then(function (dataNonBo) {
    
                                addVS1Data('TSuperannuation', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });
    
    
              }, 0);
    
              $('div.dataTables_filter input').addClass('form-control form-control-sm');
              $('.fullScreenSpin').css('display', 'none');
    
            }
        }).catch(function(err) {
          sideBarService.getSuperannuation(initialBaseDataLoad, 0).then(function (data) {
              addVS1Data('TSuperannuation', JSON.stringify(data));
              let lineItems = [];
              let lineItemObj = {};

            
              
              for (let i = 0; i < data.tsuperannuation.length; i++) {
                    
                var dataListAllowance = [
                    data.tsuperannuation[i].fields.ID || '',
                    data.tsuperannuation[i].fields.Superfund || '',
                    data.tsuperannuation[i].fields.Supertypeid || '',
                    data.tsuperannuation[i].fields.Employeeid || '',
                    'Key Missing',
                    'Key Missing',
                    'Key Missing',
                    data.tsuperannuation[i].fields.Accountno || '',
                    'Key Missing',
                    '<td contenteditable="false" class="colDeletesup"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                ];

                splashArraySuperannuationList.push(dataListAllowance);
              }
      
    
              setTimeout(function () {
                  MakeNegative();
              }, 100);
              setTimeout(function () {
                  $('#tblSuperannuation').DataTable({
    
                      data: splashArraySuperannuationList,
                      "sDom": "<'row'><'row'<'col-sm-12 col-md-6'f><'col-sm-12 col-md-6'l>r>t<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>B",
                      columnDefs: [                              
                            
                        {
                          className: "colSuperannuationID hiddenColumn",
                          "targets": [0]
                        },
                        {
                           className: "colSuperannuationName",
                           "targets": [1]
                        },  
                        {
                           className: "colSuperannuationType",
                           "targets": [2]
                        },  
                        {
                         className: "colEmployerNum",
                         "targets": [3]
                        },  
                        {
                         className: "colabn",
                         "targets": [4]
                        },  
                        {
                         className: "colservicealias",
                         "targets": [5]
                        },  
                        {
                         className: "colbsb",
                         "targets": [6]
                        },  
                        {
                         className: "colaccountnumber",
                         "targets": [7]
                        },  
                        {
                         className: "colaccountname",
                         "targets": [8]
                        },  
                                            
                        {
                           className: "colDeletesup",
                           "orderable": false,
                           "targets": -1
                        }
                      ],
                      select: true,
                      destroy: true,
                      colReorder: true,
                      pageLength: initialDatatableLoad,
                      lengthMenu: [ [initialDatatableLoad, -1], [initialDatatableLoad, "All"] ],
                      info: true,
                      responsive: true,
                      "order": [[0, "asc"]],
                      action: function () {
                          $('#tblSuperannuation').DataTable().ajax.reload();
                      },
                      "fnDrawCallback": function (oSettings) {
                          $('.paginate_button.page-item').removeClass('disabled');
                          $('#tblSuperannuation_ellipsis').addClass('disabled');
                          if (oSettings._iDisplayLength == -1) {
                              if (oSettings.fnRecordsDisplay() > 150) {
    
                              }
                          } else {
    
                          }
                          if (oSettings.fnRecordsDisplay() < initialDatatableLoad) {
                              $('.paginate_button.page-item.next').addClass('disabled');
                          }
    
                          $('.paginate_button.next:not(.disabled)', this.api().table().container())
                              .on('click', function () {
                                  $('.fullScreenSpin').css('display', 'inline-block');
                                  var splashArraySuperannuationListDupp = new Array();
                                  let dataLenght = oSettings._iDisplayLength;
                                  let customerSearch = $('#tblSuperannuation_filter input').val();
    
                                  sideBarService.getSuperannuation(initialDatatableLoad, oSettings.fnRecordsDisplay()).then(function (data) {
    
                                    for (let i = 0; i < data.tsuperannuation.length; i++) {
                    
                                        var dataListAllowance = [
                                            data.tsuperannuation[i].fields.ID || '',
                                            data.tsuperannuation[i].fields.Superfund || '',
                                            data.tsuperannuation[i].fields.Supertypeid || '',
                                            data.tsuperannuation[i].fields.Employeeid || '',
                                            'Key Missing',
                                            'Key Missing',
                                            'Key Missing',
                                            data.tsuperannuation[i].fields.Accountno || '',
                                            'Key Missing',
                                            '<td contenteditable="false" class="colDeletesup"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                                        ];
                        
                                        splashArraySuperannuationList.push(dataListAllowance);
                                      }
    
                                         let uniqueChars = [...new Set(splashArraySuperannuationList)];
                                         var datatable = $('#tblSuperannuation').DataTable();
                                              datatable.clear();
                                              datatable.rows.add(uniqueChars);
                                              datatable.draw(false);
                                              setTimeout(function () {
                                                $("#tblSuperannuation").dataTable().fnPageChange('last');
                                              }, 400);
    
                                              $('.fullScreenSpin').css('display', 'none');
    
    
                                  }).catch(function (err) {
                                      $('.fullScreenSpin').css('display', 'none');
                                  });
    
                              });
                          setTimeout(function () {
                              MakeNegative();
                          }, 100);
                      },
                      "fnInitComplete": function () {
                        $("<button class='btn btn-primary btnAddNewSuperannuation' data-dismiss='modal' data-toggle='modal' data-target='#newSuperannuationFundModal' type='button' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-plus'></i></button>").insertAfter("#tblSuperannuation_filter");
                        $("<button class='btn btn-primary btnRefreshSuperannuation' type='button' id='btnRefreshSuperannuation' style='padding: 4px 10px; font-size: 14px; margin-left: 8px !important;'><i class='fas fa-search-plus' style='margin-right: 5px'></i>Search</button>").insertAfter("#tblSuperannuation_filter");
    
                      }
    
                  }).on('page', function () {
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
    
                  }).on('column-reorder', function () {
    
                  }).on('length.dt', function (e, settings, len) {
                    //$('.fullScreenSpin').css('display', 'inline-block');
                    let dataLenght = settings._iDisplayLength;
                    splashArraySuperannuationList = [];
                    if (dataLenght == -1) {
                      $('.fullScreenSpin').css('display', 'none');
    
                    } else {
                        if (settings.fnRecordsDisplay() >= settings._iDisplayLength) {
                            $('.fullScreenSpin').css('display', 'none');
                        } else {
                            sideBarService.getSuperannuation(dataLenght, 0).then(function (dataNonBo) {
    
                                addVS1Data('TSuperannuation', JSON.stringify(dataNonBo)).then(function (datareturn) {
                                    templateObject.resetData(dataNonBo);
                                    $('.fullScreenSpin').css('display', 'none');
                                }).catch(function (err) {
                                    $('.fullScreenSpin').css('display', 'none');
                                });
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display', 'none');
                            });
                        }
                    }
                      setTimeout(function () {
                          MakeNegative();
                      }, 100);
                  });
    
    
              }, 0);
    
              $('div.dataTables_filter input').addClass('form-control form-control-sm');
    
              $('.fullScreenSpin').css('display', 'none');
          }).catch(function (err) {
            $('.fullScreenSpin').css('display', 'none');
          });
        });

    };

    templateObject.getSuperannuationData();
   
    function getPayrollOrgainzation()
    {
        $('.fullScreenSpin').css('display', 'inline-block');
        sideBarService.getPayrollinformation().then((dataListRet) => {
            $('.fullScreenSpin').css('display', 'inline-block');
            for (let event in dataListRet) {
                let dataCopy = dataListRet[event];
                for (let data in dataCopy) {
                    let mainData = dataCopy[data];
                    
                     $('#editbankaccount').val(mainData.fields.PayrollBankAccount);
                     $('#editpaygbankaccount').val(mainData.fields.PayrollPaygLiabilityAccount);
                     $('#editwagesexpbankaccount').val(mainData.fields.PayrollWagesExpenseAccount);
                     $('#editwagespaybankaccount').val(mainData.fields.PayrollWagesPayableAccount);
                     $('#editsuperliabbankaccount').val(mainData.fields.PayrollSuperannuationLiabilityAccount);
                     $('#editsuperexpbankaccount').val(mainData.fields.PayrollSuperannuationPayableAccount);
                     $('#employegroup').val(mainData.fields.PayrollEmployeeGroup);
                     $('#timesheetcat').val(mainData.fields.PayrollTimesheetCategories);
                     $('#payrollsettingor').val(mainData.fields.ID);
                     
                     if(mainData.fields.PayrollShowAnnualSalary == true)
                     {
                         $('#swtShowAnnualSalary').attr("checked","checked");
                     }
                     else{
                        $('#swtShowAnnualSalary').removeAttr('checked');
                     }

                     if(mainData.fields.PayrollShowEmploymentBasis == true)
                     {
                         $('#swtShowEmploymentBasis').attr("checked","checked");
                     }
                     else{
                        $('#swtShowEmploymentBasis').removeAttr('checked');
                     }
                
        
                }
                
            }
           
        }).catch(function (err) {
            $('.fullScreenSpin').css('display','none');
          });

          let imageData= (localStorage.getItem("Image"));
          if(imageData)
          {
              $('#uploadedImage').attr('src', imageData);
             $('#uploadedImage').attr('width','100%');
             $('#uploadedImage').attr('height','100%');
              $('#removeLogo').show();
              $('#changeLogo').show();
          }
         
    }
    getPayrollOrgainzation();

    $('#tblAlowances tbody').on( 'click', 'td:not(.colDeleteAllowances)', function () {
     
      var listData = $(this).closest('tr').find('.colAlowancesID').text();
      if(listData){
      let allowanceType = $(this).closest('tr').find('.colAllowancesType').text()||'';
      let earningName = $(this).closest('tr').find('.colAllowancesNames').text()||'';
      let earningDisplayName = $(this).closest('tr').find('.colAllowancesDisplayName').text()||'';
      let earningAmount = $(this).closest('tr').find('.colAllowancesAmount').text()||'0.00';
      let earningExpenseAccount = $(this).closest('tr').find('.colAllowancesAccounts').text()||'';
      let earningExpenseAccountID = $(this).closest('tr').find('.colAllowancesAccountsID').text()||'';
      let exemptPAYG = $(this).closest('tr').find('.colAllowancesPAYG').text()||'false';
      let exemptSupernation = $(this).closest('tr').find('.colAllowancesSuperannuation').text()||'false';
      let exemptActivityStatement = $(this).closest('tr').find('.colAllowancesReportableasW1').text()||'false';

      $('#edtAllowanceID').val(listData);
      $('#edtAllowanceType').val(allowanceType);
      $('#edtEarningsNameAllowance').val(earningName);
      $('#edtDisplayNameAllowance').val(earningDisplayName);
      $('#edtAllowanceAmount').val(earningAmount);
      $('#edtExpenseAccountAllowance').val(earningExpenseAccount);

      $('#editbankaccount').val(earningExpenseAccount);
      $('#edtReimbursementAccount').val(earningExpenseAccount);
      $('#editpaygbankaccount').val(earningExpenseAccount);
      $('#editwagesexpbankaccount').val(earningExpenseAccount);
      $('#editwagespaybankaccount').val(earningExpenseAccount);
      $('#editsuperliabbankaccount').val(earningExpenseAccount);
      $('#editsuperexpbankaccount').val(earningExpenseAccount); 

      $('#edtExpenseAccountDirectorsFees').val(earningExpenseAccount);
      $('#edtExpenseAccountTermnination').val(earningExpenseAccount);
      $('#edtExpenseAccount').val(earningExpenseAccount);
      $('#edtExpenseAccountOvertime').val(earningExpenseAccount);
      $('#edtExpenseAccountLumpSumE').val(earningExpenseAccount);
      $('#edtExpenseAccountBonusesCommissions').val(earningExpenseAccount);
      $('#edtExpenseAccountLumpSumW').val(earningExpenseAccount);
      $('#edtExpenseAccountID').val(earningExpenseAccountID);

      if(exemptPAYG == 'true'){
          $('#formCheck-ExemptPAYGAllowance').prop('checked', true);
      }else{
        $('#formCheck-ExemptPAYGAllowance').prop('checked', false);
      }

      if(exemptSupernation == 'true'){
          $('#formCheck-ExemptSuperannuationAllowance').prop('checked', true);
      }else{
        $('#formCheck-ExemptSuperannuationAllowance').prop('checked', false);
      }

      if(exemptActivityStatement == 'true'){
          $('#formCheck-ExemptReportableAllowance').prop('checked', true);
      }else{
        $('#formCheck-ExemptReportableAllowance').prop('checked', false);
      }

      $('#allowanceModal').modal('toggle');

    }
    });

    $('#tblDeductions tbody').on( 'click', 'td:not(.colDeleteDeductions)', function () {
    var listData = $(this).closest('tr').find('.colDeductionsID').text();
    if(listData){
      let deductionType = $(this).closest('tr').find('.colDeductionsType').text()||'';
      let deductionName = $(this).closest('tr').find('.colDeductionsNames').text()||'';
      let deductionDisplayName = $(this).closest('tr').find('.colDeductionsDisplayName').text()||'';
      let deductionAmount = $(this).closest('tr').find('.colDeductionsAmount').text()||'0.00';
      let deductionAccount = $(this).closest('tr').find('.colDeductionsAccounts').text()||'';
      let deductionAccountID = $(this).closest('tr').find('.colDeductionsAccountsID').text()||'';
      let deductionexemptPAYG = $(this).closest('tr').find('.colDeductionsPAYG').text()||'false';
      let deductionexemptSupernation = $(this).closest('tr').find('.colDeductionsSuperannuation').text()||'false';
      let deductionexemptActivityStatement = $(this).closest('tr').find('.colDeductionsReportableasW1').text()||'false';

      $('#edtDeductionID').val(listData);
      //$('#edtAllowanceType').val(allowanceType);
      $('#edtDeductionName').val(deductionName);
      //$('#edtDisplayNameAllowance').val(earningDisplayName);
      $('#edtDeductionAmount').val(deductionAmount);
      $('#edtDeductionAccount').val(deductionAccount);
      $('#edtDeductionAccountID').val(deductionAccountID);
        if(deductionType == 'None'){
            $('#noneLabel').html('None');
            $('#edtDeductionTitle').val('None');
        }
        if(deductionType == 'Workplace Giving'){
          $('#noneLabel').html('Workplace Giving');
          $('#edtDeductionTitle').val('WorkplaceGiving');
        }
        if(deductionType == 'Union / Association Fees'){
          $('#noneLabel').html('Union / Association Fees');
          $('#edtDeductionTitle').val('UnionAssociationFees');
        }

        $('#deductionModal').modal('toggle');

    }

    });


    $(document).on('click', '.colDeleteAllowances', function() {
        event.stopPropagation();
        var targetID = $(event.target).closest('tr').find('.colAlowancesID').text()||0; // table row ID
        $('#selectDeleteLineID').val(targetID);
        $('#deleteAllowanceLineModal').modal('toggle');
    });
   
    

    $(document).on('click', '.colDeleteCalenders', function(event) {
        event.stopPropagation();
        let targetID = $(event.target).closest('tr').find('.colCalenderID').text()||0; // table row ID
      
        let calenderName = $(this).closest('tr').find('.colPayCalendarName').text()||'';
    
        $('#selectColDeleteLineID').val(targetID);
        $('#selectCalenderName').val(targetID);
        $('#deleteCalenderLineModal').modal('toggle');
    });

    $(document).on('click', '.colDeleteDeductions', function() {
        event.stopPropagation();
        var listData = $(this).closest('tr').find('.colDeductionsID').text();
        var targetID = $(event.target).closest('tr').find('.colDeleteDeductions').text()||0; // table row ID
        var listData = $(this).closest('tr').find('.colDeductionsID').text();
        let deductionType = $(this).closest('tr').find('.colDeductionsType').text()||'';
        let deductionName = $(this).closest('tr').find('.colDeductionsNames').text()||'';
        let deductionDisplayName = $(this).closest('tr').find('.colDeductionsDisplayName').text()||'';
        let deductionAmount = $(this).closest('tr').find('.colDeductionsAmount').text()||'0.00';
        let deductionAccount = $(this).closest('tr').find('.colDeductionsAccounts').text()||'';
        let deductionAccountID = $(this).closest('tr').find('.colDeductionsAccountsID').text()||'';
        let deductionexemptPAYG = $(this).closest('tr').find('.colDeductionsPAYG').text()||'false';
        let deductionexemptSupernation = $(this).closest('tr').find('.colDeductionsSuperannuation').text()||'false';
        let deductionexemptActivityStatement = $(this).closest('tr').find('.colDeductionsReportableasW1').text()||'false';
        
    
        $('#selectDeleteLineID').val(listData);     
        $('#selectAccountid').val(deductionAccountID);
        $('#selectAccountname').val(deductionAccount);  
        $('#selectdeductionAmount').val(deductionAmount);
        $('#selectideductionName').val(deductionName);
        $('#selectdisplayName').val(deductionDisplayName);
        $('#deleteDeductionLineModal').modal('toggle');
    });

    $(document).on('click', '.colDeleterei', function() {
        event.stopPropagation();
    
        var targetID = $(event.target).closest('tr').find('.colReimbursementID').text()||0; // table row ID
       
        $('#seleclReiName').val(targetID);     
        $('#selectColReiDeleteLineID').val(targetID); 
      
        $('#deletebReiumbursementLineModal').modal('toggle');
    });

    $(document).on('click', '.colDeletepaidrem', function() {
        event.stopPropagation();
    
        var targetID = $(event.target).closest('tr').find('.colLeaveID').text()||0; // table row ID
        var Type = $(event.target).closest('tr').find('.colLeavePaidLeave').text() || '';
       
        $('#selectLeaveName').val(targetID);     
        $('#selectLeaveDeleteLineID').val(targetID); 
     
        if(Type == 'paid')
        {
             $('#leave_type').val('paid'); 
        }
        else{
            $('#leave_type').val('unpaid'); 
        }
        $('#deleteLeaveLineModal').modal('toggle');
    });

    $(document).on('click', '.colDeletesup', function() {
        event.stopPropagation();
    
        var targetID = $(event.target).closest('tr').find('.colSuperannuationID').text()||0; // table row ID
        var Name = $(event.target).closest('tr').find('.colSuperannuationName').text()||0;
       
        $('#selectSuperannuationDeleteLineID').val(targetID);     
        $('#selectSuperannuationName').val(targetID);  
   
        $('#deleteSuperannuationLineModal').modal('toggle');
    });


    
    $(document).on('click', '.colHolidayDelete', function() {
        event.stopPropagation();
    
        var targetID = $(event.target).closest('tr').find('.colHolidayID').text()||0; // table row ID
        var Name = $(event.target).closest('tr').find('.colPayCalendarName').text()||0;
       
        $('#selectholidayDeleteLineID').val(targetID);     
        $('#selectholidayName').val(targetID);  
   
        $('#deleteHolidayLineModal').modal('toggle');
        
    });

    $(document).on('click', '.colDeleteEarnings', function() {

        event.stopPropagation();
    
        var targetID = $(event.target).closest('tr').find('.colEarningsID').text()||0; // table row ID
        var Name = $(event.target).closest('tr').find('.colEarningsNames').text()||0;
        var type = $(event.target).closest('tr').find('.colEarningsType').text()|| '';
        let earningtype = '';

        if(type === 'Ordinary Time Earning')
        {
            earningtype = 'Ordinary Time Earning';
        }
        else if(type === 'OverTime Earning')
        {
            earningtype = 'OverTime Earning';
        }
        else if(type === 'Employee Termnination')
        {
            earningtype = 'Employee Termnination';
        }
        else if(type === 'Lump Sum E Earning')
        {
            earningtype = 'Lump Sum E Earning';
        }
        else if(type === 'Bonuese Commission')
        {
            earningtype = 'Bonuese Commission';
        }
        else if(type === 'Lump Sumw')
        {
            earningtype = 'Lump Sumw';
        }
        else
        {
            earningtype = 'Directors fees';
        }

       
        $('#selectDeleteLineID').val(targetID);     
        $('#earningdeletename').val(targetID);  
        $('#earningdeletetype').val(earningtype);    
        $('#deleteEarningsLineModal').modal('toggle');

    });

    $(document).ready(function() {
    
      $('#edtAllowanceType').editableSelect();
      $('#edtAllowanceType').editableSelect('add','Car');
      $('#edtAllowanceType').editableSelect('add','JobKeeper');
      $('#edtAllowanceType').editableSelect('add','Laundry');
      $('#edtAllowanceType').editableSelect('add','Meals');
      $('#edtAllowanceType').editableSelect('add','Qualifications');
      $('#edtAllowanceType').editableSelect('add','Tasks');
      $('#edtAllowanceType').editableSelect('add','Tools');
      $('#edtAllowanceType').editableSelect('add','Transport');
      $('#edtAllowanceType').editableSelect('add','Travel');
      $('#edtAllowanceType').editableSelect('add','Other');

      $('#employegroup').editableSelect('add','None');
      $('#employegroup').editableSelect('add','Region');
      $('#timesheetcat').editableSelect('add','None');
      $('#timesheetcat').editableSelect('add','Region');

      $('#payperiod').editableSelect('add','Weekly');
      $('#payperiod').editableSelect('add','Fortnightly');
      $('#payperiod').editableSelect('add','Twice Monthly');
      $('#payperiod').editableSelect('add','Four Weekly');
      $('#payperiod').editableSelect('add','Monthly');
      $('#payperiod').editableSelect('add','Quarterly');
      $('#edtTypeOfUnits').editableSelect('add','Hours');
      $('#edtTypeOfUnits').editableSelect('add','Days');
      $('#edtTypeOfUnits').editableSelect('add','Weeks');
      $('#edtTypeOfUnits').editableSelect('add','Monthly');
      $('#edtUnpaidTypeOfUnits').editableSelect('add','Hours');
      $('#edtUnpaidTypeOfUnits').editableSelect('add','Days');
      $('#edtUnpaidTypeOfUnits').editableSelect('add','Weeks');
      $('#edtUnpaidTypeOfUnits').editableSelect('add','Monthly');
      $('#edtExpenseAccountAllowance').editableSelect();
      $('#editbankaccount').editableSelect();
      $('#editpaygbankaccount').editableSelect();
      $('#edtReimbursementAccount').editableSelect();
      $('#editwagesexpbankaccount').editableSelect();
      $('#editwagespaybankaccount').editableSelect();
      $('#editsuperliabbankaccount').editableSelect();
      $('#editsuperexpbankaccount').editableSelect();
      $('#edtExpenseAccountDirectorsFees').editableSelect();
      $('#edtExpenseAccountTermnination').editableSelect();
      $('#edtExpenseAccount').editableSelect();
      $('#edtExpenseAccountOvertime').editableSelect();
      $('#edtExpenseAccountLumpSumE').editableSelect();
      $('#edtExpenseAccountBonusesCommissions').editableSelect();
      $('#edtExpenseAccountLumpSumW').editableSelect();
      $('#edtDeductionAccount').editableSelect();
      $('#edtRateTypeOvertime').editableSelect();
      $('#edtRateType').editableSelect();
      $('#edtRateTypeTermnination').editableSelect();
      $('#edtRateTypeLumpSumE').editableSelect();
      $('#edtRateTypeBonusesCommissions').editableSelect();
      $('#edtRateTypeDirectorsFees').editableSelect();
      $('#edtRateTypeLumpSumW').editableSelect();
      $('#edtFundType').editableSelect();

    });

     $('#editbankaccount').editableSelect().on('click.editable-select', function (e, li) {
        var $earch = $(this);
        var offset = $earch.offset();
        let accountService = new AccountService();
        const accountTypeList = [];
        var accountDataName = e.target.value ||'';
  
        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectLineID').val('editbankaccount');
          $('#accountListModal').modal();
          setTimeout(function () {
              $('#tblAccount_filter .form-control-sm').focus();
              $('#tblAccount_filter .form-control-sm').val('BANK');
              $('#tblAccount_filter .form-control-sm').trigger("input");
              var datatable = $('#tblAccountlist').DataTable();
              datatable.draw();
              $('#tblAccountlist_filter .form-control-sm').trigger("input");
          }, 500);
         }else{
           if(accountDataName.replace(/\s/g, '') != ''){
             getVS1Data('TAccountVS1').then(function (dataObject) {
                 if (dataObject.length == 0) {
                   accountService.getOneAccountByName(accountDataName).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     if (accountTypeList) {
                         for (var h = 0; h < accountTypeList.length; h++) {
  
                             if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                 fullAccountTypeName = accountTypeList[h].description || '';
  
                             }
                         }
  
                     }
  
                      var accountid = data.taccountvs1[0].fields.ID || '';
                      var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                      var accountname = data.taccountvs1[0].fields.AccountName || '';
                      var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                      var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                      var accountdesc = data.taccountvs1[0].fields.Description || '';
                      var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                      var bankbsb = data.taccountvs1[0].fields.BSB || '';
                      var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                      var swiftCode = data.taccountvs1[0].fields.Extra || '';
                      var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                      var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                      var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                     var cardcvc = data.taccountvs1[0].fields.CVC || '';
                     var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                      if ((accounttype === "BANK")) {
                          $('.isBankAccount').removeClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }else if ((accounttype === "CCARD")) {
                          $('.isCreditAccount').removeClass('isNotCreditAccount');
                          $('.isBankAccount').addClass('isNotBankAccount');
                      } else {
                          $('.isBankAccount').addClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }
  
                      $('#edtAccountID').val(accountid);
                      $('#sltAccountType').val(accounttype);
                      $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                      $('#edtAccountName').val(accountname);
                      $('#edtAccountNo').val(accountno);
                      $('#sltTaxCode').val(taxcode);
                      $('#txaAccountDescription').val(accountdesc);
                      $('#edtBankAccountName').val(bankaccountname);
                      $('#edtBSB').val(bankbsb);
                      $('#edtBankAccountNo').val(bankacountno);
                      $('#swiftCode').val(swiftCode);
                      $('#routingNo').val(routingNo);
                      $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                      $('#edtCardNumber').val(cardnumber);
                      $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                      $('#edtCvc').val(cardcvc);
  
                      if(showTrans == 'true'){
                          $('.showOnTransactions').prop('checked', true);
                      }else{
                        $('.showOnTransactions').prop('checked', false);
                      }
  
                      setTimeout(function () {
                          $('#addNewAccount').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.taccountvs1;
                       var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     for (let a = 0; a < data.taccountvs1.length; a++) {
  
                       if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                         added = true;
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
  
  
                  var accountid = data.taccountvs1[a].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                  var accountname = data.taccountvs1[a].fields.AccountName || '';
                  var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[a].fields.Description || '';
                  var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[a].fields.BSB || '';
                  var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[a].fields.Extra || '';
                  var routingNo = data.taccountvs1[a].BankCode || '';
  
                  var showTrans = data.taccountvs1[a].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                  var cardcvc = data.taccountvs1[a].fields.CVC || '';
                  var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
                       }
                     }
                     if(!added) {
                       accountService.getOneAccountByName(accountDataName).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                         let accBalance = '';
                         $('#add-account-title').text('Edit Account Details');
                         $('#edtAccountName').attr('readonly', true);
                         $('#sltAccountType').attr('readonly', true);
                         $('#sltAccountType').attr('disabled', 'disabled');
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
                          var accountid = data.taccountvs1[0].fields.ID || '';
                          var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                          var accountname = data.taccountvs1[0].fields.AccountName || '';
                          var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                          var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                          var accountdesc = data.taccountvs1[0].fields.Description || '';
                          var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                          var bankbsb = data.taccountvs1[0].fields.BSB || '';
                          var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                          var swiftCode = data.taccountvs1[0].fields.Extra || '';
                          var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                          var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                          var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                         var cardcvc = data.taccountvs1[0].fields.CVC || '';
                         var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                          if ((accounttype === "BANK")) {
                              $('.isBankAccount').removeClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }else if ((accounttype === "CCARD")) {
                              $('.isCreditAccount').removeClass('isNotCreditAccount');
                              $('.isBankAccount').addClass('isNotBankAccount');
                          } else {
                              $('.isBankAccount').addClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }
  
                          $('#edtAccountID').val(accountid);
                          $('#sltAccountType').val(accounttype);
                          $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                          $('#edtAccountName').val(accountname);
                          $('#edtAccountNo').val(accountno);
                          $('#sltTaxCode').val(taxcode);
                          $('#txaAccountDescription').val(accountdesc);
                          $('#edtBankAccountName').val(bankaccountname);
                          $('#edtBSB').val(bankbsb);
                          $('#edtBankAccountNo').val(bankacountno);
                          $('#swiftCode').val(swiftCode);
                          $('#routingNo').val(routingNo);
                          $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                          $('#edtCardNumber').val(cardnumber);
                          $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                          $('#edtCvc').val(cardcvc);
  
                          if(showTrans == 'true'){
                              $('.showOnTransactions').prop('checked', true);
                          }else{
                            $('.showOnTransactions').prop('checked', false);
                          }
  
                          setTimeout(function () {
                              $('#addNewAccount').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
               accountService.getOneAccountByName(accountDataName).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
                 let accBalance = '';
                 $('#add-account-title').text('Edit Account Details');
                 $('#edtAccountName').attr('readonly', true);
                 $('#sltAccountType').attr('readonly', true);
                 $('#sltAccountType').attr('disabled', 'disabled');
                 if (accountTypeList) {
                     for (var h = 0; h < accountTypeList.length; h++) {
  
                         if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                             fullAccountTypeName = accountTypeList[h].description || '';
  
                         }
                     }
  
                 }
  
                  var accountid = data.taccountvs1[0].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                  var accountname = data.taccountvs1[0].fields.AccountName || '';
                  var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[0].fields.Description || '';
                  var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[0].fields.BSB || '';
                  var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[0].fields.Extra || '';
                  var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                  var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                 var cardcvc = data.taccountvs1[0].fields.CVC || '';
                 var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
             });
             $('#addAccountModal').modal('toggle');
           }else{
             $('#selectLineID').val('editbankaccount');
             $('#accountListModal').modal();
             setTimeout(function () {
               $('#tblAccount_filter .form-control-sm').focus();
               $('#tblAccount_filter .form-control-sm').val('BANK');
               $('#tblAccount_filter .form-control-sm').trigger("input");
                 var datatable = $('#tblSupplierlist').DataTable();
                 datatable.draw();
                 $('#tblAccount_filter .form-control-sm').trigger("input");
             }, 500);
           }
         }
  
  
      });
    
     $('#editpaygbankaccount').editableSelect().on('click.editable-select', function (e, li) {
        var $earch = $(this);
        var offset = $earch.offset();
        let accountService = new AccountService();
        const accountTypeList = [];
        var accountDataName = e.target.value ||'';
  
        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectLineID').val('editpaygbankaccount');
          $('#accountListModal').modal();
          setTimeout(function () {
              $('#tblAccount_filter .form-control-sm').focus();
              $('#tblAccount_filter .form-control-sm').val('LTLIAB');
              $('#tblAccount_filter .form-control-sm').trigger("input");
              var datatable = $('#tblAccountlist').DataTable();
              datatable.draw();
              $('#tblAccountlist_filter .form-control-sm').trigger("input");
          }, 500);
         }else{
           if(accountDataName.replace(/\s/g, '') != ''){
             getVS1Data('TAccountVS1').then(function (dataObject) {
                 if (dataObject.length == 0) {
                   accountService.getOneAccountByName(accountDataName).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     if (accountTypeList) {
                         for (var h = 0; h < accountTypeList.length; h++) {
  
                             if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                 fullAccountTypeName = accountTypeList[h].description || '';
  
                             }
                         }
  
                     }
  
                      var accountid = data.taccountvs1[0].fields.ID || '';
                      var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                      var accountname = data.taccountvs1[0].fields.AccountName || '';
                      var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                      var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                      var accountdesc = data.taccountvs1[0].fields.Description || '';
                      var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                      var bankbsb = data.taccountvs1[0].fields.BSB || '';
                      var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                      var swiftCode = data.taccountvs1[0].fields.Extra || '';
                      var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                      var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                      var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                     var cardcvc = data.taccountvs1[0].fields.CVC || '';
                     var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                      if ((accounttype === "BANK")) {
                          $('.isBankAccount').removeClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }else if ((accounttype === "CCARD")) {
                          $('.isCreditAccount').removeClass('isNotCreditAccount');
                          $('.isBankAccount').addClass('isNotBankAccount');
                      } else {
                          $('.isBankAccount').addClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }
  
                      $('#edtAccountID').val(accountid);
                      $('#sltAccountType').val(accounttype);
                      $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                      $('#edtAccountName').val(accountname);
                      $('#edtAccountNo').val(accountno);
                      $('#sltTaxCode').val(taxcode);
                      $('#txaAccountDescription').val(accountdesc);
                      $('#edtBankAccountName').val(bankaccountname);
                      $('#edtBSB').val(bankbsb);
                      $('#edtBankAccountNo').val(bankacountno);
                      $('#swiftCode').val(swiftCode);
                      $('#routingNo').val(routingNo);
                      $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                      $('#edtCardNumber').val(cardnumber);
                      $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                      $('#edtCvc').val(cardcvc);
  
                      if(showTrans == 'true'){
                          $('.showOnTransactions').prop('checked', true);
                      }else{
                        $('.showOnTransactions').prop('checked', false);
                      }
  
                      setTimeout(function () {
                          $('#addNewAccount').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.taccountvs1;
                       var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     for (let a = 0; a < data.taccountvs1.length; a++) {
  
                       if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                         added = true;
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
  
  
                  var accountid = data.taccountvs1[a].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                  var accountname = data.taccountvs1[a].fields.AccountName || '';
                  var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[a].fields.Description || '';
                  var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[a].fields.BSB || '';
                  var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[a].fields.Extra || '';
                  var routingNo = data.taccountvs1[a].BankCode || '';
  
                  var showTrans = data.taccountvs1[a].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                  var cardcvc = data.taccountvs1[a].fields.CVC || '';
                  var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
                       }
                     }
                     if(!added) {
                       accountService.getOneAccountByName(accountDataName).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                         let accBalance = '';
                         $('#add-account-title').text('Edit Account Details');
                         $('#edtAccountName').attr('readonly', true);
                         $('#sltAccountType').attr('readonly', true);
                         $('#sltAccountType').attr('disabled', 'disabled');
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
                          var accountid = data.taccountvs1[0].fields.ID || '';
                          var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                          var accountname = data.taccountvs1[0].fields.AccountName || '';
                          var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                          var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                          var accountdesc = data.taccountvs1[0].fields.Description || '';
                          var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                          var bankbsb = data.taccountvs1[0].fields.BSB || '';
                          var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                          var swiftCode = data.taccountvs1[0].fields.Extra || '';
                          var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                          var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                          var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                         var cardcvc = data.taccountvs1[0].fields.CVC || '';
                         var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                          if ((accounttype === "BANK")) {
                              $('.isBankAccount').removeClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }else if ((accounttype === "CCARD")) {
                              $('.isCreditAccount').removeClass('isNotCreditAccount');
                              $('.isBankAccount').addClass('isNotBankAccount');
                          } else {
                              $('.isBankAccount').addClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }
  
                          $('#edtAccountID').val(accountid);
                          $('#sltAccountType').val(accounttype);
                          $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                          $('#edtAccountName').val(accountname);
                          $('#edtAccountNo').val(accountno);
                          $('#sltTaxCode').val(taxcode);
                          $('#txaAccountDescription').val(accountdesc);
                          $('#edtBankAccountName').val(bankaccountname);
                          $('#edtBSB').val(bankbsb);
                          $('#edtBankAccountNo').val(bankacountno);
                          $('#swiftCode').val(swiftCode);
                          $('#routingNo').val(routingNo);
                          $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                          $('#edtCardNumber').val(cardnumber);
                          $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                          $('#edtCvc').val(cardcvc);
  
                          if(showTrans == 'true'){
                              $('.showOnTransactions').prop('checked', true);
                          }else{
                            $('.showOnTransactions').prop('checked', false);
                          }
  
                          setTimeout(function () {
                              $('#addNewAccount').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
               accountService.getOneAccountByName(accountDataName).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
                 let accBalance = '';
                 $('#add-account-title').text('Edit Account Details');
                 $('#edtAccountName').attr('readonly', true);
                 $('#sltAccountType').attr('readonly', true);
                 $('#sltAccountType').attr('disabled', 'disabled');
                 if (accountTypeList) {
                     for (var h = 0; h < accountTypeList.length; h++) {
  
                         if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                             fullAccountTypeName = accountTypeList[h].description || '';
  
                         }
                     }
  
                 }
  
                  var accountid = data.taccountvs1[0].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                  var accountname = data.taccountvs1[0].fields.AccountName || '';
                  var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[0].fields.Description || '';
                  var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[0].fields.BSB || '';
                  var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[0].fields.Extra || '';
                  var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                  var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                 var cardcvc = data.taccountvs1[0].fields.CVC || '';
                 var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
             });
             $('#addAccountModal').modal('toggle');
           }else{
             $('#selectLineID').val('editpaygbankaccount');
             $('#accountListModal').modal();
             setTimeout(function () {
               $('#tblAccount_filter .form-control-sm').focus();
               $('#tblAccount_filter .form-control-sm').val('LTLIAB');
               $('#tblAccount_filter .form-control-sm').trigger("input");
                 var datatable = $('#tblSupplierlist').DataTable();
                 datatable.draw();
                 $('#tblAccount_filter .form-control-sm').trigger("input");
             }, 500);
           }
         }
  
  
      });

    $('#edtReimbursementAccount').editableSelect().on('click.editable-select', function (e, li) {
        var $earch = $(this);
        var offset = $earch.offset();
        let accountService = new AccountService();
        const accountTypeList = [];
        var accountDataName = e.target.value ||'';
  
        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectLineID').val('edtReimbursementAccount');
          $('#accountListModal').modal();
          setTimeout(function () {
              $('#tblAccount_filter .form-control-sm').focus();
              $('#tblAccount_filter .form-control-sm').val('LTLIAB');
              $('#tblAccount_filter .form-control-sm').trigger("input");
              var datatable = $('#tblAccountlist').DataTable();
              datatable.draw();
              $('#tblAccountlist_filter .form-control-sm').trigger("input");
          }, 500);
         }else{
           if(accountDataName.replace(/\s/g, '') != ''){
             getVS1Data('TAccountVS1').then(function (dataObject) {
                 if (dataObject.length == 0) {
                   accountService.getOneAccountByName(accountDataName).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     if (accountTypeList) {
                         for (var h = 0; h < accountTypeList.length; h++) {
  
                             if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                 fullAccountTypeName = accountTypeList[h].description || '';
  
                             }
                         }
  
                     }
  
                      var accountid = data.taccountvs1[0].fields.ID || '';
                      var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                      var accountname = data.taccountvs1[0].fields.AccountName || '';
                      var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                      var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                      var accountdesc = data.taccountvs1[0].fields.Description || '';
                      var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                      var bankbsb = data.taccountvs1[0].fields.BSB || '';
                      var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                      var swiftCode = data.taccountvs1[0].fields.Extra || '';
                      var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                      var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                      var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                     var cardcvc = data.taccountvs1[0].fields.CVC || '';
                     var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                      if ((accounttype === "BANK")) {
                          $('.isBankAccount').removeClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }else if ((accounttype === "CCARD")) {
                          $('.isCreditAccount').removeClass('isNotCreditAccount');
                          $('.isBankAccount').addClass('isNotBankAccount');
                      } else {
                          $('.isBankAccount').addClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }
  
                      $('#edtAccountID').val(accountid);
                      $('#sltAccountType').val(accounttype);
                      $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                      $('#edtAccountName').val(accountname);
                      $('#edtAccountNo').val(accountno);
                      $('#sltTaxCode').val(taxcode);
                      $('#txaAccountDescription').val(accountdesc);
                      $('#edtBankAccountName').val(bankaccountname);
                      $('#edtBSB').val(bankbsb);
                      $('#edtBankAccountNo').val(bankacountno);
                      $('#swiftCode').val(swiftCode);
                      $('#routingNo').val(routingNo);
                      $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                      $('#edtCardNumber').val(cardnumber);
                      $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                      $('#edtCvc').val(cardcvc);
  
                      if(showTrans == 'true'){
                          $('.showOnTransactions').prop('checked', true);
                      }else{
                        $('.showOnTransactions').prop('checked', false);
                      }
  
                      setTimeout(function () {
                          $('#addNewAccount').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.taccountvs1;
                       var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     for (let a = 0; a < data.taccountvs1.length; a++) {
  
                       if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                         added = true;
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
  
  
                  var accountid = data.taccountvs1[a].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                  var accountname = data.taccountvs1[a].fields.AccountName || '';
                  var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[a].fields.Description || '';
                  var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[a].fields.BSB || '';
                  var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[a].fields.Extra || '';
                  var routingNo = data.taccountvs1[a].BankCode || '';
  
                  var showTrans = data.taccountvs1[a].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                  var cardcvc = data.taccountvs1[a].fields.CVC || '';
                  var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
                       }
                     }
                     if(!added) {
                       accountService.getOneAccountByName(accountDataName).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                         let accBalance = '';
                         $('#add-account-title').text('Edit Account Details');
                         $('#edtAccountName').attr('readonly', true);
                         $('#sltAccountType').attr('readonly', true);
                         $('#sltAccountType').attr('disabled', 'disabled');
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
                          var accountid = data.taccountvs1[0].fields.ID || '';
                          var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                          var accountname = data.taccountvs1[0].fields.AccountName || '';
                          var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                          var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                          var accountdesc = data.taccountvs1[0].fields.Description || '';
                          var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                          var bankbsb = data.taccountvs1[0].fields.BSB || '';
                          var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                          var swiftCode = data.taccountvs1[0].fields.Extra || '';
                          var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                          var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                          var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                         var cardcvc = data.taccountvs1[0].fields.CVC || '';
                         var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                          if ((accounttype === "BANK")) {
                              $('.isBankAccount').removeClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }else if ((accounttype === "CCARD")) {
                              $('.isCreditAccount').removeClass('isNotCreditAccount');
                              $('.isBankAccount').addClass('isNotBankAccount');
                          } else {
                              $('.isBankAccount').addClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }
  
                          $('#edtAccountID').val(accountid);
                          $('#sltAccountType').val(accounttype);
                          $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                          $('#edtAccountName').val(accountname);
                          $('#edtAccountNo').val(accountno);
                          $('#sltTaxCode').val(taxcode);
                          $('#txaAccountDescription').val(accountdesc);
                          $('#edtBankAccountName').val(bankaccountname);
                          $('#edtBSB').val(bankbsb);
                          $('#edtBankAccountNo').val(bankacountno);
                          $('#swiftCode').val(swiftCode);
                          $('#routingNo').val(routingNo);
                          $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                          $('#edtCardNumber').val(cardnumber);
                          $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                          $('#edtCvc').val(cardcvc);
  
                          if(showTrans == 'true'){
                              $('.showOnTransactions').prop('checked', true);
                          }else{
                            $('.showOnTransactions').prop('checked', false);
                          }
  
                          setTimeout(function () {
                              $('#addNewAccount').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
               accountService.getOneAccountByName(accountDataName).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
                 let accBalance = '';
                 $('#add-account-title').text('Edit Account Details');
                 $('#edtAccountName').attr('readonly', true);
                 $('#sltAccountType').attr('readonly', true);
                 $('#sltAccountType').attr('disabled', 'disabled');
                 if (accountTypeList) {
                     for (var h = 0; h < accountTypeList.length; h++) {
  
                         if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                             fullAccountTypeName = accountTypeList[h].description || '';
  
                         }
                     }
  
                 }
  
                  var accountid = data.taccountvs1[0].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                  var accountname = data.taccountvs1[0].fields.AccountName || '';
                  var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[0].fields.Description || '';
                  var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[0].fields.BSB || '';
                  var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[0].fields.Extra || '';
                  var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                  var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                 var cardcvc = data.taccountvs1[0].fields.CVC || '';
                 var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
             });
             $('#addAccountModal').modal('toggle');
           }else{
             $('#selectLineID').val('edtReimbursementAccount');
             $('#accountListModal').modal();
             setTimeout(function () {
               $('#tblAccount_filter .form-control-sm').focus();
               $('#tblAccount_filter .form-control-sm').val('LTLIAB');
               $('#tblAccount_filter .form-control-sm').trigger("input");
                 var datatable = $('#tblSupplierlist').DataTable();
                 datatable.draw();
                 $('#tblAccount_filter .form-control-sm').trigger("input");
             }, 500);
           }
         }
  
  
      });


     $('#editwagesexpbankaccount').editableSelect().on('click.editable-select', function (e, li) {
        var $earch = $(this);
        var offset = $earch.offset();
        let accountService = new AccountService();
        const accountTypeList = [];
        var accountDataName = e.target.value ||'';
  
        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectLineID').val('editwagesexpbankaccount');
          $('#accountListModal').modal();
          setTimeout(function () {
              $('#tblAccount_filter .form-control-sm').focus();
              $('#tblAccount_filter .form-control-sm').val('EXP');
              $('#tblAccount_filter .form-control-sm').trigger("input");
              var datatable = $('#tblAccountlist').DataTable();
              datatable.draw();
              $('#tblAccountlist_filter .form-control-sm').trigger("input");
          }, 500);
         }else{
           if(accountDataName.replace(/\s/g, '') != ''){
             getVS1Data('TAccountVS1').then(function (dataObject) {
                 if (dataObject.length == 0) {
                   accountService.getOneAccountByName(accountDataName).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     if (accountTypeList) {
                         for (var h = 0; h < accountTypeList.length; h++) {
  
                             if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                 fullAccountTypeName = accountTypeList[h].description || '';
  
                             }
                         }
  
                     }
  
                      var accountid = data.taccountvs1[0].fields.ID || '';
                      var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                      var accountname = data.taccountvs1[0].fields.AccountName || '';
                      var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                      var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                      var accountdesc = data.taccountvs1[0].fields.Description || '';
                      var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                      var bankbsb = data.taccountvs1[0].fields.BSB || '';
                      var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                      var swiftCode = data.taccountvs1[0].fields.Extra || '';
                      var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                      var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                      var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                     var cardcvc = data.taccountvs1[0].fields.CVC || '';
                     var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                      if ((accounttype === "BANK")) {
                          $('.isBankAccount').removeClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }else if ((accounttype === "CCARD")) {
                          $('.isCreditAccount').removeClass('isNotCreditAccount');
                          $('.isBankAccount').addClass('isNotBankAccount');
                      } else {
                          $('.isBankAccount').addClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }
  
                      $('#edtAccountID').val(accountid);
                      $('#sltAccountType').val(accounttype);
                      $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                      $('#edtAccountName').val(accountname);
                      $('#edtAccountNo').val(accountno);
                      $('#sltTaxCode').val(taxcode);
                      $('#txaAccountDescription').val(accountdesc);
                      $('#edtBankAccountName').val(bankaccountname);
                      $('#edtBSB').val(bankbsb);
                      $('#edtBankAccountNo').val(bankacountno);
                      $('#swiftCode').val(swiftCode);
                      $('#routingNo').val(routingNo);
                      $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                      $('#edtCardNumber').val(cardnumber);
                      $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                      $('#edtCvc').val(cardcvc);
  
                      if(showTrans == 'true'){
                          $('.showOnTransactions').prop('checked', true);
                      }else{
                        $('.showOnTransactions').prop('checked', false);
                      }
  
                      setTimeout(function () {
                          $('#addNewAccount').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.taccountvs1;
                       var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     for (let a = 0; a < data.taccountvs1.length; a++) {
  
                       if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                         added = true;
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
  
  
                  var accountid = data.taccountvs1[a].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                  var accountname = data.taccountvs1[a].fields.AccountName || '';
                  var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[a].fields.Description || '';
                  var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[a].fields.BSB || '';
                  var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[a].fields.Extra || '';
                  var routingNo = data.taccountvs1[a].BankCode || '';
  
                  var showTrans = data.taccountvs1[a].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                  var cardcvc = data.taccountvs1[a].fields.CVC || '';
                  var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
                       }
                     }
                     if(!added) {
                       accountService.getOneAccountByName(accountDataName).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                         let accBalance = '';
                         $('#add-account-title').text('Edit Account Details');
                         $('#edtAccountName').attr('readonly', true);
                         $('#sltAccountType').attr('readonly', true);
                         $('#sltAccountType').attr('disabled', 'disabled');
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
                          var accountid = data.taccountvs1[0].fields.ID || '';
                          var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                          var accountname = data.taccountvs1[0].fields.AccountName || '';
                          var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                          var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                          var accountdesc = data.taccountvs1[0].fields.Description || '';
                          var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                          var bankbsb = data.taccountvs1[0].fields.BSB || '';
                          var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                          var swiftCode = data.taccountvs1[0].fields.Extra || '';
                          var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                          var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                          var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                         var cardcvc = data.taccountvs1[0].fields.CVC || '';
                         var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                          if ((accounttype === "BANK")) {
                              $('.isBankAccount').removeClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }else if ((accounttype === "CCARD")) {
                              $('.isCreditAccount').removeClass('isNotCreditAccount');
                              $('.isBankAccount').addClass('isNotBankAccount');
                          } else {
                              $('.isBankAccount').addClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }
  
                          $('#edtAccountID').val(accountid);
                          $('#sltAccountType').val(accounttype);
                          $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                          $('#edtAccountName').val(accountname);
                          $('#edtAccountNo').val(accountno);
                          $('#sltTaxCode').val(taxcode);
                          $('#txaAccountDescription').val(accountdesc);
                          $('#edtBankAccountName').val(bankaccountname);
                          $('#edtBSB').val(bankbsb);
                          $('#edtBankAccountNo').val(bankacountno);
                          $('#swiftCode').val(swiftCode);
                          $('#routingNo').val(routingNo);
                          $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                          $('#edtCardNumber').val(cardnumber);
                          $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                          $('#edtCvc').val(cardcvc);
  
                          if(showTrans == 'true'){
                              $('.showOnTransactions').prop('checked', true);
                          }else{
                            $('.showOnTransactions').prop('checked', false);
                          }
  
                          setTimeout(function () {
                              $('#addNewAccount').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
               accountService.getOneAccountByName(accountDataName).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
                 let accBalance = '';
                 $('#add-account-title').text('Edit Account Details');
                 $('#edtAccountName').attr('readonly', true);
                 $('#sltAccountType').attr('readonly', true);
                 $('#sltAccountType').attr('disabled', 'disabled');
                 if (accountTypeList) {
                     for (var h = 0; h < accountTypeList.length; h++) {
  
                         if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                             fullAccountTypeName = accountTypeList[h].description || '';
  
                         }
                     }
  
                 }
  
                  var accountid = data.taccountvs1[0].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                  var accountname = data.taccountvs1[0].fields.AccountName || '';
                  var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[0].fields.Description || '';
                  var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[0].fields.BSB || '';
                  var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[0].fields.Extra || '';
                  var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                  var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                 var cardcvc = data.taccountvs1[0].fields.CVC || '';
                 var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
             });
             $('#addAccountModal').modal('toggle');
           }else{
             $('#selectLineID').val('editwagesexpbankaccount');
             $('#accountListModal').modal();
             setTimeout(function () {
               $('#tblAccount_filter .form-control-sm').focus();
               $('#tblAccount_filter .form-control-sm').val('EXP');
               $('#tblAccount_filter .form-control-sm').trigger("input");
                 var datatable = $('#tblSupplierlist').DataTable();
                 datatable.draw();
                 $('#tblAccount_filter .form-control-sm').trigger("input");
             }, 500);
           }
         }
  
  
      });

     $('#editwagespaybankaccount').editableSelect().on('click.editable-select', function (e, li) {
        var $earch = $(this);
        var offset = $earch.offset();
        let accountService = new AccountService();
        const accountTypeList = [];
        var accountDataName = e.target.value ||'';
  
        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectLineID').val('editwagespaybankaccount');
          $('#accountListModal').modal();
          setTimeout(function () {
              $('#tblAccount_filter .form-control-sm').focus();
              $('#tblAccount_filter .form-control-sm').val('AP');
              $('#tblAccount_filter .form-control-sm').trigger("input");
              var datatable = $('#tblAccountlist').DataTable();
              datatable.draw();
              $('#tblAccountlist_filter .form-control-sm').trigger("input");
          }, 500);
         }else{
           if(accountDataName.replace(/\s/g, '') != ''){
             getVS1Data('TAccountVS1').then(function (dataObject) {
                 if (dataObject.length == 0) {
                   accountService.getOneAccountByName(accountDataName).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     if (accountTypeList) {
                         for (var h = 0; h < accountTypeList.length; h++) {
  
                             if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                 fullAccountTypeName = accountTypeList[h].description || '';
  
                             }
                         }
  
                     }
  
                      var accountid = data.taccountvs1[0].fields.ID || '';
                      var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                      var accountname = data.taccountvs1[0].fields.AccountName || '';
                      var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                      var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                      var accountdesc = data.taccountvs1[0].fields.Description || '';
                      var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                      var bankbsb = data.taccountvs1[0].fields.BSB || '';
                      var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                      var swiftCode = data.taccountvs1[0].fields.Extra || '';
                      var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                      var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                      var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                     var cardcvc = data.taccountvs1[0].fields.CVC || '';
                     var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                      if ((accounttype === "BANK")) {
                          $('.isBankAccount').removeClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }else if ((accounttype === "CCARD")) {
                          $('.isCreditAccount').removeClass('isNotCreditAccount');
                          $('.isBankAccount').addClass('isNotBankAccount');
                      } else {
                          $('.isBankAccount').addClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }
  
                      $('#edtAccountID').val(accountid);
                      $('#sltAccountType').val(accounttype);
                      $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                      $('#edtAccountName').val(accountname);
                      $('#edtAccountNo').val(accountno);
                      $('#sltTaxCode').val(taxcode);
                      $('#txaAccountDescription').val(accountdesc);
                      $('#edtBankAccountName').val(bankaccountname);
                      $('#edtBSB').val(bankbsb);
                      $('#edtBankAccountNo').val(bankacountno);
                      $('#swiftCode').val(swiftCode);
                      $('#routingNo').val(routingNo);
                      $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                      $('#edtCardNumber').val(cardnumber);
                      $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                      $('#edtCvc').val(cardcvc);
  
                      if(showTrans == 'true'){
                          $('.showOnTransactions').prop('checked', true);
                      }else{
                        $('.showOnTransactions').prop('checked', false);
                      }
  
                      setTimeout(function () {
                          $('#addNewAccount').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.taccountvs1;
                       var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     for (let a = 0; a < data.taccountvs1.length; a++) {
  
                       if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                         added = true;
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
  
  
                  var accountid = data.taccountvs1[a].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                  var accountname = data.taccountvs1[a].fields.AccountName || '';
                  var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[a].fields.Description || '';
                  var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[a].fields.BSB || '';
                  var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[a].fields.Extra || '';
                  var routingNo = data.taccountvs1[a].BankCode || '';
  
                  var showTrans = data.taccountvs1[a].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                  var cardcvc = data.taccountvs1[a].fields.CVC || '';
                  var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
                       }
                     }
                     if(!added) {
                       accountService.getOneAccountByName(accountDataName).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                         let accBalance = '';
                         $('#add-account-title').text('Edit Account Details');
                         $('#edtAccountName').attr('readonly', true);
                         $('#sltAccountType').attr('readonly', true);
                         $('#sltAccountType').attr('disabled', 'disabled');
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
                          var accountid = data.taccountvs1[0].fields.ID || '';
                          var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                          var accountname = data.taccountvs1[0].fields.AccountName || '';
                          var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                          var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                          var accountdesc = data.taccountvs1[0].fields.Description || '';
                          var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                          var bankbsb = data.taccountvs1[0].fields.BSB || '';
                          var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                          var swiftCode = data.taccountvs1[0].fields.Extra || '';
                          var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                          var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                          var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                         var cardcvc = data.taccountvs1[0].fields.CVC || '';
                         var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                          if ((accounttype === "BANK")) {
                              $('.isBankAccount').removeClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }else if ((accounttype === "CCARD")) {
                              $('.isCreditAccount').removeClass('isNotCreditAccount');
                              $('.isBankAccount').addClass('isNotBankAccount');
                          } else {
                              $('.isBankAccount').addClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }
  
                          $('#edtAccountID').val(accountid);
                          $('#sltAccountType').val(accounttype);
                          $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                          $('#edtAccountName').val(accountname);
                          $('#edtAccountNo').val(accountno);
                          $('#sltTaxCode').val(taxcode);
                          $('#txaAccountDescription').val(accountdesc);
                          $('#edtBankAccountName').val(bankaccountname);
                          $('#edtBSB').val(bankbsb);
                          $('#edtBankAccountNo').val(bankacountno);
                          $('#swiftCode').val(swiftCode);
                          $('#routingNo').val(routingNo);
                          $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                          $('#edtCardNumber').val(cardnumber);
                          $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                          $('#edtCvc').val(cardcvc);
  
                          if(showTrans == 'true'){
                              $('.showOnTransactions').prop('checked', true);
                          }else{
                            $('.showOnTransactions').prop('checked', false);
                          }
  
                          setTimeout(function () {
                              $('#addNewAccount').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
               accountService.getOneAccountByName(accountDataName).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
                 let accBalance = '';
                 $('#add-account-title').text('Edit Account Details');
                 $('#edtAccountName').attr('readonly', true);
                 $('#sltAccountType').attr('readonly', true);
                 $('#sltAccountType').attr('disabled', 'disabled');
                 if (accountTypeList) {
                     for (var h = 0; h < accountTypeList.length; h++) {
  
                         if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                             fullAccountTypeName = accountTypeList[h].description || '';
  
                         }
                     }
  
                 }
  
                  var accountid = data.taccountvs1[0].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                  var accountname = data.taccountvs1[0].fields.AccountName || '';
                  var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[0].fields.Description || '';
                  var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[0].fields.BSB || '';
                  var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[0].fields.Extra || '';
                  var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                  var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                 var cardcvc = data.taccountvs1[0].fields.CVC || '';
                 var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
             });
             $('#addAccountModal').modal('toggle');
           }else{
             $('#selectLineID').val('editwagespaybankaccount');
             $('#accountListModal').modal();
             setTimeout(function () {
               $('#tblAccount_filter .form-control-sm').focus();
               $('#tblAccount_filter .form-control-sm').val('AP');
               $('#tblAccount_filter .form-control-sm').trigger("input");
                 var datatable = $('#tblSupplierlist').DataTable();
                 datatable.draw();
                 $('#tblAccount_filter .form-control-sm').trigger("input");
             }, 500);
           }
         }
  
  
      });
    
     $('#editsuperliabbankaccount').editableSelect().on('click.editable-select', function (e, li) {
        var $earch = $(this);
        var offset = $earch.offset();
        let accountService = new AccountService();
        const accountTypeList = [];
        var accountDataName = e.target.value ||'';
  
        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectLineID').val('editsuperliabbankaccount');
          $('#accountListModal').modal();
          setTimeout(function () {
              $('#tblAccount_filter .form-control-sm').focus();
              $('#tblAccount_filter .form-control-sm').val('OCLIAB');
              $('#tblAccount_filter .form-control-sm').trigger("input");
              var datatable = $('#tblAccountlist').DataTable();
              datatable.draw();
              $('#tblAccountlist_filter .form-control-sm').trigger("input");
          }, 500);
         }else{
           if(accountDataName.replace(/\s/g, '') != ''){
             getVS1Data('TAccountVS1').then(function (dataObject) {
                 if (dataObject.length == 0) {
                   accountService.getOneAccountByName(accountDataName).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     if (accountTypeList) {
                         for (var h = 0; h < accountTypeList.length; h++) {
  
                             if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                 fullAccountTypeName = accountTypeList[h].description || '';
  
                             }
                         }
  
                     }
  
                      var accountid = data.taccountvs1[0].fields.ID || '';
                      var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                      var accountname = data.taccountvs1[0].fields.AccountName || '';
                      var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                      var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                      var accountdesc = data.taccountvs1[0].fields.Description || '';
                      var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                      var bankbsb = data.taccountvs1[0].fields.BSB || '';
                      var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                      var swiftCode = data.taccountvs1[0].fields.Extra || '';
                      var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                      var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                      var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                     var cardcvc = data.taccountvs1[0].fields.CVC || '';
                     var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                      if ((accounttype === "BANK")) {
                          $('.isBankAccount').removeClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }else if ((accounttype === "CCARD")) {
                          $('.isCreditAccount').removeClass('isNotCreditAccount');
                          $('.isBankAccount').addClass('isNotBankAccount');
                      } else {
                          $('.isBankAccount').addClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }
  
                      $('#edtAccountID').val(accountid);
                      $('#sltAccountType').val(accounttype);
                      $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                      $('#edtAccountName').val(accountname);
                      $('#edtAccountNo').val(accountno);
                      $('#sltTaxCode').val(taxcode);
                      $('#txaAccountDescription').val(accountdesc);
                      $('#edtBankAccountName').val(bankaccountname);
                      $('#edtBSB').val(bankbsb);
                      $('#edtBankAccountNo').val(bankacountno);
                      $('#swiftCode').val(swiftCode);
                      $('#routingNo').val(routingNo);
                      $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                      $('#edtCardNumber').val(cardnumber);
                      $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                      $('#edtCvc').val(cardcvc);
  
                      if(showTrans == 'true'){
                          $('.showOnTransactions').prop('checked', true);
                      }else{
                        $('.showOnTransactions').prop('checked', false);
                      }
  
                      setTimeout(function () {
                          $('#addNewAccount').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.taccountvs1;
                       var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     for (let a = 0; a < data.taccountvs1.length; a++) {
  
                       if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                         added = true;
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
  
  
                  var accountid = data.taccountvs1[a].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                  var accountname = data.taccountvs1[a].fields.AccountName || '';
                  var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[a].fields.Description || '';
                  var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[a].fields.BSB || '';
                  var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[a].fields.Extra || '';
                  var routingNo = data.taccountvs1[a].BankCode || '';
  
                  var showTrans = data.taccountvs1[a].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                  var cardcvc = data.taccountvs1[a].fields.CVC || '';
                  var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
                       }
                     }
                     if(!added) {
                       accountService.getOneAccountByName(accountDataName).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                         let accBalance = '';
                         $('#add-account-title').text('Edit Account Details');
                         $('#edtAccountName').attr('readonly', true);
                         $('#sltAccountType').attr('readonly', true);
                         $('#sltAccountType').attr('disabled', 'disabled');
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
                          var accountid = data.taccountvs1[0].fields.ID || '';
                          var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                          var accountname = data.taccountvs1[0].fields.AccountName || '';
                          var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                          var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                          var accountdesc = data.taccountvs1[0].fields.Description || '';
                          var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                          var bankbsb = data.taccountvs1[0].fields.BSB || '';
                          var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                          var swiftCode = data.taccountvs1[0].fields.Extra || '';
                          var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                          var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                          var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                         var cardcvc = data.taccountvs1[0].fields.CVC || '';
                         var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                          if ((accounttype === "BANK")) {
                              $('.isBankAccount').removeClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }else if ((accounttype === "CCARD")) {
                              $('.isCreditAccount').removeClass('isNotCreditAccount');
                              $('.isBankAccount').addClass('isNotBankAccount');
                          } else {
                              $('.isBankAccount').addClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }
  
                          $('#edtAccountID').val(accountid);
                          $('#sltAccountType').val(accounttype);
                          $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                          $('#edtAccountName').val(accountname);
                          $('#edtAccountNo').val(accountno);
                          $('#sltTaxCode').val(taxcode);
                          $('#txaAccountDescription').val(accountdesc);
                          $('#edtBankAccountName').val(bankaccountname);
                          $('#edtBSB').val(bankbsb);
                          $('#edtBankAccountNo').val(bankacountno);
                          $('#swiftCode').val(swiftCode);
                          $('#routingNo').val(routingNo);
                          $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                          $('#edtCardNumber').val(cardnumber);
                          $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                          $('#edtCvc').val(cardcvc);
  
                          if(showTrans == 'true'){
                              $('.showOnTransactions').prop('checked', true);
                          }else{
                            $('.showOnTransactions').prop('checked', false);
                          }
  
                          setTimeout(function () {
                              $('#addNewAccount').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
               accountService.getOneAccountByName(accountDataName).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
                 let accBalance = '';
                 $('#add-account-title').text('Edit Account Details');
                 $('#edtAccountName').attr('readonly', true);
                 $('#sltAccountType').attr('readonly', true);
                 $('#sltAccountType').attr('disabled', 'disabled');
                 if (accountTypeList) {
                     for (var h = 0; h < accountTypeList.length; h++) {
  
                         if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                             fullAccountTypeName = accountTypeList[h].description || '';
  
                         }
                     }
  
                 }
  
                  var accountid = data.taccountvs1[0].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                  var accountname = data.taccountvs1[0].fields.AccountName || '';
                  var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[0].fields.Description || '';
                  var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[0].fields.BSB || '';
                  var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[0].fields.Extra || '';
                  var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                  var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                 var cardcvc = data.taccountvs1[0].fields.CVC || '';
                 var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
             });
             $('#addAccountModal').modal('toggle');
           }else{
             $('#selectLineID').val('editsuperliabbankaccount');
             $('#accountListModal').modal();
             setTimeout(function () {
               $('#tblAccount_filter .form-control-sm').focus();
               $('#tblAccount_filter .form-control-sm').val('OCLIAB');
               $('#tblAccount_filter .form-control-sm').trigger("input");
                 var datatable = $('#tblSupplierlist').DataTable();
                 datatable.draw();
                 $('#tblAccount_filter .form-control-sm').trigger("input");
             }, 500);
           }
         }
  
  
      });

     $('#editsuperexpbankaccount').editableSelect().on('click.editable-select', function (e, li) {
        var $earch = $(this);
        var offset = $earch.offset();
        let accountService = new AccountService();
        const accountTypeList = [];
        var accountDataName = e.target.value ||'';
  
        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectLineID').val('editsuperexpbankaccount');
          $('#accountListModal').modal();
          setTimeout(function () {
              $('#tblAccount_filter .form-control-sm').focus();
              $('#tblAccount_filter .form-control-sm').val('EXP');
              $('#tblAccount_filter .form-control-sm').trigger("input");
              var datatable = $('#tblAccountlist').DataTable();
              datatable.draw();
              $('#tblAccountlist_filter .form-control-sm').trigger("input");
          }, 500);
         }else{
           if(accountDataName.replace(/\s/g, '') != ''){
             getVS1Data('TAccountVS1').then(function (dataObject) {
                 if (dataObject.length == 0) {
                   accountService.getOneAccountByName(accountDataName).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     if (accountTypeList) {
                         for (var h = 0; h < accountTypeList.length; h++) {
  
                             if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                 fullAccountTypeName = accountTypeList[h].description || '';
  
                             }
                         }
  
                     }
  
                      var accountid = data.taccountvs1[0].fields.ID || '';
                      var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                      var accountname = data.taccountvs1[0].fields.AccountName || '';
                      var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                      var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                      var accountdesc = data.taccountvs1[0].fields.Description || '';
                      var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                      var bankbsb = data.taccountvs1[0].fields.BSB || '';
                      var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                      var swiftCode = data.taccountvs1[0].fields.Extra || '';
                      var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                      var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                      var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                     var cardcvc = data.taccountvs1[0].fields.CVC || '';
                     var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                      if ((accounttype === "BANK")) {
                          $('.isBankAccount').removeClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }else if ((accounttype === "CCARD")) {
                          $('.isCreditAccount').removeClass('isNotCreditAccount');
                          $('.isBankAccount').addClass('isNotBankAccount');
                      } else {
                          $('.isBankAccount').addClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }
  
                      $('#edtAccountID').val(accountid);
                      $('#sltAccountType').val(accounttype);
                      $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                      $('#edtAccountName').val(accountname);
                      $('#edtAccountNo').val(accountno);
                      $('#sltTaxCode').val(taxcode);
                      $('#txaAccountDescription').val(accountdesc);
                      $('#edtBankAccountName').val(bankaccountname);
                      $('#edtBSB').val(bankbsb);
                      $('#edtBankAccountNo').val(bankacountno);
                      $('#swiftCode').val(swiftCode);
                      $('#routingNo').val(routingNo);
                      $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                      $('#edtCardNumber').val(cardnumber);
                      $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                      $('#edtCvc').val(cardcvc);
  
                      if(showTrans == 'true'){
                          $('.showOnTransactions').prop('checked', true);
                      }else{
                        $('.showOnTransactions').prop('checked', false);
                      }
  
                      setTimeout(function () {
                          $('#addNewAccount').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.taccountvs1;
                       var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     for (let a = 0; a < data.taccountvs1.length; a++) {
  
                       if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                         added = true;
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
  
  
                  var accountid = data.taccountvs1[a].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                  var accountname = data.taccountvs1[a].fields.AccountName || '';
                  var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[a].fields.Description || '';
                  var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[a].fields.BSB || '';
                  var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[a].fields.Extra || '';
                  var routingNo = data.taccountvs1[a].BankCode || '';
  
                  var showTrans = data.taccountvs1[a].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                  var cardcvc = data.taccountvs1[a].fields.CVC || '';
                  var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
                       }
                     }
                     if(!added) {
                       accountService.getOneAccountByName(accountDataName).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                         let accBalance = '';
                         $('#add-account-title').text('Edit Account Details');
                         $('#edtAccountName').attr('readonly', true);
                         $('#sltAccountType').attr('readonly', true);
                         $('#sltAccountType').attr('disabled', 'disabled');
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
                          var accountid = data.taccountvs1[0].fields.ID || '';
                          var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                          var accountname = data.taccountvs1[0].fields.AccountName || '';
                          var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                          var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                          var accountdesc = data.taccountvs1[0].fields.Description || '';
                          var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                          var bankbsb = data.taccountvs1[0].fields.BSB || '';
                          var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                          var swiftCode = data.taccountvs1[0].fields.Extra || '';
                          var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                          var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                          var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                         var cardcvc = data.taccountvs1[0].fields.CVC || '';
                         var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                          if ((accounttype === "BANK")) {
                              $('.isBankAccount').removeClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }else if ((accounttype === "CCARD")) {
                              $('.isCreditAccount').removeClass('isNotCreditAccount');
                              $('.isBankAccount').addClass('isNotBankAccount');
                          } else {
                              $('.isBankAccount').addClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }
  
                          $('#edtAccountID').val(accountid);
                          $('#sltAccountType').val(accounttype);
                          $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                          $('#edtAccountName').val(accountname);
                          $('#edtAccountNo').val(accountno);
                          $('#sltTaxCode').val(taxcode);
                          $('#txaAccountDescription').val(accountdesc);
                          $('#edtBankAccountName').val(bankaccountname);
                          $('#edtBSB').val(bankbsb);
                          $('#edtBankAccountNo').val(bankacountno);
                          $('#swiftCode').val(swiftCode);
                          $('#routingNo').val(routingNo);
                          $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                          $('#edtCardNumber').val(cardnumber);
                          $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                          $('#edtCvc').val(cardcvc);
  
                          if(showTrans == 'true'){
                              $('.showOnTransactions').prop('checked', true);
                          }else{
                            $('.showOnTransactions').prop('checked', false);
                          }
  
                          setTimeout(function () {
                              $('#addNewAccount').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
               accountService.getOneAccountByName(accountDataName).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
                 let accBalance = '';
                 $('#add-account-title').text('Edit Account Details');
                 $('#edtAccountName').attr('readonly', true);
                 $('#sltAccountType').attr('readonly', true);
                 $('#sltAccountType').attr('disabled', 'disabled');
                 if (accountTypeList) {
                     for (var h = 0; h < accountTypeList.length; h++) {
  
                         if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                             fullAccountTypeName = accountTypeList[h].description || '';
  
                         }
                     }
  
                 }
  
                  var accountid = data.taccountvs1[0].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                  var accountname = data.taccountvs1[0].fields.AccountName || '';
                  var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[0].fields.Description || '';
                  var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[0].fields.BSB || '';
                  var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[0].fields.Extra || '';
                  var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                  var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                 var cardcvc = data.taccountvs1[0].fields.CVC || '';
                 var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
             });
             $('#addAccountModal').modal('toggle');
           }else{
             $('#selectLineID').val('editsuperexpbankaccount');
             $('#accountListModal').modal();
             setTimeout(function () {
               $('#tblAccount_filter .form-control-sm').focus();
               $('#tblAccount_filter .form-control-sm').val('EXP');
               $('#tblAccount_filter .form-control-sm').trigger("input");
                 var datatable = $('#tblSupplierlist').DataTable();
                 datatable.draw();
                 $('#tblAccount_filter .form-control-sm').trigger("input");
             }, 500);
           }
         }
  
  
      });

     $('#edtExpenseAccountAllowance').editableSelect().on('click.editable-select', function (e, li) {
      var $earch = $(this);
      var offset = $earch.offset();
      let accountService = new AccountService();
      const accountTypeList = [];
      var accountDataName = e.target.value ||'';

      if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
         $('#selectLineID').val('edtExpenseAccountAllowance');
        $('#accountListModal').modal();
        setTimeout(function () {
            $('#tblAccount_filter .form-control-sm').focus();
            $('#tblAccount_filter .form-control-sm').val('EXP');
            $('#tblAccount_filter .form-control-sm').trigger("input");
            var datatable = $('#tblAccountlist').DataTable();
            datatable.draw();
            $('#tblAccountlist_filter .form-control-sm').trigger("input");
        }, 500);
       }else{
         if(accountDataName.replace(/\s/g, '') != ''){
           getVS1Data('TAccountVS1').then(function (dataObject) {
               if (dataObject.length == 0) {
                 accountService.getOneAccountByName(accountDataName).then(function (data) {
                   let lineItems = [];
                   let lineItemObj = {};
                   let fullAccountTypeName = '';
                   let accBalance = '';
                   $('#add-account-title').text('Edit Account Details');
                   $('#edtAccountName').attr('readonly', true);
                   $('#sltAccountType').attr('readonly', true);
                   $('#sltAccountType').attr('disabled', 'disabled');
                   if (accountTypeList) {
                       for (var h = 0; h < accountTypeList.length; h++) {

                           if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {

                               fullAccountTypeName = accountTypeList[h].description || '';

                           }
                       }

                   }

                    var accountid = data.taccountvs1[0].fields.ID || '';
                    var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                    var accountname = data.taccountvs1[0].fields.AccountName || '';
                    var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                    var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                    var accountdesc = data.taccountvs1[0].fields.Description || '';
                    var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                    var bankbsb = data.taccountvs1[0].fields.BSB || '';
                    var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';

                    var swiftCode = data.taccountvs1[0].fields.Extra || '';
                    var routingNo = data.taccountvs1[0].fields.BankCode || '';

                    var showTrans = data.taccountvs1[0].fields.IsHeader || false;

                    var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                   var cardcvc = data.taccountvs1[0].fields.CVC || '';
                   var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';

                    if ((accounttype === "BANK")) {
                        $('.isBankAccount').removeClass('isNotBankAccount');
                        $('.isCreditAccount').addClass('isNotCreditAccount');
                    }else if ((accounttype === "CCARD")) {
                        $('.isCreditAccount').removeClass('isNotCreditAccount');
                        $('.isBankAccount').addClass('isNotBankAccount');
                    } else {
                        $('.isBankAccount').addClass('isNotBankAccount');
                        $('.isCreditAccount').addClass('isNotCreditAccount');
                    }

                    $('#edtAccountID').val(accountid);
                    $('#sltAccountType').val(accounttype);
                    $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                    $('#edtAccountName').val(accountname);
                    $('#edtAccountNo').val(accountno);
                    $('#sltTaxCode').val(taxcode);
                    $('#txaAccountDescription').val(accountdesc);
                    $('#edtBankAccountName').val(bankaccountname);
                    $('#edtBSB').val(bankbsb);
                    $('#edtBankAccountNo').val(bankacountno);
                    $('#swiftCode').val(swiftCode);
                    $('#routingNo').val(routingNo);
                    $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');

                    $('#edtCardNumber').val(cardnumber);
                    $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                    $('#edtCvc').val(cardcvc);

                    if(showTrans == 'true'){
                        $('.showOnTransactions').prop('checked', true);
                    }else{
                      $('.showOnTransactions').prop('checked', false);
                    }

                    setTimeout(function () {
                        $('#addNewAccount').modal('show');
                    }, 500);

                 }).catch(function (err) {
                     $('.fullScreenSpin').css('display','none');
                 });
               } else {
                   let data = JSON.parse(dataObject[0].data);
                   let useData = data.taccountvs1;
                     var added=false;
                   let lineItems = [];
                   let lineItemObj = {};
                   let fullAccountTypeName = '';
                   let accBalance = '';
                   $('#add-account-title').text('Edit Account Details');
                   $('#edtAccountName').attr('readonly', true);
                   $('#sltAccountType').attr('readonly', true);
                   $('#sltAccountType').attr('disabled', 'disabled');
                   for (let a = 0; a < data.taccountvs1.length; a++) {

                     if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                       added = true;
                       if (accountTypeList) {
                           for (var h = 0; h < accountTypeList.length; h++) {

                               if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {

                                   fullAccountTypeName = accountTypeList[h].description || '';

                               }
                           }

                       }



                var accountid = data.taccountvs1[a].fields.ID || '';
                var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                var accountname = data.taccountvs1[a].fields.AccountName || '';
                var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                var accountdesc = data.taccountvs1[a].fields.Description || '';
                var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                var bankbsb = data.taccountvs1[a].fields.BSB || '';
                var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';

                var swiftCode = data.taccountvs1[a].fields.Extra || '';
                var routingNo = data.taccountvs1[a].BankCode || '';

                var showTrans = data.taccountvs1[a].fields.IsHeader || false;

                var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                var cardcvc = data.taccountvs1[a].fields.CVC || '';
                var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';

                if ((accounttype === "BANK")) {
                    $('.isBankAccount').removeClass('isNotBankAccount');
                    $('.isCreditAccount').addClass('isNotCreditAccount');
                }else if ((accounttype === "CCARD")) {
                    $('.isCreditAccount').removeClass('isNotCreditAccount');
                    $('.isBankAccount').addClass('isNotBankAccount');
                } else {
                    $('.isBankAccount').addClass('isNotBankAccount');
                    $('.isCreditAccount').addClass('isNotCreditAccount');
                }

                $('#edtAccountID').val(accountid);
                $('#sltAccountType').val(accounttype);
                $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                $('#edtAccountName').val(accountname);
                $('#edtAccountNo').val(accountno);
                $('#sltTaxCode').val(taxcode);
                $('#txaAccountDescription').val(accountdesc);
                $('#edtBankAccountName').val(bankaccountname);
                $('#edtBSB').val(bankbsb);
                $('#edtBankAccountNo').val(bankacountno);
                $('#swiftCode').val(swiftCode);
                $('#routingNo').val(routingNo);
                $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');

                $('#edtCardNumber').val(cardnumber);
                $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                $('#edtCvc').val(cardcvc);

                if(showTrans == 'true'){
                    $('.showOnTransactions').prop('checked', true);
                }else{
                  $('.showOnTransactions').prop('checked', false);
                }

                setTimeout(function () {
                    $('#addNewAccount').modal('show');
                }, 500);

                     }
                   }
                   if(!added) {
                     accountService.getOneAccountByName(accountDataName).then(function (data) {
                       let lineItems = [];
                       let lineItemObj = {};
                       let fullAccountTypeName = '';
                       let accBalance = '';
                       $('#add-account-title').text('Edit Account Details');
                       $('#edtAccountName').attr('readonly', true);
                       $('#sltAccountType').attr('readonly', true);
                       $('#sltAccountType').attr('disabled', 'disabled');
                       if (accountTypeList) {
                           for (var h = 0; h < accountTypeList.length; h++) {

                               if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {

                                   fullAccountTypeName = accountTypeList[h].description || '';

                               }
                           }

                       }

                        var accountid = data.taccountvs1[0].fields.ID || '';
                        var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                        var accountname = data.taccountvs1[0].fields.AccountName || '';
                        var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                        var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                        var accountdesc = data.taccountvs1[0].fields.Description || '';
                        var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                        var bankbsb = data.taccountvs1[0].fields.BSB || '';
                        var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';

                        var swiftCode = data.taccountvs1[0].fields.Extra || '';
                        var routingNo = data.taccountvs1[0].fields.BankCode || '';

                        var showTrans = data.taccountvs1[0].fields.IsHeader || false;

                        var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                       var cardcvc = data.taccountvs1[0].fields.CVC || '';
                       var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';

                        if ((accounttype === "BANK")) {
                            $('.isBankAccount').removeClass('isNotBankAccount');
                            $('.isCreditAccount').addClass('isNotCreditAccount');
                        }else if ((accounttype === "CCARD")) {
                            $('.isCreditAccount').removeClass('isNotCreditAccount');
                            $('.isBankAccount').addClass('isNotBankAccount');
                        } else {
                            $('.isBankAccount').addClass('isNotBankAccount');
                            $('.isCreditAccount').addClass('isNotCreditAccount');
                        }

                        $('#edtAccountID').val(accountid);
                        $('#sltAccountType').val(accounttype);
                        $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                        $('#edtAccountName').val(accountname);
                        $('#edtAccountNo').val(accountno);
                        $('#sltTaxCode').val(taxcode);
                        $('#txaAccountDescription').val(accountdesc);
                        $('#edtBankAccountName').val(bankaccountname);
                        $('#edtBSB').val(bankbsb);
                        $('#edtBankAccountNo').val(bankacountno);
                        $('#swiftCode').val(swiftCode);
                        $('#routingNo').val(routingNo);
                        $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');

                        $('#edtCardNumber').val(cardnumber);
                        $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                        $('#edtCvc').val(cardcvc);

                        if(showTrans == 'true'){
                            $('.showOnTransactions').prop('checked', true);
                        }else{
                          $('.showOnTransactions').prop('checked', false);
                        }

                        setTimeout(function () {
                            $('#addNewAccount').modal('show');
                        }, 500);

                     }).catch(function (err) {
                         $('.fullScreenSpin').css('display','none');
                     });
                   }

               }
           }).catch(function (err) {
             accountService.getOneAccountByName(accountDataName).then(function (data) {
               let lineItems = [];
               let lineItemObj = {};
               let fullAccountTypeName = '';
               let accBalance = '';
               $('#add-account-title').text('Edit Account Details');
               $('#edtAccountName').attr('readonly', true);
               $('#sltAccountType').attr('readonly', true);
               $('#sltAccountType').attr('disabled', 'disabled');
               if (accountTypeList) {
                   for (var h = 0; h < accountTypeList.length; h++) {

                       if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {

                           fullAccountTypeName = accountTypeList[h].description || '';

                       }
                   }

               }

                var accountid = data.taccountvs1[0].fields.ID || '';
                var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                var accountname = data.taccountvs1[0].fields.AccountName || '';
                var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                var accountdesc = data.taccountvs1[0].fields.Description || '';
                var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                var bankbsb = data.taccountvs1[0].fields.BSB || '';
                var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';

                var swiftCode = data.taccountvs1[0].fields.Extra || '';
                var routingNo = data.taccountvs1[0].fields.BankCode || '';

                var showTrans = data.taccountvs1[0].fields.IsHeader || false;

                var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
               var cardcvc = data.taccountvs1[0].fields.CVC || '';
               var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';

                if ((accounttype === "BANK")) {
                    $('.isBankAccount').removeClass('isNotBankAccount');
                    $('.isCreditAccount').addClass('isNotCreditAccount');
                }else if ((accounttype === "CCARD")) {
                    $('.isCreditAccount').removeClass('isNotCreditAccount');
                    $('.isBankAccount').addClass('isNotBankAccount');
                } else {
                    $('.isBankAccount').addClass('isNotBankAccount');
                    $('.isCreditAccount').addClass('isNotCreditAccount');
                }

                $('#edtAccountID').val(accountid);
                $('#sltAccountType').val(accounttype);
                $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                $('#edtAccountName').val(accountname);
                $('#edtAccountNo').val(accountno);
                $('#sltTaxCode').val(taxcode);
                $('#txaAccountDescription').val(accountdesc);
                $('#edtBankAccountName').val(bankaccountname);
                $('#edtBSB').val(bankbsb);
                $('#edtBankAccountNo').val(bankacountno);
                $('#swiftCode').val(swiftCode);
                $('#routingNo').val(routingNo);
                $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');

                $('#edtCardNumber').val(cardnumber);
                $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                $('#edtCvc').val(cardcvc);

                if(showTrans == 'true'){
                    $('.showOnTransactions').prop('checked', true);
                }else{
                  $('.showOnTransactions').prop('checked', false);
                }

                setTimeout(function () {
                    $('#addNewAccount').modal('show');
                }, 500);

             }).catch(function (err) {
                 $('.fullScreenSpin').css('display','none');
             });

           });
           $('#addAccountModal').modal('toggle');
         }else{
           $('#selectLineID').val('edtExpenseAccountAllowance');
           $('#accountListModal').modal();
           setTimeout(function () {
             $('#tblAccount_filter .form-control-sm').focus();
             $('#tblAccount_filter .form-control-sm').val('EXP');
             $('#tblAccount_filter .form-control-sm').trigger("input");
               var datatable = $('#tblSupplierlist').DataTable();
               datatable.draw();
               $('#tblAccount_filter .form-control-sm').trigger("input");
           }, 500);
         }
       }


     });

    $('#edtExpenseAccountDirectorsFees').editableSelect().on('click.editable-select', function (e, li) {
        var $earch = $(this);
        var offset = $earch.offset();
        let accountService = new AccountService();
        const accountTypeList = [];
        var accountDataName = e.target.value ||'';
  
        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
           $('#selectLineID').val('edtExpenseAccountDirectorsFees');
          $('#accountListModal').modal();
          setTimeout(function () {
              $('#tblAccount_filter .form-control-sm').focus();
              $('#tblAccount_filter .form-control-sm').val('EXP');
              $('#tblAccount_filter .form-control-sm').trigger("input");
              var datatable = $('#tblAccountlist').DataTable();
              datatable.draw();
              $('#tblAccountlist_filter .form-control-sm').trigger("input");
          }, 500);
         }else{
           if(accountDataName.replace(/\s/g, '') != ''){
             getVS1Data('TAccountVS1').then(function (dataObject) {
                 if (dataObject.length == 0) {
                   accountService.getOneAccountByName(accountDataName).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     if (accountTypeList) {
                         for (var h = 0; h < accountTypeList.length; h++) {
  
                             if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                 fullAccountTypeName = accountTypeList[h].description || '';
  
                             }
                         }
  
                     }
  
                      var accountid = data.taccountvs1[0].fields.ID || '';
                      var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                      var accountname = data.taccountvs1[0].fields.AccountName || '';
                      var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                      var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                      var accountdesc = data.taccountvs1[0].fields.Description || '';
                      var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                      var bankbsb = data.taccountvs1[0].fields.BSB || '';
                      var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                      var swiftCode = data.taccountvs1[0].fields.Extra || '';
                      var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                      var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                      var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                     var cardcvc = data.taccountvs1[0].fields.CVC || '';
                     var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                      if ((accounttype === "BANK")) {
                          $('.isBankAccount').removeClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }else if ((accounttype === "CCARD")) {
                          $('.isCreditAccount').removeClass('isNotCreditAccount');
                          $('.isBankAccount').addClass('isNotBankAccount');
                      } else {
                          $('.isBankAccount').addClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }
  
                      $('#edtAccountID').val(accountid);
                      $('#sltAccountType').val(accounttype);
                      $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                      $('#edtAccountName').val(accountname);
                      $('#edtAccountNo').val(accountno);
                      $('#sltTaxCode').val(taxcode);
                      $('#txaAccountDescription').val(accountdesc);
                      $('#edtBankAccountName').val(bankaccountname);
                      $('#edtBSB').val(bankbsb);
                      $('#edtBankAccountNo').val(bankacountno);
                      $('#swiftCode').val(swiftCode);
                      $('#routingNo').val(routingNo);
                      $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                      $('#edtCardNumber').val(cardnumber);
                      $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                      $('#edtCvc').val(cardcvc);
  
                      if(showTrans == 'true'){
                          $('.showOnTransactions').prop('checked', true);
                      }else{
                        $('.showOnTransactions').prop('checked', false);
                      }
  
                      setTimeout(function () {
                          $('#addNewAccount').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.taccountvs1;
                       var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     for (let a = 0; a < data.taccountvs1.length; a++) {
  
                       if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                         added = true;
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
  
  
                  var accountid = data.taccountvs1[a].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                  var accountname = data.taccountvs1[a].fields.AccountName || '';
                  var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[a].fields.Description || '';
                  var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[a].fields.BSB || '';
                  var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[a].fields.Extra || '';
                  var routingNo = data.taccountvs1[a].BankCode || '';
  
                  var showTrans = data.taccountvs1[a].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                  var cardcvc = data.taccountvs1[a].fields.CVC || '';
                  var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
                       }
                     }
                     if(!added) {
                       accountService.getOneAccountByName(accountDataName).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                         let accBalance = '';
                         $('#add-account-title').text('Edit Account Details');
                         $('#edtAccountName').attr('readonly', true);
                         $('#sltAccountType').attr('readonly', true);
                         $('#sltAccountType').attr('disabled', 'disabled');
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
                          var accountid = data.taccountvs1[0].fields.ID || '';
                          var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                          var accountname = data.taccountvs1[0].fields.AccountName || '';
                          var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                          var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                          var accountdesc = data.taccountvs1[0].fields.Description || '';
                          var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                          var bankbsb = data.taccountvs1[0].fields.BSB || '';
                          var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                          var swiftCode = data.taccountvs1[0].fields.Extra || '';
                          var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                          var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                          var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                         var cardcvc = data.taccountvs1[0].fields.CVC || '';
                         var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                          if ((accounttype === "BANK")) {
                              $('.isBankAccount').removeClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }else if ((accounttype === "CCARD")) {
                              $('.isCreditAccount').removeClass('isNotCreditAccount');
                              $('.isBankAccount').addClass('isNotBankAccount');
                          } else {
                              $('.isBankAccount').addClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }
  
                          $('#edtAccountID').val(accountid);
                          $('#sltAccountType').val(accounttype);
                          $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                          $('#edtAccountName').val(accountname);
                          $('#edtAccountNo').val(accountno);
                          $('#sltTaxCode').val(taxcode);
                          $('#txaAccountDescription').val(accountdesc);
                          $('#edtBankAccountName').val(bankaccountname);
                          $('#edtBSB').val(bankbsb);
                          $('#edtBankAccountNo').val(bankacountno);
                          $('#swiftCode').val(swiftCode);
                          $('#routingNo').val(routingNo);
                          $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                          $('#edtCardNumber').val(cardnumber);
                          $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                          $('#edtCvc').val(cardcvc);
  
                          if(showTrans == 'true'){
                              $('.showOnTransactions').prop('checked', true);
                          }else{
                            $('.showOnTransactions').prop('checked', false);
                          }
  
                          setTimeout(function () {
                              $('#addNewAccount').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
               accountService.getOneAccountByName(accountDataName).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
                 let accBalance = '';
                 $('#add-account-title').text('Edit Account Details');
                 $('#edtAccountName').attr('readonly', true);
                 $('#sltAccountType').attr('readonly', true);
                 $('#sltAccountType').attr('disabled', 'disabled');
                 if (accountTypeList) {
                     for (var h = 0; h < accountTypeList.length; h++) {
  
                         if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                             fullAccountTypeName = accountTypeList[h].description || '';
  
                         }
                     }
  
                 }
  
                  var accountid = data.taccountvs1[0].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                  var accountname = data.taccountvs1[0].fields.AccountName || '';
                  var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[0].fields.Description || '';
                  var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[0].fields.BSB || '';
                  var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[0].fields.Extra || '';
                  var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                  var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                 var cardcvc = data.taccountvs1[0].fields.CVC || '';
                 var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
             });
             $('#addAccountModal').modal('toggle');
           }else{
             $('#selectLineID').val('edtExpenseAccountDirectorsFees');
             $('#accountListModal').modal();
             setTimeout(function () {
               $('#tblAccount_filter .form-control-sm').focus();
               $('#tblAccount_filter .form-control-sm').val('EXP');
               $('#tblAccount_filter .form-control-sm').trigger("input");
                 var datatable = $('#tblSupplierlist').DataTable();
                 datatable.draw();
                 $('#tblAccount_filter .form-control-sm').trigger("input");
             }, 500);
           }
         }
  
  
      });
    
    $('#edtExpenseAccountTermnination').editableSelect().on('click.editable-select', function (e, li) {
        var $earch = $(this);
        var offset = $earch.offset();
        let accountService = new AccountService();
        const accountTypeList = [];
        var accountDataName = e.target.value ||'';
  
        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
           $('#selectLineID').val('edtExpenseAccountTermnination');
          $('#accountListModal').modal();
          setTimeout(function () {
              $('#tblAccount_filter .form-control-sm').focus();
              $('#tblAccount_filter .form-control-sm').val('EXP');
              $('#tblAccount_filter .form-control-sm').trigger("input");
              var datatable = $('#tblAccountlist').DataTable();
              datatable.draw();
              $('#tblAccountlist_filter .form-control-sm').trigger("input");
          }, 500);
         }else{
           if(accountDataName.replace(/\s/g, '') != ''){
             getVS1Data('TAccountVS1').then(function (dataObject) {
                 if (dataObject.length == 0) {
                   accountService.getOneAccountByName(accountDataName).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     if (accountTypeList) {
                         for (var h = 0; h < accountTypeList.length; h++) {
  
                             if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                 fullAccountTypeName = accountTypeList[h].description || '';
  
                             }
                         }
  
                     }
  
                      var accountid = data.taccountvs1[0].fields.ID || '';
                      var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                      var accountname = data.taccountvs1[0].fields.AccountName || '';
                      var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                      var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                      var accountdesc = data.taccountvs1[0].fields.Description || '';
                      var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                      var bankbsb = data.taccountvs1[0].fields.BSB || '';
                      var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                      var swiftCode = data.taccountvs1[0].fields.Extra || '';
                      var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                      var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                      var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                     var cardcvc = data.taccountvs1[0].fields.CVC || '';
                     var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                      if ((accounttype === "BANK")) {
                          $('.isBankAccount').removeClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }else if ((accounttype === "CCARD")) {
                          $('.isCreditAccount').removeClass('isNotCreditAccount');
                          $('.isBankAccount').addClass('isNotBankAccount');
                      } else {
                          $('.isBankAccount').addClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }
  
                      $('#edtAccountID').val(accountid);
                      $('#sltAccountType').val(accounttype);
                      $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                      $('#edtAccountName').val(accountname);
                      $('#edtAccountNo').val(accountno);
                      $('#sltTaxCode').val(taxcode);
                      $('#txaAccountDescription').val(accountdesc);
                      $('#edtBankAccountName').val(bankaccountname);
                      $('#edtBSB').val(bankbsb);
                      $('#edtBankAccountNo').val(bankacountno);
                      $('#swiftCode').val(swiftCode);
                      $('#routingNo').val(routingNo);
                      $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                      $('#edtCardNumber').val(cardnumber);
                      $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                      $('#edtCvc').val(cardcvc);
  
                      if(showTrans == 'true'){
                          $('.showOnTransactions').prop('checked', true);
                      }else{
                        $('.showOnTransactions').prop('checked', false);
                      }
  
                      setTimeout(function () {
                          $('#addNewAccount').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.taccountvs1;
                       var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     for (let a = 0; a < data.taccountvs1.length; a++) {
  
                       if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                         added = true;
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
  
  
                  var accountid = data.taccountvs1[a].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                  var accountname = data.taccountvs1[a].fields.AccountName || '';
                  var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[a].fields.Description || '';
                  var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[a].fields.BSB || '';
                  var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[a].fields.Extra || '';
                  var routingNo = data.taccountvs1[a].BankCode || '';
  
                  var showTrans = data.taccountvs1[a].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                  var cardcvc = data.taccountvs1[a].fields.CVC || '';
                  var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
                       }
                     }
                     if(!added) {
                       accountService.getOneAccountByName(accountDataName).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                         let accBalance = '';
                         $('#add-account-title').text('Edit Account Details');
                         $('#edtAccountName').attr('readonly', true);
                         $('#sltAccountType').attr('readonly', true);
                         $('#sltAccountType').attr('disabled', 'disabled');
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
                          var accountid = data.taccountvs1[0].fields.ID || '';
                          var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                          var accountname = data.taccountvs1[0].fields.AccountName || '';
                          var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                          var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                          var accountdesc = data.taccountvs1[0].fields.Description || '';
                          var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                          var bankbsb = data.taccountvs1[0].fields.BSB || '';
                          var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                          var swiftCode = data.taccountvs1[0].fields.Extra || '';
                          var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                          var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                          var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                         var cardcvc = data.taccountvs1[0].fields.CVC || '';
                         var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                          if ((accounttype === "BANK")) {
                              $('.isBankAccount').removeClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }else if ((accounttype === "CCARD")) {
                              $('.isCreditAccount').removeClass('isNotCreditAccount');
                              $('.isBankAccount').addClass('isNotBankAccount');
                          } else {
                              $('.isBankAccount').addClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }
  
                          $('#edtAccountID').val(accountid);
                          $('#sltAccountType').val(accounttype);
                          $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                          $('#edtAccountName').val(accountname);
                          $('#edtAccountNo').val(accountno);
                          $('#sltTaxCode').val(taxcode);
                          $('#txaAccountDescription').val(accountdesc);
                          $('#edtBankAccountName').val(bankaccountname);
                          $('#edtBSB').val(bankbsb);
                          $('#edtBankAccountNo').val(bankacountno);
                          $('#swiftCode').val(swiftCode);
                          $('#routingNo').val(routingNo);
                          $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                          $('#edtCardNumber').val(cardnumber);
                          $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                          $('#edtCvc').val(cardcvc);
  
                          if(showTrans == 'true'){
                              $('.showOnTransactions').prop('checked', true);
                          }else{
                            $('.showOnTransactions').prop('checked', false);
                          }
  
                          setTimeout(function () {
                              $('#addNewAccount').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
               accountService.getOneAccountByName(accountDataName).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
                 let accBalance = '';
                 $('#add-account-title').text('Edit Account Details');
                 $('#edtAccountName').attr('readonly', true);
                 $('#sltAccountType').attr('readonly', true);
                 $('#sltAccountType').attr('disabled', 'disabled');
                 if (accountTypeList) {
                     for (var h = 0; h < accountTypeList.length; h++) {
  
                         if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                             fullAccountTypeName = accountTypeList[h].description || '';
  
                         }
                     }
  
                 }
  
                  var accountid = data.taccountvs1[0].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                  var accountname = data.taccountvs1[0].fields.AccountName || '';
                  var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[0].fields.Description || '';
                  var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[0].fields.BSB || '';
                  var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[0].fields.Extra || '';
                  var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                  var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                 var cardcvc = data.taccountvs1[0].fields.CVC || '';
                 var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
             });
             $('#addAccountModal').modal('toggle');
           }else{
             $('#selectLineID').val('edtExpenseAccountTermnination');
             $('#accountListModal').modal();
             setTimeout(function () {
               $('#tblAccount_filter .form-control-sm').focus();
               $('#tblAccount_filter .form-control-sm').val('EXP');
               $('#tblAccount_filter .form-control-sm').trigger("input");
                 var datatable = $('#tblSupplierlist').DataTable();
                 datatable.draw();
                 $('#tblAccount_filter .form-control-sm').trigger("input");
             }, 500);
           }
         }
  
  
      });

    $('#edtExpenseAccount').editableSelect().on('click.editable-select', function (e, li) {
        var $earch = $(this);
        var offset = $earch.offset();
        let accountService = new AccountService();
        const accountTypeList = [];
        var accountDataName = e.target.value ||'';
  
        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectLineID').val('edtExpenseAccount');
          $('#accountListModal').modal();
          setTimeout(function () {
              $('#tblAccount_filter .form-control-sm').focus();
              $('#tblAccount_filter .form-control-sm').val('EXP');
              $('#tblAccount_filter .form-control-sm').trigger("input");
              var datatable = $('#tblAccountlist').DataTable();
              datatable.draw();
              $('#tblAccountlist_filter .form-control-sm').trigger("input");
          }, 500);
         }else{
           if(accountDataName.replace(/\s/g, '') != ''){
             getVS1Data('TAccountVS1').then(function (dataObject) {
                 if (dataObject.length == 0) {
                   accountService.getOneAccountByName(accountDataName).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     if (accountTypeList) {
                         for (var h = 0; h < accountTypeList.length; h++) {
  
                             if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                 fullAccountTypeName = accountTypeList[h].description || '';
  
                             }
                         }
  
                     }
  
                      var accountid = data.taccountvs1[0].fields.ID || '';
                      var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                      var accountname = data.taccountvs1[0].fields.AccountName || '';
                      var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                      var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                      var accountdesc = data.taccountvs1[0].fields.Description || '';
                      var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                      var bankbsb = data.taccountvs1[0].fields.BSB || '';
                      var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                      var swiftCode = data.taccountvs1[0].fields.Extra || '';
                      var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                      var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                      var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                     var cardcvc = data.taccountvs1[0].fields.CVC || '';
                     var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                      if ((accounttype === "BANK")) {
                          $('.isBankAccount').removeClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }else if ((accounttype === "CCARD")) {
                          $('.isCreditAccount').removeClass('isNotCreditAccount');
                          $('.isBankAccount').addClass('isNotBankAccount');
                      } else {
                          $('.isBankAccount').addClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }
  
                      $('#edtAccountID').val(accountid);
                      $('#sltAccountType').val(accounttype);
                      $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                      $('#edtAccountName').val(accountname);
                      $('#edtAccountNo').val(accountno);
                      $('#sltTaxCode').val(taxcode);
                      $('#txaAccountDescription').val(accountdesc);
                      $('#edtBankAccountName').val(bankaccountname);
                      $('#edtBSB').val(bankbsb);
                      $('#edtBankAccountNo').val(bankacountno);
                      $('#swiftCode').val(swiftCode);
                      $('#routingNo').val(routingNo);
                      $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                      $('#edtCardNumber').val(cardnumber);
                      $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                      $('#edtCvc').val(cardcvc);
  
                      if(showTrans == 'true'){
                          $('.showOnTransactions').prop('checked', true);
                      }else{
                        $('.showOnTransactions').prop('checked', false);
                      }
  
                      setTimeout(function () {
                          $('#addNewAccount').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.taccountvs1;
                       var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     for (let a = 0; a < data.taccountvs1.length; a++) {
  
                       if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                         added = true;
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
  
  
                  var accountid = data.taccountvs1[a].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                  var accountname = data.taccountvs1[a].fields.AccountName || '';
                  var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[a].fields.Description || '';
                  var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[a].fields.BSB || '';
                  var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[a].fields.Extra || '';
                  var routingNo = data.taccountvs1[a].BankCode || '';
  
                  var showTrans = data.taccountvs1[a].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                  var cardcvc = data.taccountvs1[a].fields.CVC || '';
                  var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
                       }
                     }
                     if(!added) {
                       accountService.getOneAccountByName(accountDataName).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                         let accBalance = '';
                         $('#add-account-title').text('Edit Account Details');
                         $('#edtAccountName').attr('readonly', true);
                         $('#sltAccountType').attr('readonly', true);
                         $('#sltAccountType').attr('disabled', 'disabled');
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
                          var accountid = data.taccountvs1[0].fields.ID || '';
                          var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                          var accountname = data.taccountvs1[0].fields.AccountName || '';
                          var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                          var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                          var accountdesc = data.taccountvs1[0].fields.Description || '';
                          var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                          var bankbsb = data.taccountvs1[0].fields.BSB || '';
                          var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                          var swiftCode = data.taccountvs1[0].fields.Extra || '';
                          var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                          var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                          var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                         var cardcvc = data.taccountvs1[0].fields.CVC || '';
                         var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                          if ((accounttype === "BANK")) {
                              $('.isBankAccount').removeClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }else if ((accounttype === "CCARD")) {
                              $('.isCreditAccount').removeClass('isNotCreditAccount');
                              $('.isBankAccount').addClass('isNotBankAccount');
                          } else {
                              $('.isBankAccount').addClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }
  
                          $('#edtAccountID').val(accountid);
                          $('#sltAccountType').val(accounttype);
                          $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                          $('#edtAccountName').val(accountname);
                          $('#edtAccountNo').val(accountno);
                          $('#sltTaxCode').val(taxcode);
                          $('#txaAccountDescription').val(accountdesc);
                          $('#edtBankAccountName').val(bankaccountname);
                          $('#edtBSB').val(bankbsb);
                          $('#edtBankAccountNo').val(bankacountno);
                          $('#swiftCode').val(swiftCode);
                          $('#routingNo').val(routingNo);
                          $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                          $('#edtCardNumber').val(cardnumber);
                          $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                          $('#edtCvc').val(cardcvc);
  
                          if(showTrans == 'true'){
                              $('.showOnTransactions').prop('checked', true);
                          }else{
                            $('.showOnTransactions').prop('checked', false);
                          }
  
                          setTimeout(function () {
                              $('#addNewAccount').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
               accountService.getOneAccountByName(accountDataName).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
                 let accBalance = '';
                 $('#add-account-title').text('Edit Account Details');
                 $('#edtAccountName').attr('readonly', true);
                 $('#sltAccountType').attr('readonly', true);
                 $('#sltAccountType').attr('disabled', 'disabled');
                 if (accountTypeList) {
                     for (var h = 0; h < accountTypeList.length; h++) {
  
                         if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                             fullAccountTypeName = accountTypeList[h].description || '';
  
                         }
                     }
  
                 }
  
                  var accountid = data.taccountvs1[0].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                  var accountname = data.taccountvs1[0].fields.AccountName || '';
                  var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[0].fields.Description || '';
                  var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[0].fields.BSB || '';
                  var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[0].fields.Extra || '';
                  var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                  var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                 var cardcvc = data.taccountvs1[0].fields.CVC || '';
                 var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
             });
             $('#addAccountModal').modal('toggle');
           }else{
             $('#selectLineID').val('edtExpenseAccount');
             $('#accountListModal').modal();
             setTimeout(function () {
               $('#tblAccount_filter .form-control-sm').focus();
               $('#tblAccount_filter .form-control-sm').val('EXP');
               $('#tblAccount_filter .form-control-sm').trigger("input");
                 var datatable = $('#tblSupplierlist').DataTable();
                 datatable.draw();
                 $('#tblAccount_filter .form-control-sm').trigger("input");
             }, 500);
           }
         }
  
  
      });

    $('#edtExpenseAccountOvertime').editableSelect().on('click.editable-select', function (e, li) {
        var $earch = $(this);
        var offset = $earch.offset();
        let accountService = new AccountService();
        const accountTypeList = [];
        var accountDataName = e.target.value ||'';
  
        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectLineID').val('edtExpenseAccountOvertime');
          $('#accountListModal').modal();
          setTimeout(function () {
              $('#tblAccount_filter .form-control-sm').focus();
              $('#tblAccount_filter .form-control-sm').val('EXP');
              $('#tblAccount_filter .form-control-sm').trigger("input");
              var datatable = $('#tblAccountlist').DataTable();
              datatable.draw();
              $('#tblAccountlist_filter .form-control-sm').trigger("input");
          }, 500);
         }else{
           if(accountDataName.replace(/\s/g, '') != ''){
             getVS1Data('TAccountVS1').then(function (dataObject) {
                 if (dataObject.length == 0) {
                   accountService.getOneAccountByName(accountDataName).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     if (accountTypeList) {
                         for (var h = 0; h < accountTypeList.length; h++) {
  
                             if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                 fullAccountTypeName = accountTypeList[h].description || '';
  
                             }
                         }
  
                     }
  
                      var accountid = data.taccountvs1[0].fields.ID || '';
                      var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                      var accountname = data.taccountvs1[0].fields.AccountName || '';
                      var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                      var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                      var accountdesc = data.taccountvs1[0].fields.Description || '';
                      var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                      var bankbsb = data.taccountvs1[0].fields.BSB || '';
                      var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                      var swiftCode = data.taccountvs1[0].fields.Extra || '';
                      var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                      var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                      var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                     var cardcvc = data.taccountvs1[0].fields.CVC || '';
                     var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                      if ((accounttype === "BANK")) {
                          $('.isBankAccount').removeClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }else if ((accounttype === "CCARD")) {
                          $('.isCreditAccount').removeClass('isNotCreditAccount');
                          $('.isBankAccount').addClass('isNotBankAccount');
                      } else {
                          $('.isBankAccount').addClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }
  
                      $('#edtAccountID').val(accountid);
                      $('#sltAccountType').val(accounttype);
                      $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                      $('#edtAccountName').val(accountname);
                      $('#edtAccountNo').val(accountno);
                      $('#sltTaxCode').val(taxcode);
                      $('#txaAccountDescription').val(accountdesc);
                      $('#edtBankAccountName').val(bankaccountname);
                      $('#edtBSB').val(bankbsb);
                      $('#edtBankAccountNo').val(bankacountno);
                      $('#swiftCode').val(swiftCode);
                      $('#routingNo').val(routingNo);
                      $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                      $('#edtCardNumber').val(cardnumber);
                      $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                      $('#edtCvc').val(cardcvc);
  
                      if(showTrans == 'true'){
                          $('.showOnTransactions').prop('checked', true);
                      }else{
                        $('.showOnTransactions').prop('checked', false);
                      }
  
                      setTimeout(function () {
                          $('#addNewAccount').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.taccountvs1;
                    var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     for (let a = 0; a < data.taccountvs1.length; a++) {
  
                       if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                         added = true;
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
                                   
  
                                 }
                             }
  
                         }
  
  
  
                  var accountid = data.taccountvs1[a].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                  var accountname = data.taccountvs1[a].fields.AccountName || '';
                  var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[a].fields.Description || '';
                  var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[a].fields.BSB || '';
                  var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[a].fields.Extra || '';
                  var routingNo = data.taccountvs1[a].BankCode || '';
  
                  var showTrans = data.taccountvs1[a].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                  var cardcvc = data.taccountvs1[a].fields.CVC || '';
                  var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
                       }
                     }
                     if(!added) {
                       accountService.getOneAccountByName(accountDataName).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                         let accBalance = '';
                         $('#add-account-title').text('Edit Account Details');
                         $('#edtAccountName').attr('readonly', true);
                         $('#sltAccountType').attr('readonly', true);
                         $('#sltAccountType').attr('disabled', 'disabled');
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }

                       
  
                          var accountid = data.taccountvs1[0].fields.ID || '';
                          var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                          var accountname = data.taccountvs1[0].fields.AccountName || '';
                          var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                          var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                          var accountdesc = data.taccountvs1[0].fields.Description || '';
                          var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                          var bankbsb = data.taccountvs1[0].fields.BSB || '';
                          var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                          var swiftCode = data.taccountvs1[0].fields.Extra || '';
                          var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                          var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                          var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                         var cardcvc = data.taccountvs1[0].fields.CVC || '';
                         var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                          if ((accounttype === "BANK")) {
                              $('.isBankAccount').removeClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }else if ((accounttype === "CCARD")) {
                              $('.isCreditAccount').removeClass('isNotCreditAccount');
                              $('.isBankAccount').addClass('isNotBankAccount');
                          } else {
                              $('.isBankAccount').addClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }
  
                          $('#edtAccountID').val(accountid);
                          $('#sltAccountType').val(accounttype);
                          $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                          $('#edtAccountName').val(accountname);
                          $('#edtAccountNo').val(accountno);
                          $('#sltTaxCode').val(taxcode);
                          $('#txaAccountDescription').val(accountdesc);
                          $('#edtBankAccountName').val(bankaccountname);
                          $('#edtBSB').val(bankbsb);
                          $('#edtBankAccountNo').val(bankacountno);
                          $('#swiftCode').val(swiftCode);
                          $('#routingNo').val(routingNo);
                          $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                          $('#edtCardNumber').val(cardnumber);
                          $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                          $('#edtCvc').val(cardcvc);
  
                          if(showTrans == 'true'){
                              $('.showOnTransactions').prop('checked', true);
                          }else{
                            $('.showOnTransactions').prop('checked', false);
                          }
  
                          setTimeout(function () {
                              $('#addNewAccount').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
               accountService.getOneAccountByName(accountDataName).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
                 let accBalance = '';
                 $('#add-account-title').text('Edit Account Details');
                 $('#edtAccountName').attr('readonly', true);
                 $('#sltAccountType').attr('readonly', true);
                 $('#sltAccountType').attr('disabled', 'disabled');
                 if (accountTypeList) {
                     for (var h = 0; h < accountTypeList.length; h++) {
  
                         if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                             fullAccountTypeName = accountTypeList[h].description || '';
  
                         }
                     }
  
                 }
  
                  var accountid = data.taccountvs1[0].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                  var accountname = data.taccountvs1[0].fields.AccountName || '';
                  var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[0].fields.Description || '';
                  var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[0].fields.BSB || '';
                  var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[0].fields.Extra || '';
                  var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                  var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                 var cardcvc = data.taccountvs1[0].fields.CVC || '';
                 var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
             });
             $('#addAccountModal').modal('toggle');
           }else{
             $('#selectLineID').val('edtExpenseAccountOvertime');
             $('#accountListModal').modal();
             setTimeout(function () {
               $('#tblAccount_filter .form-control-sm').focus();
               $('#tblAccount_filter .form-control-sm').val('EXP');
               $('#tblAccount_filter .form-control-sm').trigger("input");
                 var datatable = $('#tblSupplierlist').DataTable();
                 datatable.draw();
                 $('#tblAccount_filter .form-control-sm').trigger("input");
             }, 500);
           }
         }
  
  
      });

    $('#edtExpenseAccountLumpSumE').editableSelect().on('click.editable-select', function (e, li) {
        var $earch = $(this);
        var offset = $earch.offset();
        let accountService = new AccountService();
        const accountTypeList = [];
        var accountDataName = e.target.value ||'';
  
        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectLineID').val('edtExpenseAccountLumpSumE');
          $('#accountListModal').modal();
          setTimeout(function () {
              $('#tblAccount_filter .form-control-sm').focus();
              $('#tblAccount_filter .form-control-sm').val('EXP');
              $('#tblAccount_filter .form-control-sm').trigger("input");
              var datatable = $('#tblAccountlist').DataTable();
              datatable.draw();
              $('#tblAccountlist_filter .form-control-sm').trigger("input");
          }, 500);
         }else{
           if(accountDataName.replace(/\s/g, '') != ''){
             getVS1Data('TAccountVS1').then(function (dataObject) {
                 if (dataObject.length == 0) {
                   accountService.getOneAccountByName(accountDataName).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     if (accountTypeList) {
                         for (var h = 0; h < accountTypeList.length; h++) {
  
                             if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                 fullAccountTypeName = accountTypeList[h].description || '';
  
                             }
                         }
  
                     }
  
                      var accountid = data.taccountvs1[0].fields.ID || '';
                      var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                      var accountname = data.taccountvs1[0].fields.AccountName || '';
                      var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                      var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                      var accountdesc = data.taccountvs1[0].fields.Description || '';
                      var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                      var bankbsb = data.taccountvs1[0].fields.BSB || '';
                      var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                      var swiftCode = data.taccountvs1[0].fields.Extra || '';
                      var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                      var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                      var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                     var cardcvc = data.taccountvs1[0].fields.CVC || '';
                     var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                      if ((accounttype === "BANK")) {
                          $('.isBankAccount').removeClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }else if ((accounttype === "CCARD")) {
                          $('.isCreditAccount').removeClass('isNotCreditAccount');
                          $('.isBankAccount').addClass('isNotBankAccount');
                      } else {
                          $('.isBankAccount').addClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }
  
                      $('#edtAccountID').val(accountid);
                      $('#sltAccountType').val(accounttype);
                      $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                      $('#edtAccountName').val(accountname);
                      $('#edtAccountNo').val(accountno);
                      $('#sltTaxCode').val(taxcode);
                      $('#txaAccountDescription').val(accountdesc);
                      $('#edtBankAccountName').val(bankaccountname);
                      $('#edtBSB').val(bankbsb);
                      $('#edtBankAccountNo').val(bankacountno);
                      $('#swiftCode').val(swiftCode);
                      $('#routingNo').val(routingNo);
                      $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                      $('#edtCardNumber').val(cardnumber);
                      $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                      $('#edtCvc').val(cardcvc);
  
                      if(showTrans == 'true'){
                          $('.showOnTransactions').prop('checked', true);
                      }else{
                        $('.showOnTransactions').prop('checked', false);
                      }
  
                      setTimeout(function () {
                          $('#addNewAccount').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.taccountvs1;
                       var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     for (let a = 0; a < data.taccountvs1.length; a++) {
  
                       if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                         added = true;
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
  
  
                  var accountid = data.taccountvs1[a].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                  var accountname = data.taccountvs1[a].fields.AccountName || '';
                  var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[a].fields.Description || '';
                  var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[a].fields.BSB || '';
                  var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[a].fields.Extra || '';
                  var routingNo = data.taccountvs1[a].BankCode || '';
  
                  var showTrans = data.taccountvs1[a].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                  var cardcvc = data.taccountvs1[a].fields.CVC || '';
                  var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
                       }
                     }
                     if(!added) {
                       accountService.getOneAccountByName(accountDataName).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                         let accBalance = '';
                         $('#add-account-title').text('Edit Account Details');
                         $('#edtAccountName').attr('readonly', true);
                         $('#sltAccountType').attr('readonly', true);
                         $('#sltAccountType').attr('disabled', 'disabled');
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
                          var accountid = data.taccountvs1[0].fields.ID || '';
                          var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                          var accountname = data.taccountvs1[0].fields.AccountName || '';
                          var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                          var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                          var accountdesc = data.taccountvs1[0].fields.Description || '';
                          var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                          var bankbsb = data.taccountvs1[0].fields.BSB || '';
                          var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                          var swiftCode = data.taccountvs1[0].fields.Extra || '';
                          var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                          var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                          var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                         var cardcvc = data.taccountvs1[0].fields.CVC || '';
                         var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                          if ((accounttype === "BANK")) {
                              $('.isBankAccount').removeClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }else if ((accounttype === "CCARD")) {
                              $('.isCreditAccount').removeClass('isNotCreditAccount');
                              $('.isBankAccount').addClass('isNotBankAccount');
                          } else {
                              $('.isBankAccount').addClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }
  
                          $('#edtAccountID').val(accountid);
                          $('#sltAccountType').val(accounttype);
                          $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                          $('#edtAccountName').val(accountname);
                          $('#edtAccountNo').val(accountno);
                          $('#sltTaxCode').val(taxcode);
                          $('#txaAccountDescription').val(accountdesc);
                          $('#edtBankAccountName').val(bankaccountname);
                          $('#edtBSB').val(bankbsb);
                          $('#edtBankAccountNo').val(bankacountno);
                          $('#swiftCode').val(swiftCode);
                          $('#routingNo').val(routingNo);
                          $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                          $('#edtCardNumber').val(cardnumber);
                          $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                          $('#edtCvc').val(cardcvc);
  
                          if(showTrans == 'true'){
                              $('.showOnTransactions').prop('checked', true);
                          }else{
                            $('.showOnTransactions').prop('checked', false);
                          }
  
                          setTimeout(function () {
                              $('#addNewAccount').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
               accountService.getOneAccountByName(accountDataName).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
                 let accBalance = '';
                 $('#add-account-title').text('Edit Account Details');
                 $('#edtAccountName').attr('readonly', true);
                 $('#sltAccountType').attr('readonly', true);
                 $('#sltAccountType').attr('disabled', 'disabled');
                 if (accountTypeList) {
                     for (var h = 0; h < accountTypeList.length; h++) {
  
                         if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                             fullAccountTypeName = accountTypeList[h].description || '';
  
                         }
                     }
  
                 }
  
                  var accountid = data.taccountvs1[0].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                  var accountname = data.taccountvs1[0].fields.AccountName || '';
                  var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[0].fields.Description || '';
                  var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[0].fields.BSB || '';
                  var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[0].fields.Extra || '';
                  var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                  var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                 var cardcvc = data.taccountvs1[0].fields.CVC || '';
                 var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
             });
             $('#addAccountModal').modal('toggle');
           }else{
             $('#selectLineID').val('edtExpenseAccountLumpSumE');
             $('#accountListModal').modal();
             setTimeout(function () {
               $('#tblAccount_filter .form-control-sm').focus();
               $('#tblAccount_filter .form-control-sm').val('EXP');
               $('#tblAccount_filter .form-control-sm').trigger("input");
                 var datatable = $('#tblSupplierlist').DataTable();
                 datatable.draw();
                 $('#tblAccount_filter .form-control-sm').trigger("input");
             }, 500);
           }
         }
  
  
      });

     $('#edtExpenseAccountBonusesCommissions').editableSelect().on('click.editable-select', function (e, li) {
        var $earch = $(this);
        var offset = $earch.offset();
        let accountService = new AccountService();
        const accountTypeList = [];
        var accountDataName = e.target.value ||'';
  
        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectLineID').val('edtExpenseAccountBonusesCommissions');
          $('#accountListModal').modal();
          setTimeout(function () {
              $('#tblAccount_filter .form-control-sm').focus();
              $('#tblAccount_filter .form-control-sm').val('EXP');
              $('#tblAccount_filter .form-control-sm').trigger("input");
              var datatable = $('#tblAccountlist').DataTable();
              datatable.draw();
              $('#tblAccountlist_filter .form-control-sm').trigger("input");
          }, 500);
         }else{
           if(accountDataName.replace(/\s/g, '') != ''){
             getVS1Data('TAccountVS1').then(function (dataObject) {
                 if (dataObject.length == 0) {
                   accountService.getOneAccountByName(accountDataName).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     if (accountTypeList) {
                         for (var h = 0; h < accountTypeList.length; h++) {
  
                             if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                 fullAccountTypeName = accountTypeList[h].description || '';
  
                             }
                         }
  
                     }
  
                      var accountid = data.taccountvs1[0].fields.ID || '';
                      var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                      var accountname = data.taccountvs1[0].fields.AccountName || '';
                      var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                      var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                      var accountdesc = data.taccountvs1[0].fields.Description || '';
                      var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                      var bankbsb = data.taccountvs1[0].fields.BSB || '';
                      var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                      var swiftCode = data.taccountvs1[0].fields.Extra || '';
                      var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                      var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                      var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                     var cardcvc = data.taccountvs1[0].fields.CVC || '';
                     var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                      if ((accounttype === "BANK")) {
                          $('.isBankAccount').removeClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }else if ((accounttype === "CCARD")) {
                          $('.isCreditAccount').removeClass('isNotCreditAccount');
                          $('.isBankAccount').addClass('isNotBankAccount');
                      } else {
                          $('.isBankAccount').addClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }
  
                      $('#edtAccountID').val(accountid);
                      $('#sltAccountType').val(accounttype);
                      $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                      $('#edtAccountName').val(accountname);
                      $('#edtAccountNo').val(accountno);
                      $('#sltTaxCode').val(taxcode);
                      $('#txaAccountDescription').val(accountdesc);
                      $('#edtBankAccountName').val(bankaccountname);
                      $('#edtBSB').val(bankbsb);
                      $('#edtBankAccountNo').val(bankacountno);
                      $('#swiftCode').val(swiftCode);
                      $('#routingNo').val(routingNo);
                      $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                      $('#edtCardNumber').val(cardnumber);
                      $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                      $('#edtCvc').val(cardcvc);
  
                      if(showTrans == 'true'){
                          $('.showOnTransactions').prop('checked', true);
                      }else{
                        $('.showOnTransactions').prop('checked', false);
                      }
  
                      setTimeout(function () {
                          $('#addNewAccount').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.taccountvs1;
                       var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     for (let a = 0; a < data.taccountvs1.length; a++) {
  
                       if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                         added = true;
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
  
  
                  var accountid = data.taccountvs1[a].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                  var accountname = data.taccountvs1[a].fields.AccountName || '';
                  var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[a].fields.Description || '';
                  var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[a].fields.BSB || '';
                  var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[a].fields.Extra || '';
                  var routingNo = data.taccountvs1[a].BankCode || '';
  
                  var showTrans = data.taccountvs1[a].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                  var cardcvc = data.taccountvs1[a].fields.CVC || '';
                  var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
                       }
                     }
                     if(!added) {
                       accountService.getOneAccountByName(accountDataName).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                         let accBalance = '';
                         $('#add-account-title').text('Edit Account Details');
                         $('#edtAccountName').attr('readonly', true);
                         $('#sltAccountType').attr('readonly', true);
                         $('#sltAccountType').attr('disabled', 'disabled');
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
                          var accountid = data.taccountvs1[0].fields.ID || '';
                          var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                          var accountname = data.taccountvs1[0].fields.AccountName || '';
                          var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                          var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                          var accountdesc = data.taccountvs1[0].fields.Description || '';
                          var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                          var bankbsb = data.taccountvs1[0].fields.BSB || '';
                          var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                          var swiftCode = data.taccountvs1[0].fields.Extra || '';
                          var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                          var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                          var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                         var cardcvc = data.taccountvs1[0].fields.CVC || '';
                         var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                          if ((accounttype === "BANK")) {
                              $('.isBankAccount').removeClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }else if ((accounttype === "CCARD")) {
                              $('.isCreditAccount').removeClass('isNotCreditAccount');
                              $('.isBankAccount').addClass('isNotBankAccount');
                          } else {
                              $('.isBankAccount').addClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }
  
                          $('#edtAccountID').val(accountid);
                          $('#sltAccountType').val(accounttype);
                          $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                          $('#edtAccountName').val(accountname);
                          $('#edtAccountNo').val(accountno);
                          $('#sltTaxCode').val(taxcode);
                          $('#txaAccountDescription').val(accountdesc);
                          $('#edtBankAccountName').val(bankaccountname);
                          $('#edtBSB').val(bankbsb);
                          $('#edtBankAccountNo').val(bankacountno);
                          $('#swiftCode').val(swiftCode);
                          $('#routingNo').val(routingNo);
                          $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                          $('#edtCardNumber').val(cardnumber);
                          $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                          $('#edtCvc').val(cardcvc);
  
                          if(showTrans == 'true'){
                              $('.showOnTransactions').prop('checked', true);
                          }else{
                            $('.showOnTransactions').prop('checked', false);
                          }
  
                          setTimeout(function () {
                              $('#addNewAccount').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
               accountService.getOneAccountByName(accountDataName).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
                 let accBalance = '';
                 $('#add-account-title').text('Edit Account Details');
                 $('#edtAccountName').attr('readonly', true);
                 $('#sltAccountType').attr('readonly', true);
                 $('#sltAccountType').attr('disabled', 'disabled');
                 if (accountTypeList) {
                     for (var h = 0; h < accountTypeList.length; h++) {
  
                         if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                             fullAccountTypeName = accountTypeList[h].description || '';
  
                         }
                     }
  
                 }
  
                  var accountid = data.taccountvs1[0].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                  var accountname = data.taccountvs1[0].fields.AccountName || '';
                  var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[0].fields.Description || '';
                  var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[0].fields.BSB || '';
                  var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[0].fields.Extra || '';
                  var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                  var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                 var cardcvc = data.taccountvs1[0].fields.CVC || '';
                 var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
             });
             $('#addAccountModal').modal('toggle');
           }else{
             $('#selectLineID').val('edtExpenseAccountBonusesCommissions');
             $('#accountListModal').modal();
             setTimeout(function () {
               $('#tblAccount_filter .form-control-sm').focus();
               $('#tblAccount_filter .form-control-sm').val('EXP');
               $('#tblAccount_filter .form-control-sm').trigger("input");
                 var datatable = $('#tblSupplierlist').DataTable();
                 datatable.draw();
                 $('#tblAccount_filter .form-control-sm').trigger("input");
             }, 500);
           }
         }
  
  
      });

    $('#edtExpenseAccountLumpSumW').editableSelect().on('click.editable-select', function (e, li) {
        var $earch = $(this);
        var offset = $earch.offset();
        let accountService = new AccountService();
        const accountTypeList = [];
        var   accountDataName = e.target.value ||'';
  
        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectLineID').val('edtExpenseAccountLumpSumW');
          $('#accountListModal').modal();
          setTimeout(function () {
              $('#tblAccount_filter .form-control-sm').focus();
              $('#tblAccount_filter .form-control-sm').val('EXP');
              $('#tblAccount_filter .form-control-sm').trigger("input");
              var datatable = $('#tblAccountlist').DataTable();
              datatable.draw();
              $('#tblAccountlist_filter .form-control-sm').trigger("input");
          }, 500);
         }else{
           if(accountDataName.replace(/\s/g, '') != ''){
             getVS1Data('TAccountVS1').then(function (dataObject) {
                 if (dataObject.length == 0) {
                   accountService.getOneAccountByName(accountDataName).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     if (accountTypeList) {
                         for (var h = 0; h < accountTypeList.length; h++) {
  
                             if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                 fullAccountTypeName = accountTypeList[h].description || '';
  
                             }
                         }
  
                     }
  
                      var accountid = data.taccountvs1[0].fields.ID || '';
                      var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                      var accountname = data.taccountvs1[0].fields.AccountName || '';
                      var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                      var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                      var accountdesc = data.taccountvs1[0].fields.Description || '';
                      var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                      var bankbsb = data.taccountvs1[0].fields.BSB || '';
                      var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                      var swiftCode = data.taccountvs1[0].fields.Extra || '';
                      var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                      var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                      var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                     var cardcvc = data.taccountvs1[0].fields.CVC || '';
                     var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                      if ((accounttype === "BANK")) {
                          $('.isBankAccount').removeClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }else if ((accounttype === "CCARD")) {
                          $('.isCreditAccount').removeClass('isNotCreditAccount');
                          $('.isBankAccount').addClass('isNotBankAccount');
                      } else {
                          $('.isBankAccount').addClass('isNotBankAccount');
                          $('.isCreditAccount').addClass('isNotCreditAccount');
                      }
  
                      $('#edtAccountID').val(accountid);
                      $('#sltAccountType').val(accounttype);
                      $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                      $('#edtAccountName').val(accountname);
                      $('#edtAccountNo').val(accountno);
                      $('#sltTaxCode').val(taxcode);
                      $('#txaAccountDescription').val(accountdesc);
                      $('#edtBankAccountName').val(bankaccountname);
                      $('#edtBSB').val(bankbsb);
                      $('#edtBankAccountNo').val(bankacountno);
                      $('#swiftCode').val(swiftCode);
                      $('#routingNo').val(routingNo);
                      $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                      $('#edtCardNumber').val(cardnumber);
                      $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                      $('#edtCvc').val(cardcvc);
  
                      if(showTrans == 'true'){
                          $('.showOnTransactions').prop('checked', true);
                      }else{
                        $('.showOnTransactions').prop('checked', false);
                      }
  
                      setTimeout(function () {
                          $('#addNewAccount').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.taccountvs1;
                       var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullAccountTypeName = '';
                     let accBalance = '';
                     $('#add-account-title').text('Edit Account Details');
                     $('#edtAccountName').attr('readonly', true);
                     $('#sltAccountType').attr('readonly', true);
                     $('#sltAccountType').attr('disabled', 'disabled');
                     for (let a = 0; a < data.taccountvs1.length; a++) {
  
                       if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                         added = true;
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
  
  
                  var accountid = data.taccountvs1[a].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                  var accountname = data.taccountvs1[a].fields.AccountName || '';
                  var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[a].fields.Description || '';
                  var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[a].fields.BSB || '';
                  var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[a].fields.Extra || '';
                  var routingNo = data.taccountvs1[a].BankCode || '';
  
                  var showTrans = data.taccountvs1[a].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                  var cardcvc = data.taccountvs1[a].fields.CVC || '';
                  var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
                       }
                     }
                     if(!added) {
                       accountService.getOneAccountByName(accountDataName).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                         let accBalance = '';
                         $('#add-account-title').text('Edit Account Details');
                         $('#edtAccountName').attr('readonly', true);
                         $('#sltAccountType').attr('readonly', true);
                         $('#sltAccountType').attr('disabled', 'disabled');
                         if (accountTypeList) {
                             for (var h = 0; h < accountTypeList.length; h++) {
  
                                 if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                                     fullAccountTypeName = accountTypeList[h].description || '';
  
                                 }
                             }
  
                         }
  
                          var accountid = data.taccountvs1[0].fields.ID || '';
                          var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                          var accountname = data.taccountvs1[0].fields.AccountName || '';
                          var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                          var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                          var accountdesc = data.taccountvs1[0].fields.Description || '';
                          var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                          var bankbsb = data.taccountvs1[0].fields.BSB || '';
                          var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                          var swiftCode = data.taccountvs1[0].fields.Extra || '';
                          var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                          var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                          var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                         var cardcvc = data.taccountvs1[0].fields.CVC || '';
                         var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                          if ((accounttype === "BANK")) {
                              $('.isBankAccount').removeClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }else if ((accounttype === "CCARD")) {
                              $('.isCreditAccount').removeClass('isNotCreditAccount');
                              $('.isBankAccount').addClass('isNotBankAccount');
                          } else {
                              $('.isBankAccount').addClass('isNotBankAccount');
                              $('.isCreditAccount').addClass('isNotCreditAccount');
                          }
  
                          $('#edtAccountID').val(accountid);
                          $('#sltAccountType').val(accounttype);
                          $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                          $('#edtAccountName').val(accountname);
                          $('#edtAccountNo').val(accountno);
                          $('#sltTaxCode').val(taxcode);
                          $('#txaAccountDescription').val(accountdesc);
                          $('#edtBankAccountName').val(bankaccountname);
                          $('#edtBSB').val(bankbsb);
                          $('#edtBankAccountNo').val(bankacountno);
                          $('#swiftCode').val(swiftCode);
                          $('#routingNo').val(routingNo);
                          $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                          $('#edtCardNumber').val(cardnumber);
                          $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                          $('#edtCvc').val(cardcvc);
  
                          if(showTrans == 'true'){
                              $('.showOnTransactions').prop('checked', true);
                          }else{
                            $('.showOnTransactions').prop('checked', false);
                          }
  
                          setTimeout(function () {
                              $('#addNewAccount').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
               accountService.getOneAccountByName(accountDataName).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
                 let accBalance = '';
                 $('#add-account-title').text('Edit Account Details');
                 $('#edtAccountName').attr('readonly', true);
                 $('#sltAccountType').attr('readonly', true);
                 $('#sltAccountType').attr('disabled', 'disabled');
                 if (accountTypeList) {
                     for (var h = 0; h < accountTypeList.length; h++) {
  
                         if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {
  
                             fullAccountTypeName = accountTypeList[h].description || '';
  
                         }
                     }
  
                 }
  
                  var accountid = data.taccountvs1[0].fields.ID || '';
                  var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                  var accountname = data.taccountvs1[0].fields.AccountName || '';
                  var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                  var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                  var accountdesc = data.taccountvs1[0].fields.Description || '';
                  var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                  var bankbsb = data.taccountvs1[0].fields.BSB || '';
                  var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';
  
                  var swiftCode = data.taccountvs1[0].fields.Extra || '';
                  var routingNo = data.taccountvs1[0].fields.BankCode || '';
  
                  var showTrans = data.taccountvs1[0].fields.IsHeader || false;
  
                  var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                 var cardcvc = data.taccountvs1[0].fields.CVC || '';
                 var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';
  
                  if ((accounttype === "BANK")) {
                      $('.isBankAccount').removeClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }else if ((accounttype === "CCARD")) {
                      $('.isCreditAccount').removeClass('isNotCreditAccount');
                      $('.isBankAccount').addClass('isNotBankAccount');
                  } else {
                      $('.isBankAccount').addClass('isNotBankAccount');
                      $('.isCreditAccount').addClass('isNotCreditAccount');
                  }
  
                  $('#edtAccountID').val(accountid);
                  $('#sltAccountType').val(accounttype);
                  $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                  $('#edtAccountName').val(accountname);
                  $('#edtAccountNo').val(accountno);
                  $('#sltTaxCode').val(taxcode);
                  $('#txaAccountDescription').val(accountdesc);
                  $('#edtBankAccountName').val(bankaccountname);
                  $('#edtBSB').val(bankbsb);
                  $('#edtBankAccountNo').val(bankacountno);
                  $('#swiftCode').val(swiftCode);
                  $('#routingNo').val(routingNo);
                  $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');
  
                  $('#edtCardNumber').val(cardnumber);
                  $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                  $('#edtCvc').val(cardcvc);
  
                  if(showTrans == 'true'){
                      $('.showOnTransactions').prop('checked', true);
                  }else{
                    $('.showOnTransactions').prop('checked', false);
                  }
  
                  setTimeout(function () {
                      $('#addNewAccount').modal('show');
                  }, 500);
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
             });
             $('#addAccountModal').modal('toggle');
           }else{
             $('#selectLineID').val('edtExpenseAccountLumpSumW');
             $('#accountListModal').modal();
             setTimeout(function () {
               $('#tblAccount_filter .form-control-sm').focus();
               $('#tblAccount_filter .form-control-sm').val('EXP');
               $('#tblAccount_filter .form-control-sm').trigger("input");
                 var datatable = $('#tblSupplierlist').DataTable();
                 datatable.draw();
                 $('#tblAccount_filter .form-control-sm').trigger("input");
             }, 500);
           }
         }
  
  
      });
      
    
     $('#edtDeductionAccount').editableSelect().on('click.editable-select', function (e, li) {
        var $earch = $(this);
        var offset = $earch.offset();
        let accountService = new AccountService();
        const accountTypeList = [];
        var accountDataName = e.target.value ||'';

         if(e.pageX > offset.left + $earch.width() - 8) { 
           $('#selectLineID').val('edtDeductionAccount');
           $('#accountListModal').modal();
           setTimeout(function () {
               $('#tblAccount_filter .form-control-sm').focus();
               $('#tblAccount_filter .form-control-sm').val('');
               $('#tblAccount_filter .form-control-sm').trigger("input");
               var datatable = $('#tblAccountlist').DataTable();
               datatable.draw();
               $('#tblAccountlist_filter .form-control-sm').trigger("input");
            }, 500);
         }else{
             if(accountDataName.replace(/\s/g, '') != ''){
              getVS1Data('TAccountVS1').then(function (dataObject) {
                 if (dataObject.length == 0) {
                      accountService.getOneAccountByName(accountDataName).then(function (data) {
                      let lineItems = [];
                      let lineItemObj = {};
                      let fullAccountTypeName = '';
                      let accBalance = '';
                      $('#add-account-title').text('Edit Account Details');
                      $('#edtAccountName').attr('readonly', true);
                      $('#sltAccountType').attr('readonly', true);
                      $('#sltAccountType').attr('disabled', 'disabled');
                      if (accountTypeList) {
                       for (var h = 0; h < accountTypeList.length; h++) {

                           if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {

                               fullAccountTypeName = accountTypeList[h].description || '';

                           }
                       }

                      }

                    var accountid = data.taccountvs1[0].fields.ID || '';
                    var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                    var accountname = data.taccountvs1[0].fields.AccountName || '';
                    var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                    var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                    var accountdesc = data.taccountvs1[0].fields.Description || '';
                    var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                    var bankbsb = data.taccountvs1[0].fields.BSB || '';
                    var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';

                    var swiftCode = data.taccountvs1[0].fields.Extra || '';
                    var routingNo = data.taccountvs1[0].fields.BankCode || '';

                    var showTrans = data.taccountvs1[0].fields.IsHeader || false;

                    var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                    var cardcvc = data.taccountvs1[0].fields.CVC || '';
                    var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';

                    if ((accounttype === "BANK")) {
                        $('.isBankAccount').removeClass('isNotBankAccount');
                        $('.isCreditAccount').addClass('isNotCreditAccount');
                    }else if ((accounttype === "CCARD")) {
                        $('.isCreditAccount').removeClass('isNotCreditAccount');
                        $('.isBankAccount').addClass('isNotBankAccount');
                    } else {
                        $('.isBankAccount').addClass('isNotBankAccount');
                        $('.isCreditAccount').addClass('isNotCreditAccount');
                    }

                    $('#edtAccountID').val(accountid);
                    $('#sltAccountType').val(accounttype);
                    $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                    $('#edtAccountName').val(accountname);
                    $('#edtAccountNo').val(accountno);
                    $('#sltTaxCode').val(taxcode);
                    $('#txaAccountDescription').val(accountdesc);
                    $('#edtBankAccountName').val(bankaccountname);
                    $('#edtBSB').val(bankbsb);
                    $('#edtBankAccountNo').val(bankacountno);
                    $('#swiftCode').val(swiftCode);
                    $('#routingNo').val(routingNo);
                    $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');

                    $('#edtCardNumber').val(cardnumber);
                    $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                    $('#edtCvc').val(cardcvc);

                    if(showTrans == 'true'){
                        $('.showOnTransactions').prop('checked', true);
                    }else{
                      $('.showOnTransactions').prop('checked', false);
                    }

                    setTimeout(function () {
                        $('#addNewAccount').modal('show');
                    }, 500);

                 }).catch(function (err) {
                     $('.fullScreenSpin').css('display','none');
                 });
               } else {
                   let data = JSON.parse(dataObject[0].data);
                   let useData = data.taccountvs1;
                     var added=false;
                   let lineItems = [];
                   let lineItemObj = {};
                   let fullAccountTypeName = '';
                   let accBalance = '';
                   $('#add-account-title').text('Edit Account Details');
                   $('#edtAccountName').attr('readonly', true);
                   $('#sltAccountType').attr('readonly', true);
                   $('#sltAccountType').attr('disabled', 'disabled');
                   for (let a = 0; a < data.taccountvs1.length; a++) {

                     if((data.taccountvs1[a].fields.AccountName) === accountDataName){
                       added = true;
                       if (accountTypeList) {
                           for (var h = 0; h < accountTypeList.length; h++) {

                               if (data.taccountvs1[a].fields.AccountTypeName === accountTypeList[h].accounttypename) {

                                   fullAccountTypeName = accountTypeList[h].description || '';

                               }
                           }

                       }



                var accountid = data.taccountvs1[a].fields.ID || '';
                var accounttype = fullAccountTypeName || data.taccountvs1[a].fields.AccountTypeName;
                var accountname = data.taccountvs1[a].fields.AccountName || '';
                var accountno = data.taccountvs1[a].fields.AccountNumber || '';
                var taxcode = data.taccountvs1[a].fields.TaxCode || '';
                var accountdesc = data.taccountvs1[a].fields.Description || '';
                var bankaccountname = data.taccountvs1[a].fields.BankAccountName || '';
                var bankbsb = data.taccountvs1[a].fields.BSB || '';
                var bankacountno = data.taccountvs1[a].fields.BankAccountNumber || '';

                var swiftCode = data.taccountvs1[a].fields.Extra || '';
                var routingNo = data.taccountvs1[a].BankCode || '';

                var showTrans = data.taccountvs1[a].fields.IsHeader || false;

                var cardnumber = data.taccountvs1[a].fields.CarNumber || '';
                var cardcvc = data.taccountvs1[a].fields.CVC || '';
                var cardexpiry = data.taccountvs1[a].fields.ExpiryDate || '';

                if ((accounttype === "BANK")) {
                    $('.isBankAccount').removeClass('isNotBankAccount');
                    $('.isCreditAccount').addClass('isNotCreditAccount');
                }else if ((accounttype === "CCARD")) {
                    $('.isCreditAccount').removeClass('isNotCreditAccount');
                    $('.isBankAccount').addClass('isNotBankAccount');
                } else {
                    $('.isBankAccount').addClass('isNotBankAccount');
                    $('.isCreditAccount').addClass('isNotCreditAccount');
                }

                $('#edtAccountID').val(accountid);
                $('#sltAccountType').val(accounttype);
                $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                $('#edtAccountName').val(accountname);
                $('#edtAccountNo').val(accountno);
                $('#sltTaxCode').val(taxcode);
                $('#txaAccountDescription').val(accountdesc);
                $('#edtBankAccountName').val(bankaccountname);
                $('#edtBSB').val(bankbsb);
                $('#edtBankAccountNo').val(bankacountno);
                $('#swiftCode').val(swiftCode);
                $('#routingNo').val(routingNo);
                $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');

                $('#edtCardNumber').val(cardnumber);
                $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                $('#edtCvc').val(cardcvc);

                if(showTrans == 'true'){
                    $('.showOnTransactions').prop('checked', true);
                }else{
                  $('.showOnTransactions').prop('checked', false);
                }

                setTimeout(function () {
                    $('#addNewAccount').modal('show');
                }, 500);

                     }
                   }
                   if(!added) {
                     accountService.getOneAccountByName(accountDataName).then(function (data) {
                       let lineItems = [];
                       let lineItemObj = {};
                       let fullAccountTypeName = '';
                       let accBalance = '';
                       $('#add-account-title').text('Edit Account Details');
                       $('#edtAccountName').attr('readonly', true);
                       $('#sltAccountType').attr('readonly', true);
                       $('#sltAccountType').attr('disabled', 'disabled');
                       if (accountTypeList) {
                           for (var h = 0; h < accountTypeList.length; h++) {

                               if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {

                                   fullAccountTypeName = accountTypeList[h].description || '';

                               }
                           }

                       }

                        var accountid = data.taccountvs1[0].fields.ID || '';
                        var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                        var accountname = data.taccountvs1[0].fields.AccountName || '';
                        var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                        var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                        var accountdesc = data.taccountvs1[0].fields.Description || '';
                        var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                        var bankbsb = data.taccountvs1[0].fields.BSB || '';
                        var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';

                        var swiftCode = data.taccountvs1[0].fields.Extra || '';
                        var routingNo = data.taccountvs1[0].fields.BankCode || '';

                        var showTrans = data.taccountvs1[0].fields.IsHeader || false;

                        var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
                       var cardcvc = data.taccountvs1[0].fields.CVC || '';
                       var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';

                        if ((accounttype === "BANK")) {
                            $('.isBankAccount').removeClass('isNotBankAccount');
                            $('.isCreditAccount').addClass('isNotCreditAccount');
                        }else if ((accounttype === "CCARD")) {
                            $('.isCreditAccount').removeClass('isNotCreditAccount');
                            $('.isBankAccount').addClass('isNotBankAccount');
                        } else {
                            $('.isBankAccount').addClass('isNotBankAccount');
                            $('.isCreditAccount').addClass('isNotCreditAccount');
                        }

                        $('#edtAccountID').val(accountid);
                        $('#sltAccountType').val(accounttype);
                        $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                        $('#edtAccountName').val(accountname);
                        $('#edtAccountNo').val(accountno);
                        $('#sltTaxCode').val(taxcode);
                        $('#txaAccountDescription').val(accountdesc);
                        $('#edtBankAccountName').val(bankaccountname);
                        $('#edtBSB').val(bankbsb);
                        $('#edtBankAccountNo').val(bankacountno);
                        $('#swiftCode').val(swiftCode);
                        $('#routingNo').val(routingNo);
                        $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');

                        $('#edtCardNumber').val(cardnumber);
                        $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                        $('#edtCvc').val(cardcvc);

                        if(showTrans == 'true'){
                            $('.showOnTransactions').prop('checked', true);
                        }else{
                          $('.showOnTransactions').prop('checked', false);
                        }

                        setTimeout(function () {
                            $('#addNewAccount').modal('show');
                        }, 500);

                     }).catch(function (err) {
                         $('.fullScreenSpin').css('display','none');
                     });
                   }

               }
           }).catch(function (err) {
             accountService.getOneAccountByName(accountDataName).then(function (data) {
               let lineItems = [];
               let lineItemObj = {};
               let fullAccountTypeName = '';
               let accBalance = '';
               $('#add-account-title').text('Edit Account Details');
               $('#edtAccountName').attr('readonly', true);
               $('#sltAccountType').attr('readonly', true);
               $('#sltAccountType').attr('disabled', 'disabled');
               if (accountTypeList) {
                   for (var h = 0; h < accountTypeList.length; h++) {

                       if (data.taccountvs1[0].fields.AccountTypeName === accountTypeList[h].accounttypename) {

                           fullAccountTypeName = accountTypeList[h].description || '';

                       }
                   }

               }

                var accountid = data.taccountvs1[0].fields.ID || '';
                var accounttype = fullAccountTypeName || data.taccountvs1[0].fields.AccountTypeName;
                var accountname = data.taccountvs1[0].fields.AccountName || '';
                var accountno = data.taccountvs1[0].fields.AccountNumber || '';
                var taxcode = data.taccountvs1[0].fields.TaxCode || '';
                var accountdesc = data.taccountvs1[0].fields.Description || '';
                var bankaccountname = data.taccountvs1[0].fields.BankAccountName || '';
                var bankbsb = data.taccountvs1[0].fields.BSB || '';
                var bankacountno = data.taccountvs1[0].fields.BankAccountNumber || '';

                var swiftCode = data.taccountvs1[0].fields.Extra || '';
                var routingNo = data.taccountvs1[0].fields.BankCode || '';

                var showTrans = data.taccountvs1[0].fields.IsHeader || false;

                var cardnumber = data.taccountvs1[0].fields.CarNumber || '';
               var cardcvc = data.taccountvs1[0].fields.CVC || '';
               var cardexpiry = data.taccountvs1[0].fields.ExpiryDate || '';

                if ((accounttype === "BANK")) {
                    $('.isBankAccount').removeClass('isNotBankAccount');
                    $('.isCreditAccount').addClass('isNotCreditAccount');
                }else if ((accounttype === "CCARD")) {
                    $('.isCreditAccount').removeClass('isNotCreditAccount');
                    $('.isBankAccount').addClass('isNotBankAccount');
                } else {
                    $('.isBankAccount').addClass('isNotBankAccount');
                    $('.isCreditAccount').addClass('isNotCreditAccount');
                }

                $('#edtAccountID').val(accountid);
                $('#sltAccountType').val(accounttype);
                $('#sltAccountType').append('<option value="'+accounttype+'" selected="selected">'+accounttype+'</option>');
                $('#edtAccountName').val(accountname);
                $('#edtAccountNo').val(accountno);
                $('#sltTaxCode').val(taxcode);
                $('#txaAccountDescription').val(accountdesc);
                $('#edtBankAccountName').val(bankaccountname);
                $('#edtBSB').val(bankbsb);
                $('#edtBankAccountNo').val(bankacountno);
                $('#swiftCode').val(swiftCode);
                $('#routingNo').val(routingNo);
                $('#edtBankName').val(localStorage.getItem('vs1companyBankName') || '');

                $('#edtCardNumber').val(cardnumber);
                $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
                $('#edtCvc').val(cardcvc);

                if(showTrans == 'true'){
                    $('.showOnTransactions').prop('checked', true);
                }else{
                  $('.showOnTransactions').prop('checked', false);
                }

                setTimeout(function () {
                    $('#addNewAccount').modal('show');
                }, 500);

             }).catch(function (err) {
                 $('.fullScreenSpin').css('display','none');
             });

           });
           $('#addAccountModal').modal('toggle');
         }else{
            $('#selectLineID').val('edtDeductionAccount');
           $('#accountListModal').modal();
           setTimeout(function () {
             $('#tblAccount_filter .form-control-sm').focus();
             $('#tblAccount_filter .form-control-sm').val('');
             $('#tblAccount_filter .form-control-sm').trigger("input");
               var datatable = $('#tblSupplierlist').DataTable();
               datatable.draw();
               $('#tblAccount_filter .form-control-sm').trigger("input");
           }, 500);
         }
         }
    
        // $('#edtCardNumber').val(cardnumber);
        // $('#edtExpiryDate').val(cardexpiry ? moment(cardexpiry).format('DD/MM/YYYY') : "");
        // $('#edtCvc').val(cardcvc);

        // if(showTrans == 'true'){
        //     $('.showOnTransactions').prop('checked', true);
        // }else{
        //     $('.showOnTransactions').prop('checked', false);
        // }

        setTimeout(function () {
                $('#addNewAccount').modal('show');
        }, 500);

     });
    
    $('#edtRateTypeOvertime').editableSelect().on('click.editable-select', function (e, li) {
       
        var $earch = $(this);
        var offset = $earch.offset();
        let ratetypeService = new RateTypeService();
        const ratetypelist = [];
         var  Description = e.target.value ||'';

        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectRateLineID').val('edtRateTypeOvertime');
          $('#rateTypeListModel').modal();
          $('#tblratetypelist_filter .form-control-sm').focus();
          $('#tblratetypelist_filter .form-control-sm').val();
          $('#tblratetypelist_filter .form-control-sm').trigger("input");
          setTimeout(function () {
             var datatable = $('#tblratetypelist').DataTable();
             datatable.draw();   
             $('#tblratetypelist_filter .form-control-sm').trigger("input");       
          }, 500);
         }else{
           if(Description.replace(/\s/g, '') != ''){
             getVS1Data('TRateTypes').then(function (dataObject) {
              if (dataObject.length == 0) {
                     ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                      $('#add-rateype-title').text('Edit Rate Type Details');
            
                     if (ratetypelist) {
                         for (var h = 0; h < ratetypelist.length; h++) {
  
                             if (data.tpayratetype[0].fields.Description === ratetypelist[h].description) {
  
                                fullDescriptionname = ratetypelist[h].description || '';
  
                             }
                         }
  
                     }
  
                      var ratetypeid = data.tpayratetype[0].fields.ID || '';
                      var description = fullDescriptionname || data.tpayratetype[0].fields.Description;
                   
            
                      $('#edtRateID').val(ratetypeid);
                      $('#edtRateDescription').val(description);
               
                      
                      setTimeout(function () {
                          $('#addRateModel').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.tpayratetype;
                     var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                  
                     $('#add-rateype-title').text('Edit Rate Type Details');
                     $('#edtRateID').attr('readonly', true);
                     $('#edtRateDescription').attr('readonly', true);
            
                     for (let a = 0; a < data.tpayratetype.length; a++) {
  
                       if((data.tpayratetype[a].fields.Description) === Description){
                         added = true;
                         if (ratetypelist) {
                             for (var h = 0; h < ratetypelist.length; h++) {
  
                                 if (data.tpayratetype[a].fields.Description === ratetypelist[h].Description) {
  
                                    fullDescriptionname = ratetypelist[h].Description || '';

                                     console.log('Description '+fullDescriptionname);
  
                                 }
                             }
  
                         }
  
  
  
                  var ratetypeid = data.tpayratetype[a].fields.ID || '';
                  var ratetypedescription = fullDescriptionname || data.tpayratetype[a].fields.Description;
             
                  $('#edtRateID').val(ratetypeid);
                  $('#edtRateDescription').val(ratetypedescription);
                  
                  setTimeout(function () {
                      $('#addRateModel').modal('show');
                       }, 500); } }

                     if(!added) {
                        ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                      
                         $('#add-rateype-title').text('Edit Rate Type Details');                  
                         $('#edtRateID').attr('readonly', true);
                         $('#edtRateDescription').attr('readonly', true);
                         if (ratetypelist) {
                             for (var h = 0; h < ratetypelist.length; h++) {
  
                                 if (data.tpayratetype[0].fields.Description === ratetypelist[h].Description) {
  
                                     fullAccountTypeName = ratetypelist[h].description || '';
  
                                 }
                             }
  
                         }

                          var ratetypeid = data.tpayratetype[0].fields.ID || '';
                          var ratetypedescription = fullAccountTypeName || data.tpayratetype[0].fields.Description;
                         
                          $('#edtRateID').val(ratetypeid);
                          $('#edtRateDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addRateModel').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
                ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
              
                 $('#add-rateype-title').text('Edit Rate Type Details');                  
                 $('#edtRateID').attr('readonly', true);
                 $('#edtRateDescription').attr('readonly', true);

                 if (ratetypelist) {
                    for (var h = 0; h < ratetypelist.length; h++) {

                        if (data.tpayratetype[a].fields.Description === ratetypelist[h].Description) {
                            fullDescriptionname = ratetypelist[h].Description || '';
                            console.log('Description '+fullDescriptionname);
                        }
                    }

                }
  
                 var ratetypeid = data.tpayratetype[0].fields.ID || '';
                 var ratetypedescription = fullAccountTypeName || data.tpayratetype[0].fields.Description;
                         
                          $('#edtRateID').val(ratetypeid);
                          $('#edtRateDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addRateModel').modal('show');
                          }, 500);
  
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
               });
               $('#addRateModel').modal('toggle');
           }else{
             $('#selectRateLineID').val('edtRateTypeOvertime');
             $('#rateTypeListModel').modal();
             setTimeout(function () {
                  var datatable = $('#tblratetypelist').DataTable();
                 datatable.draw();
               
             }, 500);
           }
         }
  
      });
    
    $('#edtRateType').editableSelect().on('click.editable-select', function (e, li) {
       
        var $earch = $(this);
        var offset = $earch.offset();
        let ratetypeService = new RateTypeService();
        const ratetypelist = [];
         var  Description = e.target.value ||'';

        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectRateLineID').val('edtRateType');
          $('#rateTypeListModel').modal();
          $('#tblratetypelist_filter .form-control-sm').focus();
          $('#tblratetypelist_filter .form-control-sm').val();
          $('#tblratetypelist_filter .form-control-sm').trigger("input");
          setTimeout(function () {
             var datatable = $('#tblratetypelist').DataTable();
             datatable.draw();   
             $('#tblratetypelist_filter .form-control-sm').trigger("input");       
          }, 500);
         }else{
           if(Description.replace(/\s/g, '') != ''){
             getVS1Data('TRateTypes').then(function (dataObject) {
              if (dataObject.length == 0) {
                     ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                      $('#add-rateype-title').text('Edit Rate Type Details');
            
                     if (ratetypelist) {
                         for (var h = 0; h < ratetypelist.length; h++) {
  
                             if (data.tpayratetype[0].fields.Description === ratetypelist[h].description) {
  
                                fullDescriptionname = ratetypelist[h].description || '';
  
                             }
                         }
  
                     }
  
                      var ratetypeid = data.tpayratetype[0].fields.ID || '';
                      var description = fullDescriptionname || data.tpayratetype[0].fields.Description;
                   
            
                      $('#edtRateID').val(ratetypeid);
                      $('#edtRateDescription').val(description);
               
                      
                      setTimeout(function () {
                          $('#addRateModel').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.tpayratetype;
                     var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                  
                     $('#add-rateype-title').text('Edit Rate Type Details');
                     $('#edtRateID').attr('readonly', true);
                     $('#edtRateDescription').attr('readonly', true);
            
                     for (let a = 0; a < data.tpayratetype.length; a++) {
  
                       if((data.tpayratetype[a].fields.Description) === Description){
                         added = true;
                         if (ratetypelist) {
                             for (var h = 0; h < ratetypelist.length; h++) {
  
                                 if (data.tpayratetype[a].fields.Description === ratetypelist[h].Description) {
  
                                    fullDescriptionname = ratetypelist[h].Description || '';

                                     console.log('Description '+fullDescriptionname);
  
                                 }
                             }
  
                         }
  
  
  
                  var ratetypeid = data.tpayratetype[a].fields.ID || '';
                  var ratetypedescription = fullDescriptionname || data.tpayratetype[a].fields.Description;
             
                  $('#edtRateID').val(ratetypeid);
                  $('#edtRateDescription').val(ratetypedescription);
                  
                  setTimeout(function () {
                      $('#addRateModel').modal('show');
                       }, 500); } }

                     if(!added) {
                        ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                      
                         $('#add-rateype-title').text('Edit Rate Type Details');                  
                         $('#edtRateID').attr('readonly', true);
                         $('#edtRateDescription').attr('readonly', true);
                         if (ratetypelist) {
                             for (var h = 0; h < ratetypelist.length; h++) {
  
                                 if (data.tpayratetype[0].fields.Description === ratetypelist[h].Description) {
  
                                     fullAccountTypeName = ratetypelist[h].description || '';
  
                                 }
                             }
  
                         }

                          var ratetypeid = data.tpayratetype[0].fields.ID || '';
                          var ratetypedescription = fullAccountTypeName || data.tpayratetype[0].fields.Description;
                         
                          $('#edtRateID').val(ratetypeid);
                          $('#edtRateDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addRateModel').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
                ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
              
                 $('#add-rateype-title').text('Edit Rate Type Details');                  
                 $('#edtRateID').attr('readonly', true);
                 $('#edtRateDescription').attr('readonly', true);

                 if (ratetypelist) {
                    for (var h = 0; h < ratetypelist.length; h++) {

                        if (data.tpayratetype[a].fields.Description === ratetypelist[h].Description) {
                            fullDescriptionname = ratetypelist[h].Description || '';
                            console.log('Description '+fullDescriptionname);
                        }
                    }

                }
  
                 var ratetypeid = data.tpayratetype[0].fields.ID || '';
                 var ratetypedescription = fullAccountTypeName || data.tpayratetype[0].fields.Description;
                         
                          $('#edtRateID').val(ratetypeid);
                          $('#edtRateDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addRateModel').modal('show');
                          }, 500);
  
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
               });
               $('#addRateModel').modal('toggle');
           }else{
             $('#selectRateLineID').val('edtRateType');
             $('#rateTypeListModel').modal();
             setTimeout(function () {
                  var datatable = $('#tblratetypelist').DataTable();
                 datatable.draw();
               
             }, 500);
           }
         }
  
    });

    $('#edtFundType').editableSelect().on('click.editable-select', function (e, li) {
       
        var $earch = $(this);
        var offset = $earch.offset();
        let ratetypeService = new RateTypeService();
        const fundtypelist = [];
        var Description = e.target.value ||'';

        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectFundLineID').val('edtFundType');
          $('#fundTypeListModel').modal();
          $('#tblfundtypelist_filter .form-control-sm').focus();
          $('#tblfundtypelist_filter .form-control-sm').val();
          $('#tblfundtypelist_filter .form-control-sm').trigger("input");
          setTimeout(function () {
             var datatable = $('#tblfundtypelist').DataTable();
             datatable.draw();   
             $('#tblfundtypelist_filter .form-control-sm').trigger("input");       
          }, 500);
         }else{
           if(Description.replace(/\s/g, '') != ''){
             getVS1Data('TSuperType').then(function (dataObject) {
              if (dataObject.length == 0) {
                     ratetypeService.getOneFundTypeByName(Description).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                      $('#add-fundtype-title').text('Edit Fund Type Details');
            
                     if (fundtypelist) {
                         for (var h = 0; h < fundtypelist.length; h++) {
  
                             if (data.tsupertype[0].fields.Description === fundtypelist[h].description) {
  
                                fullDescriptionname = fundtypelist[h].description || '';
  
                             }
                         }
  
                     }
  
                      var supertypeid = data.tsupertype[0].fields.ID || '';
                      var description = fullDescriptionname || data.tsupertype[0].fields.Description;
                   
            
                      $('#edtfundID').val(supertypeid);
                      $('#edtFundDescription').val(description);
               
                      
                      setTimeout(function () {
                          $('#addFundModel').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.tsupertype;
                     var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                  
                     $('#add-fundtype-title').text('Edit Fund Type Details');
                     $('#edtfundID').attr('readonly', true);
                     $('#edtFundDescription').attr('readonly', true);
            
                     for (let a = 0; a < data.tsupertype.length; a++) {
  
                       if((data.tsupertype[a].fields.Description) === Description){
                         added = true;
                         if (fundtypelist) {
                             for (var h = 0; h < fundtypelist.length; h++) {
  
                                 if (data.tsupertype[a].fields.Description === fundtypelist[h].Description) {
  
                                    fullDescriptionname = fundtypelist[h].Description || '';

                            
  
                                 }
                             }
  
                         }
  
  
  
                  var ratetypeid = data.tsupertype[a].fields.ID || '';
                  var ratetypedescription = fullDescriptionname || data.tsupertype[a].fields.Description;
             
                  $('#edtfundID').val(ratetypeid);
                  $('#edtFundDescription').val(ratetypedescription);
                  
                  setTimeout(function () {
                      $('#addFundModel').modal('show');
                       }, 500); } }

                     if(!added) {
                        ratetypeService.getOneFundTypeByName(Description).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                      
                         $('#add-fundtype-title').text('Edit Fund Type Details');                  
                         $('#edtfundID').attr('readonly', true);
                         $('#edtFundDescription').attr('readonly', true);
                         if (fundtypelist) {
                             for (var h = 0; h < fundtypelist.length; h++) {
  
                                 if (data.tsupertype[0].fields.Description === fundtypelist[h].Description) {
  
                                     fullAccountTypeName = fundtypelist[h].description || '';
  
                                 }
                             }
  
                         }

                          var ratetypeid = data.tsupertype[0].fields.ID || '';
                          var ratetypedescription = fullAccountTypeName || data.tsupertype[0].fields.Description;
                         
                          $('#edtfundID').val(ratetypeid);
                          $('#edtFundDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addFundModel').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
                ratetypeService.getOneFundTypeByName(Description).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
              
                 $('#add-fundtype-title').text('Edit Fund Type Details');                  
                 $('#edtfundID').attr('readonly', true);
                 $('#edtFundDescription').attr('readonly', true);

                 if (ratetypelist) {
                    for (var h = 0; h < fundtypelist.length; h++) {

                        if (data.tsupertype[a].fields.Description === fundtypelist[h].Description) {
                            fullDescriptionname = fundtypelist[h].Description || '';
                           
                        }
                    }

                }
  
                 var ratetypeid = data.tsupertype[0].fields.ID || '';
                 var ratetypedescription = fullAccountTypeName || data.tsupertype[0].fields.Description;
                         
                          $('#edtfundID').val(ratetypeid);
                          $('#edtFundDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addFundModel').modal('show');
                          }, 500);
  
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
               });
               $('#addFundModel').modal('toggle');
           }else{
             $('#selectFundLineID').val('edtFundType');
             $('#fundTypeListModel').modal();
             setTimeout(function () {
                  var datatable = $('#tblfundtypelist').DataTable();
                 datatable.draw();
               
             }, 500);
           }
         }
  
    });
    
    $('#edtRateTypeTermnination').editableSelect().on('click.editable-select', function (e, li) {
       
        var $earch = $(this);
        var offset = $earch.offset();
        let ratetypeService = new RateTypeService();
        const ratetypelist = [];
         var  Description = e.target.value ||'';

        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectRateLineID').val('edtRateTypeTermnination');
          $('#rateTypeListModel').modal();
          $('#tblratetypelist_filter .form-control-sm').focus();
          $('#tblratetypelist_filter .form-control-sm').val();
          $('#tblratetypelist_filter .form-control-sm').trigger("input");
          setTimeout(function () {
             var datatable = $('#tblratetypelist').DataTable();
             datatable.draw();   
             $('#tblratetypelist_filter .form-control-sm').trigger("input");       
          }, 500);
         }else{
           if(Description.replace(/\s/g, '') != ''){
             getVS1Data('TRateTypes').then(function (dataObject) {
              if (dataObject.length == 0) {
                     ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                      $('#add-rateype-title').text('Edit Rate Type Details');
            
                     if (ratetypelist) {
                         for (var h = 0; h < ratetypelist.length; h++) {
  
                             if (data.tpayratetype[0].fields.Description === ratetypelist[h].description) {
  
                                fullDescriptionname = ratetypelist[h].description || '';
  
                             }
                         }
  
                     }
  
                      var ratetypeid = data.tpayratetype[0].fields.ID || '';
                      var description = fullDescriptionname || data.tpayratetype[0].fields.Description;
                   
            
                      $('#edtRateID').val(ratetypeid);
                      $('#edtRateDescription').val(description);
               
                      
                      setTimeout(function () {
                          $('#addRateModel').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.tpayratetype;
                     var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                  
                     $('#add-rateype-title').text('Edit Rate Type Details');
                     $('#edtRateID').attr('readonly', true);
                     $('#edtRateDescription').attr('readonly', true);
            
                     for (let a = 0; a < data.tpayratetype.length; a++) {
  
                       if((data.tpayratetype[a].fields.Description) === Description){
                         added = true;
                         if (ratetypelist) {
                             for (var h = 0; h < ratetypelist.length; h++) {
  
                                 if (data.tpayratetype[a].fields.Description === ratetypelist[h].Description) {
  
                                    fullDescriptionname = ratetypelist[h].Description || '';

                                     console.log('Description '+fullDescriptionname);
  
                                 }
                             }
  
                         }
  
  
  
                  var ratetypeid = data.tpayratetype[a].fields.ID || '';
                  var ratetypedescription = fullDescriptionname || data.tpayratetype[a].fields.Description;
             
                  $('#edtRateID').val(ratetypeid);
                  $('#edtRateDescription').val(ratetypedescription);
                  
                  setTimeout(function () {
                      $('#addRateModel').modal('show');
                       }, 500); } }

                     if(!added) {
                        ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                      
                         $('#add-rateype-title').text('Edit Rate Type Details');                  
                         $('#edtRateID').attr('readonly', true);
                         $('#edtRateDescription').attr('readonly', true);
                         if (ratetypelist) {
                             for (var h = 0; h < ratetypelist.length; h++) {
  
                                 if (data.tpayratetype[0].fields.Description === ratetypelist[h].Description) {
  
                                     fullAccountTypeName = ratetypelist[h].description || '';
  
                                 }
                             }
  
                         }

                          var ratetypeid = data.tpayratetype[0].fields.ID || '';
                          var ratetypedescription = fullAccountTypeName || data.tpayratetype[0].fields.Description;
                         
                          $('#edtRateID').val(ratetypeid);
                          $('#edtRateDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addRateModel').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
                ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
              
                 $('#add-rateype-title').text('Edit Rate Type Details');                  
                 $('#edtRateID').attr('readonly', true);
                 $('#edtRateDescription').attr('readonly', true);

                 if (ratetypelist) {
                    for (var h = 0; h < ratetypelist.length; h++) {

                        if (data.tpayratetype[a].fields.Description === ratetypelist[h].Description) {
                            fullDescriptionname = ratetypelist[h].Description || '';
                            console.log('Description '+fullDescriptionname);
                        }
                    }

                }
  
                 var ratetypeid = data.tpayratetype[0].fields.ID || '';
                 var ratetypedescription = fullAccountTypeName || data.tpayratetype[0].fields.Description;
                         
                          $('#edtRateID').val(ratetypeid);
                          $('#edtRateDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addRateModel').modal('show');
                          }, 500);
  
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
               });
               $('#addRateModel').modal('toggle');
           }else{
             $('#selectRateLineID').val('edtRateTypeTermnination');
             $('#rateTypeListModel').modal();
             setTimeout(function () {
                  var datatable = $('#tblratetypelist').DataTable();
                 datatable.draw();
               
             }, 500);
           }
         }
  
      });

    $('#edtRateTypeLumpSumE').editableSelect().on('click.editable-select', function (e, li) {
       
        var $earch = $(this);
        var offset = $earch.offset();
        let ratetypeService = new RateTypeService();
        const ratetypelist = [];
         var  Description = e.target.value ||'';

        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectRateLineID').val('edtRateTypeLumpSumE');
          $('#rateTypeListModel').modal();
          $('#tblratetypelist_filter .form-control-sm').focus();
          $('#tblratetypelist_filter .form-control-sm').val();
          $('#tblratetypelist_filter .form-control-sm').trigger("input");
          setTimeout(function () {
             var datatable = $('#tblratetypelist').DataTable();
             datatable.draw();   
             $('#tblratetypelist_filter .form-control-sm').trigger("input");       
          }, 500);
         }else{
           if(Description.replace(/\s/g, '') != ''){
             getVS1Data('TRateTypes').then(function (dataObject) {
              if (dataObject.length == 0) {
                     ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                      $('#add-rateype-title').text('Edit Rate Type Details');
            
                     if (ratetypelist) {
                         for (var h = 0; h < ratetypelist.length; h++) {
  
                             if (data.tpayratetype[0].fields.Description === ratetypelist[h].description) {
  
                                fullDescriptionname = ratetypelist[h].description || '';
  
                             }
                         }
  
                     }
  
                      var ratetypeid = data.tpayratetype[0].fields.ID || '';
                      var description = fullDescriptionname || data.tpayratetype[0].fields.Description;
                   
            
                      $('#edtRateID').val(ratetypeid);
                      $('#edtRateDescription').val(description);
               
                      
                      setTimeout(function () {
                          $('#addRateModel').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.tpayratetype;
                     var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                  
                     $('#add-rateype-title').text('Edit Rate Type Details');
                     $('#edtRateID').attr('readonly', true);
                     $('#edtRateDescription').attr('readonly', true);
            
                     for (let a = 0; a < data.tpayratetype.length; a++) {
  
                       if((data.tpayratetype[a].fields.Description) === Description){
                         added = true;
                         if (ratetypelist) {
                             for (var h = 0; h < ratetypelist.length; h++) {
  
                                 if (data.tpayratetype[a].fields.Description === ratetypelist[h].Description) {
  
                                    fullDescriptionname = ratetypelist[h].Description || '';

                                     console.log('Description '+fullDescriptionname);
  
                                 }
                             }
  
                         }
  
  
  
                  var ratetypeid = data.tpayratetype[a].fields.ID || '';
                  var ratetypedescription = fullDescriptionname || data.tpayratetype[a].fields.Description;
             
                  $('#edtRateID').val(ratetypeid);
                  $('#edtRateDescription').val(ratetypedescription);
                  
                  setTimeout(function () {
                      $('#addRateModel').modal('show');
                       }, 500); } }

                     if(!added) {
                        ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                      
                         $('#add-rateype-title').text('Edit Rate Type Details');                  
                         $('#edtRateID').attr('readonly', true);
                         $('#edtRateDescription').attr('readonly', true);
                         if (ratetypelist) {
                             for (var h = 0; h < ratetypelist.length; h++) {
  
                                 if (data.tpayratetype[0].fields.Description === ratetypelist[h].Description) {
  
                                     fullAccountTypeName = ratetypelist[h].description || '';
  
                                 }
                             }
  
                         }

                          var ratetypeid = data.tpayratetype[0].fields.ID || '';
                          var ratetypedescription = fullAccountTypeName || data.tpayratetype[0].fields.Description;
                         
                          $('#edtRateID').val(ratetypeid);
                          $('#edtRateDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addRateModel').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
                ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
              
                 $('#add-rateype-title').text('Edit Rate Type Details');                  
                 $('#edtRateID').attr('readonly', true);
                 $('#edtRateDescription').attr('readonly', true);

                 if (ratetypelist) {
                    for (var h = 0; h < ratetypelist.length; h++) {

                        if (data.tpayratetype[a].fields.Description === ratetypelist[h].Description) {
                            fullDescriptionname = ratetypelist[h].Description || '';
                            console.log('Description '+fullDescriptionname);
                        }
                    }

                }
  
                 var ratetypeid = data.tpayratetype[0].fields.ID || '';
                 var ratetypedescription = fullAccountTypeName || data.tpayratetype[0].fields.Description;
                         
                          $('#edtRateID').val(ratetypeid);
                          $('#edtRateDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addRateModel').modal('show');
                          }, 500);
  
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
               });
               $('#addRateModel').modal('toggle');
           }else{
             $('#selectRateLineID').val('edtRateTypeLumpSumE');
             $('#rateTypeListModel').modal();
             setTimeout(function () {
                  var datatable = $('#tblratetypelist').DataTable();
                 datatable.draw();
               
             }, 500);
           }
         }
  
      });
    
    $('#edtRateTypeBonusesCommissions').editableSelect().on('click.editable-select', function (e, li) {
       
        var $earch = $(this);
        var offset = $earch.offset();
        let ratetypeService = new RateTypeService();
        const ratetypelist = [];
         var  Description = e.target.value ||'';

        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectRateLineID').val('edtRateTypeBonusesCommissions');
          $('#rateTypeListModel').modal();
          $('#tblratetypelist_filter .form-control-sm').focus();
          $('#tblratetypelist_filter .form-control-sm').val();
          $('#tblratetypelist_filter .form-control-sm').trigger("input");
          setTimeout(function () {
             var datatable = $('#tblratetypelist').DataTable();
             datatable.draw();   
             $('#tblratetypelist_filter .form-control-sm').trigger("input");       
          }, 500);
         }else{
           if(Description.replace(/\s/g, '') != ''){
             getVS1Data('TRateTypes').then(function (dataObject) {
              if (dataObject.length == 0) {
                     ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                      $('#add-rateype-title').text('Edit Rate Type Details');
            
                     if (ratetypelist) {
                         for (var h = 0; h < ratetypelist.length; h++) {
  
                             if (data.tpayratetype[0].fields.Description === ratetypelist[h].description) {
  
                                fullDescriptionname = ratetypelist[h].description || '';
  
                             }
                         }
  
                     }
  
                      var ratetypeid = data.tpayratetype[0].fields.ID || '';
                      var description = fullDescriptionname || data.tpayratetype[0].fields.Description;
                   
            
                      $('#edtRateID').val(ratetypeid);
                      $('#edtRateDescription').val(description);
               
                      
                      setTimeout(function () {
                          $('#addRateModel').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.tpayratetype;
                     var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                  
                     $('#add-rateype-title').text('Edit Rate Type Details');
                     $('#edtRateID').attr('readonly', true);
                     $('#edtRateDescription').attr('readonly', true);
            
                     for (let a = 0; a < data.tpayratetype.length; a++) {
  
                       if((data.tpayratetype[a].fields.Description) === Description){
                         added = true;
                         if (ratetypelist) {
                             for (var h = 0; h < ratetypelist.length; h++) {
  
                                 if (data.tpayratetype[a].fields.Description === ratetypelist[h].Description) {
  
                                    fullDescriptionname = ratetypelist[h].Description || '';

                                     console.log('Description '+fullDescriptionname);
  
                                 }
                             }
  
                         }
  
  
  
                  var ratetypeid = data.tpayratetype[a].fields.ID || '';
                  var ratetypedescription = fullDescriptionname || data.tpayratetype[a].fields.Description;
             
                  $('#edtRateID').val(ratetypeid);
                  $('#edtRateDescription').val(ratetypedescription);
                  
                  setTimeout(function () {
                      $('#addRateModel').modal('show');
                       }, 500); } }

                     if(!added) {
                        ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                      
                         $('#add-rateype-title').text('Edit Rate Type Details');                  
                         $('#edtRateID').attr('readonly', true);
                         $('#edtRateDescription').attr('readonly', true);
                         if (ratetypelist) {
                             for (var h = 0; h < ratetypelist.length; h++) {
  
                                 if (data.tpayratetype[0].fields.Description === ratetypelist[h].Description) {
  
                                     fullAccountTypeName = ratetypelist[h].description || '';
  
                                 }
                             }
  
                         }

                          var ratetypeid = data.tpayratetype[0].fields.ID || '';
                          var ratetypedescription = fullAccountTypeName || data.tpayratetype[0].fields.Description;
                         
                          $('#edtRateID').val(ratetypeid);
                          $('#edtRateDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addRateModel').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
                ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
              
                 $('#add-rateype-title').text('Edit Rate Type Details');                  
                 $('#edtRateID').attr('readonly', true);
                 $('#edtRateDescription').attr('readonly', true);

                 if (ratetypelist) {
                    for (var h = 0; h < ratetypelist.length; h++) {

                        if (data.tpayratetype[a].fields.Description === ratetypelist[h].Description) {
                            fullDescriptionname = ratetypelist[h].Description || '';
                            console.log('Description '+fullDescriptionname);
                        }
                    }

                }
  
                 var ratetypeid = data.tpayratetype[0].fields.ID || '';
                 var ratetypedescription = fullAccountTypeName || data.tpayratetype[0].fields.Description;
                         
                          $('#edtRateID').val(ratetypeid);
                          $('#edtRateDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addRateModel').modal('show');
                          }, 500);
  
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
               });
               $('#addRateModel').modal('toggle');
           }else{
             $('#selectRateLineID').val('edtRateTypeBonusesCommissions');
             $('#rateTypeListModel').modal();
             setTimeout(function () {
                  var datatable = $('#tblratetypelist').DataTable();
                 datatable.draw();
               
             }, 500);
           }
         }
  
      });

    $('#edtRateTypeDirectorsFees').editableSelect().on('click.editable-select', function (e, li) {
       
        var $earch = $(this);
        var offset = $earch.offset();
        let ratetypeService = new RateTypeService();
        const ratetypelist = [];
         var  Description = e.target.value ||'';

        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectRateLineID').val('edtRateTypeDirectorsFees');
          $('#rateTypeListModel').modal();
          $('#tblratetypelist_filter .form-control-sm').focus();
          $('#tblratetypelist_filter .form-control-sm').val();
          $('#tblratetypelist_filter .form-control-sm').trigger("input");
          setTimeout(function () {
             var datatable = $('#tblratetypelist').DataTable();
             datatable.draw();   
             $('#tblratetypelist_filter .form-control-sm').trigger("input");       
          }, 500);
         }else{
           if(Description.replace(/\s/g, '') != ''){
             getVS1Data('TRateTypes').then(function (dataObject) {
              if (dataObject.length == 0) {
                     ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                      $('#add-rateype-title').text('Edit Rate Type Details');
            
                     if (ratetypelist) {
                         for (var h = 0; h < ratetypelist.length; h++) {
  
                             if (data.tpayratetype[0].fields.Description === ratetypelist[h].description) {
  
                                fullDescriptionname = ratetypelist[h].description || '';
  
                             }
                         }
  
                     }
  
                      var ratetypeid = data.tpayratetype[0].fields.ID || '';
                      var description = fullDescriptionname || data.tpayratetype[0].fields.Description;
                   
            
                      $('#edtRateID').val(ratetypeid);
                      $('#edtRateDescription').val(description);
               
                      
                      setTimeout(function () {
                          $('#addRateModel').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.tpayratetype;
                     var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                  
                     $('#add-rateype-title').text('Edit Rate Type Details');
                     $('#edtRateID').attr('readonly', true);
                     $('#edtRateDescription').attr('readonly', true);
            
                     for (let a = 0; a < data.tpayratetype.length; a++) {
  
                       if((data.tpayratetype[a].fields.Description) === Description){
                         added = true;
                         if (ratetypelist) {
                             for (var h = 0; h < ratetypelist.length; h++) {
  
                                 if (data.tpayratetype[a].fields.Description === ratetypelist[h].Description) {
  
                                    fullDescriptionname = ratetypelist[h].Description || '';

                                     console.log('Description '+fullDescriptionname);
  
                                 }
                             }
  
                         }
  
  
  
                  var ratetypeid = data.tpayratetype[a].fields.ID || '';
                  var ratetypedescription = fullDescriptionname || data.tpayratetype[a].fields.Description;
             
                  $('#edtRateID').val(ratetypeid);
                  $('#edtRateDescription').val(ratetypedescription);
                  
                  setTimeout(function () {
                      $('#addRateModel').modal('show');
                       }, 500); } }

                     if(!added) {
                        ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                      
                         $('#add-rateype-title').text('Edit Rate Type Details');                  
                         $('#edtRateID').attr('readonly', true);
                         $('#edtRateDescription').attr('readonly', true);
                         if (ratetypelist) {
                             for (var h = 0; h < ratetypelist.length; h++) {
  
                                 if (data.tpayratetype[0].fields.Description === ratetypelist[h].Description) {
  
                                     fullAccountTypeName = ratetypelist[h].description || '';
  
                                 }
                             }
  
                         }

                          var ratetypeid = data.tpayratetype[0].fields.ID || '';
                          var ratetypedescription = fullAccountTypeName || data.tpayratetype[0].fields.Description;
                         
                          $('#edtRateID').val(ratetypeid);
                          $('#edtRateDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addRateModel').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
                ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
              
                 $('#add-rateype-title').text('Edit Rate Type Details');                  
                 $('#edtRateID').attr('readonly', true);
                 $('#edtRateDescription').attr('readonly', true);

                 if (ratetypelist) {
                    for (var h = 0; h < ratetypelist.length; h++) {

                        if (data.tpayratetype[a].fields.Description === ratetypelist[h].Description) {
                            fullDescriptionname = ratetypelist[h].Description || '';
                            console.log('Description '+fullDescriptionname);
                        }
                    }

                }
  
                 var ratetypeid = data.tpayratetype[0].fields.ID || '';
                 var ratetypedescription = fullAccountTypeName || data.tpayratetype[0].fields.Description;
                         
                          $('#edtRateID').val(ratetypeid);
                          $('#edtRateDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addRateModel').modal('show');
                          }, 500);
  
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
               });
               $('#addRateModel').modal('toggle');
           }else{
             $('#selectRateLineID').val('edtRateTypeDirectorsFees');
             $('#rateTypeListModel').modal();
             setTimeout(function () {
                  var datatable = $('#tblratetypelist').DataTable();
                 datatable.draw();
               
             }, 500);
           }
         }
  
      });
    
    $('#edtRateTypeLumpSumW').editableSelect().on('click.editable-select', function (e, li) {
       
        var $earch = $(this);
        var offset = $earch.offset();
        let ratetypeService = new RateTypeService();
        const ratetypelist = [];
         var  Description = e.target.value ||'';

        if (e.pageX > offset.left + $earch.width() - 8) { // X button 16px wide?
          $('#selectRateLineID').val('edtRateTypeLumpSumW');
          $('#rateTypeListModel').modal();
          $('#tblratetypelist_filter .form-control-sm').focus();
          $('#tblratetypelist_filter .form-control-sm').val();
          $('#tblratetypelist_filter .form-control-sm').trigger("input");
          setTimeout(function () {
             var datatable = $('#tblratetypelist').DataTable();
             datatable.draw();   
             $('#tblratetypelist_filter .form-control-sm').trigger("input");       
          }, 500);
         }else{
           if(Description.replace(/\s/g, '') != ''){
             getVS1Data('TRateTypes').then(function (dataObject) {
              if (dataObject.length == 0) {
                     ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                      $('#add-rateype-title').text('Edit Rate Type Details');
            
                     if (ratetypelist) {
                         for (var h = 0; h < ratetypelist.length; h++) {
  
                             if (data.tpayratetype[0].fields.Description === ratetypelist[h].description) {
  
                                fullDescriptionname = ratetypelist[h].description || '';
  
                             }
                         }
  
                     }
  
                      var ratetypeid = data.tpayratetype[0].fields.ID || '';
                      var description = fullDescriptionname || data.tpayratetype[0].fields.Description;
                   
            
                      $('#edtRateID').val(ratetypeid);
                      $('#edtRateDescription').val(description);
               
                      
                      setTimeout(function () {
                          $('#addRateModel').modal('show');
                      }, 500);
  
                   }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                   });
                 } else {
                     let data = JSON.parse(dataObject[0].data);
                     let useData = data.tpayratetype;
                     var added=false;
                     let lineItems = [];
                     let lineItemObj = {};
                     let fullDescriptionname = '';
                  
                     $('#add-rateype-title').text('Edit Rate Type Details');
                     $('#edtRateID').attr('readonly', true);
                     $('#edtRateDescription').attr('readonly', true);
            
                     for (let a = 0; a < data.tpayratetype.length; a++) {
  
                       if((data.tpayratetype[a].fields.Description) === Description){
                         added = true;
                         if (ratetypelist) {
                             for (var h = 0; h < ratetypelist.length; h++) {
  
                                 if (data.tpayratetype[a].fields.Description === ratetypelist[h].Description) {
  
                                    fullDescriptionname = ratetypelist[h].Description || '';

                                     console.log('Description '+fullDescriptionname);
  
                                 }
                             }
  
                         }
  
  
  
                  var ratetypeid = data.tpayratetype[a].fields.ID || '';
                  var ratetypedescription = fullDescriptionname || data.tpayratetype[a].fields.Description;
             
                  $('#edtRateID').val(ratetypeid);
                  $('#edtRateDescription').val(ratetypedescription);
                  
                  setTimeout(function () {
                      $('#addRateModel').modal('show');
                       }, 500); } }

                     if(!added) {
                        ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                         let lineItems = [];
                         let lineItemObj = {};
                         let fullAccountTypeName = '';
                      
                         $('#add-rateype-title').text('Edit Rate Type Details');                  
                         $('#edtRateID').attr('readonly', true);
                         $('#edtRateDescription').attr('readonly', true);
                         if (ratetypelist) {
                             for (var h = 0; h < ratetypelist.length; h++) {
  
                                 if (data.tpayratetype[0].fields.Description === ratetypelist[h].Description) {
  
                                     fullAccountTypeName = ratetypelist[h].description || '';
  
                                 }
                             }
  
                         }

                          var ratetypeid = data.tpayratetype[0].fields.ID || '';
                          var ratetypedescription = fullAccountTypeName || data.tpayratetype[0].fields.Description;
                         
                          $('#edtRateID').val(ratetypeid);
                          $('#edtRateDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addRateModel').modal('show');
                          }, 500);
  
                       }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                       });
                     }
  
                 }
             }).catch(function (err) {
                ratetypeService.getOneRateTypeByName(Description).then(function (data) {
                 let lineItems = [];
                 let lineItemObj = {};
                 let fullAccountTypeName = '';
              
                 $('#add-rateype-title').text('Edit Rate Type Details');                  
                 $('#edtRateID').attr('readonly', true);
                 $('#edtRateDescription').attr('readonly', true);

                 if (ratetypelist) {
                    for (var h = 0; h < ratetypelist.length; h++) {

                        if (data.tpayratetype[a].fields.Description === ratetypelist[h].Description) {
                            fullDescriptionname = ratetypelist[h].Description || '';
                            console.log('Description '+fullDescriptionname);
                        }
                    }

                }
  
                 var ratetypeid = data.tpayratetype[0].fields.ID || '';
                 var ratetypedescription = fullAccountTypeName || data.tpayratetype[0].fields.Description;
                         
                          $('#edtRateID').val(ratetypeid);
                          $('#edtRateDescription').val(ratetypedescription);

                          setTimeout(function () {
                              $('#addRateModel').modal('show');
                          }, 500);
  
  
               }).catch(function (err) {
                   $('.fullScreenSpin').css('display','none');
               });
  
               });
               $('#addRateModel').modal('toggle');
           }else{
             $('#selectRateLineID').val('edtRateTypeLumpSumW');
             $('#rateTypeListModel').modal();
             setTimeout(function () {
                  var datatable = $('#tblratetypelist').DataTable();
                 datatable.draw();
               
             }, 500);
           }
         }
  
      });

    $(document).on("click", "#tblratetypelist tbody tr", function(e) {

        let selectLineID = $('#selectRateLineID').val()||'edtRateTypeOvertime';
       
        var table = $(this);
        let description = table.find(".thDescription").text();
        let ratetypeid = table.find(".thRateID").text()||0;
        $('#rateTypeListModel').modal('toggle');

          if(selectLineID == 'edtRateTypeOvertime'){          
           $('#edtRateDescription').val(description);
           $('#edtRateID').val(ratetypeid);
           $('#edtRateTypeOvertime').val(description);
           $('#add-rateype-title').text('Edit Rate Type Details');

          }

        $('#tblratetypelist_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshRateType').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblratetypelist tbody tr", function(e) {

        let selectLineID = $('#selectRateLineID').val()||'edtRateType';
       
        var table = $(this);
        let description = table.find(".thDescription").text();
        let ratetypeid = table.find(".thRateID").text()||0;
        $('#rateTypeListModel').modal('toggle');

          if(selectLineID == 'edtRateType'){          
           $('#edtRateDescription').val(description);
           $('#edtRateID').val(ratetypeid);
           $('#edtRateType').val(description);
           $('#add-rateype-title').text('Edit Rate Type Details');

          }

        $('#tblratetypelist_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshRateType').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblratetypelist tbody tr", function(e) {

        let selectLineID = $('#selectRateLineID').val()||'edtRateTypeTermnination';
       
        var table = $(this);
        let description = table.find(".thDescription").text();
        let ratetypeid = table.find(".thRateID").text()||0;
        $('#rateTypeListModel').modal('toggle');

          if(selectLineID == 'edtRateTypeTermnination'){                            
           $('#edtRateDescription').val(description);
           $('#edtRateID').val(ratetypeid);
           $('#edtRateTypeTermnination').val(description);
           $('#add-rateype-title').text('Edit Rate Type Details');

          }

        $('#tblratetypelist_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshRateType').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });
    $(document).on("click", "#tblratetypelist tbody tr", function(e) {

        let selectLineID = $('#selectRateLineID').val()||'edtRateTypeLumpSumE';
       
        var table = $(this);
        let description = table.find(".thDescription").text();
        let ratetypeid = table.find(".thRateID").text()||0;
        $('#rateTypeListModel').modal('toggle');

          if(selectLineID == 'edtRateTypeLumpSumE'){          
           $('#edtRateDescription').val(description);
           $('#edtRateID').val(ratetypeid);
           $('#edtRateTypeLumpSumE').val(description);
           $('#add-rateype-title').text('Edit Rate Type Details');

          }

        $('#tblratetypelist_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshRateType').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });
    $(document).on("click", "#tblratetypelist tbody tr", function(e) {

        let selectLineID = $('#selectRateLineID').val()||'edtRateTypeBonusesCommissions';
       
        var table = $(this);
        let description = table.find(".thDescription").text();
        let ratetypeid = table.find(".thRateID").text()||0;
        $('#rateTypeListModel').modal('toggle');

          if(selectLineID == 'edtRateTypeBonusesCommissions'){          
           $('#edtRateDescription').val(description);
           $('#edtRateID').val(ratetypeid);
           $('#edtRateTypeBonusesCommissions').val(description);
           $('#add-rateype-title').text('Edit Rate Type Details');

          }

        $('#tblratetypelist_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshRateType').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });
    $(document).on("click", "#tblratetypelist tbody tr", function(e) {

        let selectLineID = $('#selectRateLineID').val()||'edtRateTypeLumpSumW';
       
        var table = $(this);
        let description = table.find(".thDescription").text();
        let ratetypeid = table.find(".thRateID").text()||0;
        $('#rateTypeListModel').modal('toggle');

          if(selectLineID == 'edtRateTypeLumpSumW'){          
           $('#edtRateDescription').val(description);
           $('#edtRateID').val(ratetypeid);
           $('#edtRateTypeLumpSumW').val(description);
           $('#add-rateype-title').text('Edit Rate Type Details');

          }

        $('#tblratetypelist_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshRateType').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });
    $(document).on("click", "#tblratetypelist tbody tr", function(e) {

        let selectLineID = $('#selectRateLineID').val()||'edtRateTypeDirectorsFees';
       
        var table = $(this);
        let description = table.find(".thDescription").text();
        let ratetypeid = table.find(".thRateID").text()||0;
        $('#rateTypeListModel').modal('toggle');

          if(selectLineID == 'edtRateTypeDirectorsFees'){          
           $('#edtRateDescription').val(description);
           $('#edtRateID').val(ratetypeid);
           $('#edtRateTypeDirectorsFees').val(description);
           $('#add-rateype-title').text('Edit Rate Type Details');

          }

        $('#tblratetypelist_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshRateType').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblfundtypelist tbody tr", function(e) {

        let selectLineID = $('#selectFundLineID').val()||'edtFundType';
       
        var table = $(this);
        let description = table.find(".thfundDescription").text();
        let fundid = table.find(".thfundID").text()||0;
        $('#fundTypeListModel').modal('toggle');

          if(selectLineID == 'edtFundType'){          
           $('#edtFundDescription').val(description);
           $('#edtfundID').val(fundid);
           $('#edtFundType').val(description);
           $('#add-fundype-title').text('Edit Fund Type Details');

          }

          if(description == "Self-Managed Superannuation Fund")
          {
              $('#acountabmandelectronic').css('display','block');
              $('#edtabn').css('display','block');
              $('#accountbsb').css('display','block');
        
              $('#account_name').css('display','block');
          }
          else
          {
              $('#acountabmandelectronic').css('display','none');
              $('#edtabn').css('display','none');
              $('#accountbsb').css('display','none');
            
              $('#account_name').css('display','none');

          }

        $('#tblfundtypelist_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshFundType').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblPayCalendars tbody tr td:not(.colDeleteCalenders) ", function(e) {
    
        let calender_id =   $(this).closest('tr').find(".colCalenderID").text();
        let calenderName =  $(this).closest('tr').find(".colPayCalendarName").text()||'';
        let payperiod =     $(this).closest('tr').find(".colPayPeriod").text()||'';
        let NextPayPeriod = $(this).closest('tr').find(".colNextPayPeriod").text()||'';
        let NextPaymentdate = $(this).closest('tr').find(".colNextPaymentDate").text()||'';
        
        $('#newPayCalendarLabel').text('Edit Calender Details');
        $('#paycalendarId').val(calender_id);
        $('#calender_name').val(calenderName);
        $('#calender_name').val(calenderName);
        $('#payperiod').val(payperiod);
        $('#edtStartDate').val(NextPayPeriod);
        $('#edtFirstPaymentDate').val(NextPaymentdate);
        
        $('#newPayCalendarModal').modal('toggle');
           
    });

    $(document).on("click", "#tblHolidays tbody tr td:not(.colHolidayDelete) ", function(e) {
    
      
        let holiday_id = $(this).closest('tr').find(".colHolidayID").text();
        let holidayName = $(this).closest('tr').find(".colHolidayName").text()||'';
        let holiday_date = $(this).closest('tr').find(".colHolidayDate").text()||'';
        let holidaygroup = $(this).closest('tr').find(".colHolidaygroup").text() || '';   
        $('#newHolidayLabel').text('Edit Holiday Details');
        $('#holidayid').val(holiday_id);
        $('#holidayname').val(holidayName);
        $('#edtHolidayDate').val(holiday_date);   
        $('#holidaygroup').val(holidaygroup);
        $('#newHolidayModal').modal('toggle');
           
    });

    $(document).on("click", "#tblSuperannuation tbody tr td:not(.colDeletesup)", function(e) {
    
        var table = $(this);
        let super_id = $(this).closest('tr').find(".colSuperannuationID").text();
        let super_name = $(this).closest('tr').find(".colSuperannuationName").text()||'';
        let super_type = $(this).closest('tr').find(".colSuperannuationType").text()||'';
        let super_employe_num = $(this).closest('tr').find(".colEmployerNum").text() || '';   
        let super_abn = $(this).closest('tr').find(".colabn").text();
        let super_service = $(this).closest('tr').find(".colservicealias").text()||'';
        let super_bsb = $(this).closest('tr').find(".colbsb").text()||'';
        let super_account_number = $(this).closest('tr').find(".colaccountnumber").text() || '';  
        let super_account_name = $(this).closest('tr').find(".colaccountname").text()||'';
          

        $('#newSuperannuationFundLabel').text('Edit Superannuation Details');
        $('#newSuperannuationFundId').val(super_id);
        $('#edtFundName').val(super_name);
        $('#edtFundType').val(super_type);
        $('#edtabn').val(super_abn);
        $('#edtelectronicsalias').val(super_service);
        $('#edtEmployerNumber').val(super_employe_num);
        $('#edtaccountnumber').val(super_account_number);
        $('#edtaccountname').val(super_account_name);     
        $('#newSuperannuationFundModal').modal('toggle');
           
    });

    $(document).on("click", "#tblReimbursements tbody tr td:not(.colDeleterei)", function(e) {
    
        var table = $(this);
        let id = $(this).closest('tr').find(".colReimbursementID").text() || 0;
        let name = $(this).closest('tr').find(".colReimbursementName").text()||'';
        let account = $(this).closest('tr').find(".colReimbursementAccount").text()||'';
       
        $('#newReimbursementLabel').text('Edit Reimbursement Details');
        $('#res_id').val(id);
        $('#edtReimbursementName').val(name);
        $('#edtReimbursementAccount').val(account);
        $('#newReimbursementModal').modal('toggle');
           
    });

    $(document).on("click", "#tblLeave tbody tr td:not(.colDeletepaidrem)", function(e) {
    
        var table = $(this);
        let id = $(this).closest('tr').find(".colLeaveID").text() || 0;
        let colLeaveName = $(this).closest('tr').find(".colLeaveName").text()||'';
        let colLeaveUnits = $(this).closest('tr').find(".colLeaveUnits").text()||'';
        let colLeaveNormalEntitlement = $(this).closest('tr').find(".colLeaveNormalEntitlement").text() || 0;
        let colLeaveLeaveLoadingRate = $(this).closest('tr').find(".colLeaveLeaveLoadingRate").text()||'';
        let colLeavePaidLeave = $(this).closest('tr').find(".colLeavePaidLeave").text()|| '';
        let colLeaveShownOnPayslip = $(this).closest('tr').find(".colLeaveShownOnPayslip").text()|| 'hide';
         

        if(colLeavePaidLeave === 'paid')
        {   
            

            $('#paidLeaveLabel').text('Edit Paid Leave Details');
            $('#paidleaveid').val(id);
            $('#edtLeaveName').val(colLeaveName);
            $('#edtTypeOfUnits').val(colLeaveUnits);
            $('#edtLeaveLoadingRate').val(colLeaveLeaveLoadingRate);
            $('#edtNormalEntitlement').val(colLeaveNormalEntitlement);
            if(colLeaveShownOnPayslip == 'show')
            {
                $('#formCheck-ShowBalance').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ShowBalance').removeAttr('checked');;
            }
            
            $('#paidLeaveModal').modal('toggle');
        }
        else{

            $('#unpaidLeaveLabel').text('Edit UnPaid Leave Details');
            $('#unpaidleaveid').val(id);
            $('#edtUnpaidLeaveName').val(colLeaveName);
            $('#edtUnpaidTypeOfUnits').val(colLeaveUnits);
            $('#edtUnpaidLeaveLoadingRate').val(colLeaveLeaveLoadingRate);
            $('#edtUnpaidNormalEntitlement').val(colLeaveNormalEntitlement);
            if(colLeaveShownOnPayslip == 'show')
            {
                $('#formCheck-UnpaidShowBalance').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-UnpaidShowBalance').removeAttr('checked');
            }
            $('#unpaidLeaveModal').modal('toggle');
        }
       
           
    });

    $(document).on("click", "#tblEarnings tbody tr td:not(.colDeleteEarnings)", function(e) {
    
        var table = $(this);
        let id = $(this).closest('tr').find(".colEarningsID").text() || 0;
        let colEarningsNames = $(this).closest('tr').find(".colEarningsNames").text()||'';
        let colEarningsType = $(this).closest('tr').find(".colEarningsType").text()||'';
        let colEarningsDisplayName = $(this).closest('tr').find(".colEarningsDisplayName").text() || '';
        let colEarningsAmount = $(this).closest('tr').find(".colEarningsAmount").text()||'';
        let colEarningsAccounts = $(this).closest('tr').find(".colEarningsAccounts").text()|| '';
        let colEarningsratetype = $(this).closest('tr').find(".colEarningsratetype").text()|| '';
        let colEarningsAccountsID = $(this).closest('tr').find(".colEarningsAccountsID").text()|| '';
        let colEarningsPAYG = $(this).closest('tr').find(".colEarningsPAYG").text()|| false;
        let colEarningsSuperannuation = $(this).closest('tr').find(".colEarningsSuperannuation").text()|| false;
        let colEarningsReportableasW1 = $(this).closest('tr').find(".colEarningsReportableasW1").text()|| false;
        
        if(colEarningsType === 'Ordinary Time Earning')
        {   
            

            $('#ordinaryTimeEarningsLabel').text('Edit Ordinary Time Earnings Details');
            $('#ordinaryTimeEarningsid').val(id);
            $('#edtEarningsName').val(colEarningsNames);
            $('#edtDisplayName').val(colEarningsDisplayName);
            $('#edtRateType').val(colEarningsratetype);
            $('#edtExpenseAccount').val(colEarningsAccounts);
            if(colEarningsPAYG == true)
            {
                $('#formCheck-ShowBalance').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ShowBalance').removeAttr('checked');
            }
            if(colEarningsSuperannuation == true)
            {
                $('#formCheck-ExemptSuperannuation').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptSuperannuation').removeAttr('checked');
            }
            if(colEarningsReportableasW1 == true)
            {
                $('#formCheck-ExemptReportable').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptReportable').removeAttr('checked');
            }

            $('#ordinaryTimeEarningsModal').modal('toggle');
            
           
        }
        else if(colEarningsType === 'OverTime Earning'){

            $('#overtimeEarningsLabel').text('Edit Over Time Earnings Details');
            $('#edtEarningsNameOvertimeid').val(id);
            $('#edtEarningsNameOvertime').val(colEarningsNames);
            $('#edtDisplayNameOvertime').val(colEarningsDisplayName);
            $('#edtRateTypeOvertime').val(colEarningsratetype);
            $('#edtExpenseAccountOvertime').val(colEarningsAccounts);
            if(colEarningsPAYG == true)
            {
                $('#formCheck-ExemptPAYGOvertime').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptPAYGOvertime').removeAttr('checked');
            }
            if(colEarningsSuperannuation == true)
            {
                $('#formCheck-ExemptSuperannuationOvertime').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptSuperannuationOvertime').removeAttr('checked');
            }
            if(colEarningsReportableasW1 == true)
            {
                $('#formCheck-ExemptReportableOvertime').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptReportableOvertime').removeAttr('checked');
            }

            $('#ordinaryTimeEarningsModal').modal('toggle');

        }
        else if(colEarningsType === 'Employee Termnination'){
            
            $('#employmentTermninationPaymentsLabel').text('Edit Employment Termnination Payments Details');
            $('#edtemploymentTermninationid').val(id);
            $('#edtEarningsNameTermnination').val(colEarningsNames);
            $('#edtDisplayNameTermnination').val(colEarningsDisplayName);
            $('#edtRateTypeTermnination').val(colEarningsratetype);
            $('#edtExpenseAccountTermnination').val(colEarningsAccounts);
            if(colEarningsPAYG == true)
            {
                $('#formCheck-ExemptPAYGTermnination').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptPAYGTermnination').removeAttr('checked');
            }
            if(colEarningsSuperannuation == true)
            {
                $('#formCheck-ExemptSuperannuationTermnination').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptSuperannuationTermnination').removeAttr('checked');
            }
            if(colEarningsReportableasW1 == true)
            {
                $('#formCheck-ExemptReportableTermnination').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptReportableTermnination').removeAttr('checked');
            }

            $('#employmentTermninationPaymentsModal').modal('toggle');
        }
        else if(colEarningsType === 'Lump Sum E Earning'){
          
            $('#lumpSumELabel').text('Edit Lump Sum E Details');
            $('#edtLumpSumid').val(id);
            $('#edtEarningsNameLumpSumE').val(colEarningsNames);
            $('#edtDisplayNameLumpSumE').val(colEarningsDisplayName);
            $('#edtRateTypeLumpSumE').val(colEarningsratetype);
            $('#edtExpenseAccountLumpSumE').val(colEarningsAccounts);
            if(colEarningsPAYG == true)
            {
                $('#formCheck-ExemptPAYGLumpSumE').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptPAYGLumpSumE').removeAttr('checked');;
            }
            if(colEarningsSuperannuation == true)
            {
                $('#formCheck-ExemptSuperannuationLumpSumE').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptSuperannuationLumpSumE').removeAttr('checked');
            }
            if(colEarningsReportableasW1 == true)
            {
                $('#formCheck-ExemptReportableLumpSumE').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptReportableLumpSumE').removeAttr('checked');
            }
          
            $('#lumpSumEModal').modal('toggle');


        }
        else if(colEarningsType === 'Bonuese Commission'){
            
            $('#bonusesCommissionsLabel').text('Edit Bonuses & Commissions Details');
            $('#edtEarningsNameBonusesCommissionid').val(id);
            $('#edtEarningsNameBonusesCommissions').val(colEarningsNames);
            $('#edtDisplayNameBonusesCommissions').val(colEarningsDisplayName);
            $('#edtRateTypeBonusesCommissions').val(colEarningsratetype);
            $('#edtExpenseAccountBonusesCommissions').val(colEarningsAccounts);
            if(colEarningsPAYG == true)
            {
                $('#formCheck-ExemptPAYGBonusesCommissions').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptPAYGBonusesCommissions').removeAttr('checked');
            }
            if(colEarningsSuperannuation == true)
            {
                $('#formCheck-ExemptSuperannuationBonusesCommissions').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptSuperannuationBonusesCommissions').removeAttr('checked');
            }
            if(colEarningsReportableasW1 == true)
            {
                $('#formCheck-ExemptReportableBonusesCommissions').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptReportableBonusesCommissions').removeAttr('checked');
            }

            $('#bonusesCommissionsModal').modal('toggle');
        }
        else if(colEarningsType === 'Lump Sumw'){
            $('#lumpSumWLabel').text('Edit Lump Sum W Details');
            $('#edtEarningsNameLumpSumWid').val(id);
            $('#edtEarningsNameLumpSumW').val(colEarningsNames);
            $('#edtDisplayNameLumpSumW').val(colEarningsDisplayName);
            $('#edtRateTypeLumpSumW').val(colEarningsratetype);
            $('#edtExpenseAccountLumpSumW').val(colEarningsAccounts);
            if(colEarningsPAYG == true)
            {
                $('#formCheck-ExemptPAYGLumpSumW').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptPAYGLumpSumW').removeAttr('checked');
            }
            if(colEarningsSuperannuation == true)
            {
                $('#formCheck-ExemptSuperannuationLumpSumW').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptSuperannuationLumpSumW').removeAttr('checked');
            }
            if(colEarningsReportableasW1 == true)
            {
                $('#formCheck-ExemptReportableLumpSumW').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptReportableLumpSumW').removeAttr('checked');
            }

            $('#lumpSumWModal').modal('toggle');
        }
        else{
            
            $('#directorsFeesLabel').text('Edit Directors Fees Details');
            $('#edtEarningsDirectorsFeesid').val(id);
            $('#edtEarningsNameDirectorsFees').val(colEarningsNames);
            $('#edtDisplayNameDirectorsFees').val(colEarningsDisplayName);
            $('#edtRateTypeDirectorsFees').val(colEarningsratetype);
            $('#edtExpenseAccountDirectorsFees').val(colEarningsAccounts);
            if(colEarningsPAYG == true)
            {
                $('#formCheck-ExemptPAYGDirectorsFees').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptPAYGDirectorsFees').removeAttr('checked');
            }
            if(colEarningsSuperannuation == true)
            {
                $('#formCheck-ExemptSuperannuationDirectorsFees').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptSuperannuationDirectorsFees').removeAttr('checked');
            }
            if(colEarningsReportableasW1 == true)
            {
                $('#formCheck-ExemptReportableDirectorsFees').attr('checked', 'checked');
            }
            else
            {
                $('#formCheck-ExemptReportableDirectorsFees').removeAttr('checked');
            }

            $('#directorsFeesModal').modal('toggle');
        }
       
       
           
    });

    $(document).on("click", "#tblAccount tbody tr", function(e) {
        let selectLineID = $('#selectLineID').val()||'edtExpenseAccountAllowance';
        var table = $(this);
          let accountname = table.find(".productName").text();
          let accountID = table.find(".colAccountID").text()||0;
          $('#accountListModal').modal('toggle');

          if(selectLineID == 'edtExpenseAccountAllowance'){
          $('#edtExpenseAccountAllowance').val(accountname);
          $('#edtExpenseAccountID').val(accountID);
          }else if(selectLineID == 'edtDeductionAccount'){
            $('#edtDeductionAccount').val(accountname);
            $('#edtDeductionAccountID').val(accountID);
          }

        $('#tblAccount_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshAccount').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });
    $(document).on("click", "#tblAccount tbody tr", function(e) {
        let selectLineID = $('#selectLineID').val()||'edtExpenseAccountDirectorsFees';
        var table = $(this);
        let accountname = table.find(".productName").text();
        let accountID = table.find(".colAccountID").text()||0;
        $('#accountListModal').modal('toggle');

        if(selectLineID == 'edtExpenseAccountDirectorsFees'){
          $('#edtExpenseAccountDirectorsFees').val(accountname);
          $('#edtExpenseAccountID').val(accountID);
        }else if(selectLineID == 'edtDeductionAccount'){
            $('#edtDeductionAccount').val(accountname);
            $('#edtDeductionAccountID').val(accountID);
        }

        $('#tblAccount_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshAccount').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
        
    });
    $(document).on("click", "#tblAccount tbody tr", function(e) {
        let selectLineID = $('#selectLineID').val()||'edtExpenseAccountTermnination';
        var table = $(this);
          let accountname = table.find(".productName").text();
          let accountID = table.find(".colAccountID").text()||0;
          $('#accountListModal').modal('toggle');

          if(selectLineID == 'edtExpenseAccountTermnination'){
          $('#edtExpenseAccountTermnination').val(accountname);
          $('#edtExpenseAccountID').val(accountID);
          }else if(selectLineID == 'edtDeductionAccount'){
            $('#edtDeductionAccount').val(accountname);
            $('#edtDeductionAccountID').val(accountID);
            
          }

        $('#tblAccount_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshAccount').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblAccount tbody tr", function(e) {
        let selectLineID = $('#selectLineID').val()||'edtExpenseAccount';
        var table = $(this);
          let accountname = table.find(".productName").text();
          let accountID = table.find(".colAccountID").text()||0;
          $('#accountListModal').modal('toggle');

          if(selectLineID == 'edtExpenseAccount'){
          $('#edtExpenseAccount').val(accountname);
          $('#edtExpenseAccountID').val(accountID);
          }else if(selectLineID == 'edtDeductionAccount'){
            $('#edtDeductionAccount').val(accountname);
            $('#edtDeductionAccountID').val(accountID);
          }

        $('#tblAccount_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshAccount').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblAccount tbody tr", function(e) {
        let selectLineID = $('#selectLineID').val()||'edtExpenseAccountOvertime';
     
        var table = $(this);
          let accountname = table.find(".productName").text();
          let accountID = table.find(".colAccountID").text()||0;
          $('#accountListModal').modal('toggle');

          if(selectLineID == 'edtExpenseAccountOvertime'){
          $('#edtExpenseAccountOvertime').val(accountname);
          $('#edtExpenseAccountID').val(accountID);
          }else if(selectLineID == 'edtDeductionAccount'){
            $('#edtDeductionAccount').val(accountname);
            $('#edtDeductionAccountID').val(accountID);
          }

        $('#tblAccount_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshAccount').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblAccount tbody tr", function(e) {
        let selectLineID = $('#selectLineID').val()||'edtExpenseAccountLumpSumE';
        var table = $(this);
          let accountname = table.find(".productName").text();
          let accountID = table.find(".colAccountID").text()||0;
          $('#accountListModal').modal('toggle');

          if(selectLineID == 'edtExpenseAccountLumpSumE'){
          $('#edtExpenseAccountLumpSumE').val(accountname);
          $('#edtExpenseAccountID').val(accountID);
          }else if(selectLineID == 'edtDeductionAccount'){
            $('#edtDeductionAccount').val(accountname);
            $('#edtDeductionAccountID').val(accountID);
          }

        $('#tblAccount_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshAccount').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblAccount tbody tr", function(e) {
        let selectLineID = $('#selectLineID').val()||'edtExpenseAccountBonusesCommissions';
        var table = $(this);
          let accountname = table.find(".productName").text();
          let accountID = table.find(".colAccountID").text()||0;
          $('#accountListModal').modal('toggle');

          if(selectLineID == 'edtExpenseAccountBonusesCommissions'){
          $('#edtExpenseAccountBonusesCommissions').val(accountname);
          $('#edtExpenseAccountID').val(accountID);
          }else if(selectLineID == 'edtDeductionAccount'){
            $('#edtDeductionAccount').val(accountname);
            $('#edtDeductionAccountID').val(accountID);
          }

        $('#tblAccount_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshAccount').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblAccount tbody tr", function(e) {
        let selectLineID = $('#selectLineID').val()||'edtExpenseAccountLumpSumW';
        var table = $(this);
          let accountname = table.find(".productName").text();
          let accountID = table.find(".colAccountID").text()||0;
          $('#accountListModal').modal('toggle');

          if(selectLineID == 'edtExpenseAccountLumpSumW'){
          $('#edtExpenseAccountLumpSumW').val(accountname);
          $('#edtExpenseAccountID').val(accountID);
          }else if(selectLineID == 'edtDeductionAccount'){
            $('#edtDeductionAccount').val(accountname);
            $('#edtDeductionAccountID').val(accountID);
          }

        $('#tblAccount_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshAccount').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblAccount tbody tr", function(e) {
        let selectLineID = $('#selectLineID').val()||'editbankaccount';
        var table = $(this);
          let accountname = table.find(".productName").text();
          let accountID = table.find(".colAccountID").text()||0;
          $('#accountListModal').modal('toggle');

          if(selectLineID == 'editbankaccount'){
          $('#editbankaccount').val(accountname);
          $('#edtExpenseAccountID').val(accountID);
          }else if(selectLineID == 'edtDeductionAccount'){
            $('#edtDeductionAccount').val(accountname);
            $('#edtDeductionAccountID').val(accountID);
          }

        $('#tblAccount_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshAccount').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblAccount tbody tr", function(e) {
        let selectLineID = $('#selectLineID').val()||'editpaygbankaccount';
        var table = $(this);
          let accountname = table.find(".productName").text();
          let accountID = table.find(".colAccountID").text()||0;
          $('#accountListModal').modal('toggle');

          if(selectLineID == 'editpaygbankaccount'){
          $('#editpaygbankaccount').val(accountname);
          $('#edtExpenseAccountID').val(accountID);
          }else if(selectLineID == 'edtDeductionAccount'){
            $('#edtDeductionAccount').val(accountname);
            $('#edtDeductionAccountID').val(accountID);
          }

        $('#tblAccount_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshAccount').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblAccount tbody tr", function(e) {
        let selectLineID = $('#selectLineID').val()||'edtReimbursementAccount';
        var table = $(this);
          let accountname = table.find(".productName").text();
          let accountID = table.find(".colAccountID").text()||0;
          $('#accountListModal').modal('toggle');

          if(selectLineID == 'edtReimbursementAccount'){
          $('#edtReimbursementAccount').val(accountname);
          $('#edtExpenseAccountID').val(accountID);
          }else if(selectLineID == 'edtDeductionAccount'){
            $('#edtDeductionAccount').val(accountname);
            $('#edtDeductionAccountID').val(accountID);
          }

        $('#tblAccount_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshAccount').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblAccount tbody tr", function(e) {
        let selectLineID = $('#selectLineID').val()||'editwagesexpbankaccount';
        var table = $(this);
          let accountname = table.find(".productName").text();
          let accountID = table.find(".colAccountID").text()||0;
          $('#accountListModal').modal('toggle');

          if(selectLineID == 'editwagesexpbankaccount'){
          $('#editwagesexpbankaccount').val(accountname);
          $('#edtExpenseAccountID').val(accountID);
          }else if(selectLineID == 'edtDeductionAccount'){
            $('#edtDeductionAccount').val(accountname);
            $('#edtDeductionAccountID').val(accountID);
          }

        $('#tblAccount_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshAccount').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblAccount tbody tr", function(e) {
        let selectLineID = $('#selectLineID').val()||'editwagespaybankaccount';
        var table = $(this);
          let accountname = table.find(".productName").text();
          let accountID = table.find(".colAccountID").text()||0;
          $('#accountListModal').modal('toggle');

          if(selectLineID == 'editwagespaybankaccount'){
          $('#editwagespaybankaccount').val(accountname);
          $('#edtExpenseAccountID').val(accountID);
          }else if(selectLineID == 'edtDeductionAccount'){
            $('#edtDeductionAccount').val(accountname);
            $('#edtDeductionAccountID').val(accountID);
          }

        $('#tblAccount_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshAccount').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblAccount tbody tr", function(e) {
        let selectLineID = $('#selectLineID').val()||'editsuperliabbankaccount';
        var table = $(this);
          let accountname = table.find(".productName").text();
          let accountID = table.find(".colAccountID").text()||0;
          $('#accountListModal').modal('toggle');

          if(selectLineID == 'editsuperliabbankaccount'){
          $('#editsuperliabbankaccount').val(accountname);
          $('#edtExpenseAccountID').val(accountID);
          }else if(selectLineID == 'edtDeductionAccount'){
            $('#edtDeductionAccount').val(accountname);
            $('#edtDeductionAccountID').val(accountID);
          }

        $('#tblAccount_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshAccount').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

    $(document).on("click", "#tblAccount tbody tr", function(e) {
        let selectLineID = $('#selectLineID').val()||'editsuperexpbankaccount';
        var table = $(this);
          let accountname = table.find(".productName").text();
          let accountID = table.find(".colAccountID").text()||0;
          $('#accountListModal').modal('toggle');

          if(selectLineID == 'editsuperexpbankaccount'){
          $('#editsuperexpbankaccount').val(accountname);
          $('#edtExpenseAccountID').val(accountID);
          }else if(selectLineID == 'edtDeductionAccount'){
            $('#edtDeductionAccount').val(accountname);
            $('#edtDeductionAccountID').val(accountID);
          }

        $('#tblAccount_filter .form-control-sm').val('');
        setTimeout(function () {
            $('.btnRefreshAccount').trigger('click');
            $('.fullScreenSpin').css('display', 'none');
        }, 1000);
    });

  
});

Template.payrollrules.events({
    
    'click .btnAddNewPayCalender':function(){
        let id = $('#paycalendarId').val();
        var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
        var yyyy = today.getFullYear();
        today = dd+'/'+mm+'/'+ yyyy;       
        $('#edtStartDate').val(today);
        $('#edtFirstPaymentDate').val(today)
        $('#paycalendarId').val(0);
        $('#calender_name').val('');
        $('#newPayCalendarLabel').text('Add New Pay Calender');
        $('#payperiod').val('');    
    },

    'click .btnAddNewAllowance':function(){
        $('#edtAllowanceID').val(0);
        $('#edtAllowanceType').val('');
        $('#edtEarningsNameAllowance').val('');
        $('#edtDisplayNameAllowance').val('');
        $('#edtAllowanceAmount').val('');
        $('#edtExpenseAccountAllowance').val('');
        $('#formCheck-ExemptPAYGAllowance').removeAttr('checked');
        $('#formCheck-ExemptSuperannuationAllowance').removeAttr('checked');
        $('#formCheck-ExemptReportableAllowance').removeAttr('checked');
    },

    'click .btnAddNewHoliday':function(){
        
        let id = $('#holidayid').val();
        var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
        var yyyy = today.getFullYear();

        today = yyyy+'-'+mm+'-'+dd;      
        
        today = dd+'/'+mm+'/'+yyyy;
        if(id == 0 || id == '')
        {
             $('#edtHolidayDate').val(today);
             $('#holidayname').val('');
             $('#holidayid').val(0);
             $('#holidaygroup').val('');
             $('#newHolidayLabel').text('Add New Holiday');
           
        }
        else
        {  
             $('#edtHolidayDate').val(today);
             $('#holidayname').val('');
             $('#holidayid').val(0);
             $('#holidaygroup').val('');
           

        }

    },
    
    'click #btnEarnings': function() {
        document.getElementById("allowances").style.display = "none";
        document.getElementById("earnings").style.display = "block";
        document.getElementById("deductions").style.display = "none";
        document.getElementById("reimbursements").style.display = "none";
        document.getElementById("leave").style.display = "none";
    },
    
    'click #btnAllowances': function() {
        document.getElementById("allowances").style.display = "block";
        document.getElementById("earnings").style.display = "none";
        document.getElementById("deductions").style.display = "none";
        document.getElementById("reimbursements").style.display = "none";
        document.getElementById("leave").style.display = "none";
    },
    'click #btnDeductions': function() {
        document.getElementById("allowances").style.display = "none";
        document.getElementById("earnings").style.display = "none";
        document.getElementById("deductions").style.display = "block";
        document.getElementById("reimbursements").style.display = "none";
        document.getElementById("leave").style.display = "none";
    },
    'click #btnReiumbursement': function() {
        document.getElementById("allowances").style.display = "none";
        document.getElementById("earnings").style.display = "none";
        document.getElementById("deductions").style.display = "none";
        document.getElementById("reimbursements").style.display = "block";
        document.getElementById("leave").style.display = "none";
    },
    'click #btnLeave': function() {
        document.getElementById("allowances").style.display = "none";
        document.getElementById("earnings").style.display = "none";
        document.getElementById("deductions").style.display = "none";
        document.getElementById("reimbursements").style.display = "none";
        document.getElementById("leave").style.display = "block";
    },
    'click .btnRefresh': function() {
        $('.fullScreenSpin').css('display', 'inline-block');
        location.reload(true);
    },
    'change #ruleModifierInitial': function(event) {
        var optionSelected = $(event.target).val();

        if (optionSelected == "greaterthan") {
            document.getElementById("ruleModifierTimeDiv").style.display = "inline-flex";
            document.getElementById("ruleModifierDayDiv").style.display = "none";
            $("#ruleModifierInitial").addClass("noradiusright");
        } else if (optionSelected == "lessthan") {
            document.getElementById("ruleModifierTimeDiv").style.display = "inline-flex";
            document.getElementById("ruleModifierDayDiv").style.display = "none";
            $("#ruleModifierInitial").addClass("noradiusright");
        } else if (optionSelected == "dayoftheweek") {
            document.getElementById("ruleModifierTimeDiv").style.display = "none";
            document.getElementById("ruleModifierDayDiv").style.display = "inline-flex";
            $("#ruleModifierInitial").addClass("noradiusright");
        } else {
            document.getElementById("ruleModifierTimeDiv").style.display = "none";
            document.getElementById("ruleModifierDayDiv").style.display = "none";
            $("#ruleModifierInitial").removeClass("noradiusright");

        }


    },
    'click #ruleLessThan': function() {
        document.getElementById("ruleConstructOne").value = "Less Than";
        document.getElementById("ruleModifierTimeDiv").style.display = "inline-flex";
        document.getElementById("ruleModifierDay").style.display = "none";
    },
    'click #ruleSpecificDay': function() {
        document.getElementById("ruleConstructOne").value = "Specific Day";
        document.getElementById("ruleModifierTime").style.display = "none";
        document.getElementById("ruleModifierDay").style.display = "inline-flex";
    },

    'click .addholiday':function(){
        
        let templateObject = Template.instance();
        $('.fullScreenSpin').css('display','inline-block');
        let taxRateService = new TaxRateService();
        let holidayname = $('#holidayname').val() || '';
        let edtHolidayDate = $('#edtHolidayDate').val() || '';
        let holidaygroup = $('#holidaygroup').val() || '';

        let oldholiday = $('#holidayid').val() || 0 ;
      
    
        if (holidayname === '') {
            $('.fullScreenSpin').css('display','none');
            swal('Holiday name has not been selected!', '', 'warning');
            e.preventDefault();
         }
         else {

            if(oldholiday != 0)
            {
                $('.fullScreenSpin').css('display','inline-block');
                objDetails = {
                    type: "Tpayrollholidays",
                    fields: {
                        ID: parseInt(oldholiday),
                        PayrollHolidaysName:holidayname,
                        PayrollHolidaysGroupName:holidaygroup,
                        PayrollHolidaysDate:moment(edtHolidayDate,'DD/MM/YYYY').format('YYYY-MM-DD'),
                        PayrollHolidaysActive:true     
                    }
                };
                taxRateService.saveHoliday(objDetails).then(function (objDetails) {
                    
                        $('.fullScreenSpin').css('display','none');
                        swal({
                        title: 'Success',
                        text: 'Holiday saved successfully.',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'

                        }).then((result) => {
                        if (result.value) {
                             sideBarService.getHolidayData(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("TPayrollHolidays", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#addholdayhide').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=holiday','_self');
                                }).catch(function (err) {
                                    $('#addholdayhide').trigger('click');
                                   $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=holiday','_self');
                                });
                              }).catch(function (err) {
                                $('#addholdayhide').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=holiday','_self');
                              });
                        }else if (result.dismiss === 'cancel') {

                        }
                        });

                }).catch(function (err) {

                    $('.fullScreenSpin').css('display','none');
                    swal({
                    title: 'Oooops...',
                    text: err,
                    type: 'error',
                    showCancelButton: true,
                    confirmButtonText: 'Try Again'
                    }).then((result) => {
                    if (result.value) {
                
                    }else if (result.dismiss === 'cancel') {

                    }
                    });
                
                });

            }
            else
                {
                    $('.fullScreenSpin').css('display','inline-block');
                    taxRateService.checkHolidaybyName(holidayname).then(function (data) {                                
                        holidayid = data.tpayrollholidays;
                        var tpayholidadata = holidayid[0].fields.ID;

                        objDetails = {
                        type: "Tpayrollholidays",
                        fields: {
                            ID: parseInt(tpayholidadata),
                            PayrollHolidaysName:holidayname,
                            PayrollHolidaysGroupName:holidaygroup,
                            PayrollHolidaysDate:moment(edtHolidayDate,'DD/MM/YYYY').format('YYYY-MM-DD'),
                            PayrollHolidaysActive:true     
                        }
                        };

                    taxRateService.saveHoliday(objDetails).then(function (objDetails) {

                        $('.fullScreenSpin').css('display','none');
                        swal({
                            title: 'Success',
                            text: 'Holiday saved successfully.',
                            type: 'success',
                            showCancelButton: false,
                            confirmButtonText: 'Done'

                        }).then((result) => {
                            if (result.value) {
                                sideBarService.getHolidayData(initialBaseDataLoad, 0).then(function (dataReload) {
                                    addVS1Data("TPayrollHolidays", JSON.stringify(dataReload)).then(function (datareturn) {
                                        $('#addholdayhide').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=holiday','_self');
                                    }).catch(function (err) {
                                        $('#addholdayhide').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=holiday','_self');
                                    });
                                  }).catch(function (err) {
                                    $('#addholdayhide').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=holiday','_self');
                                  });
                            }else if (result.dismiss === 'cancel') {
                        
                            }
                        });
                    
                    }).catch(function (err) {

                            $('.fullScreenSpin').css('display','none');
                            swal({
                            title: 'Oooops...',
                            text: err,
                            type: 'error',
                            showCancelButton: false,
                            confirmButtonText: 'Try Again'
                            }).then((result) => {
                            if (result.value) {
                            } else if (result.dismiss === 'cancel') {
                            }
                            }); 
                      });
                  
                    }).catch(function (err) {
                            objDetails = {
                                type: "Tpayrollholidays",
                                fields: {
                                    PayrollHolidaysName:holidayname,
                                    PayrollHolidaysGroupName:holidaygroup,
                                    PayrollHolidaysDate:moment(edtHolidayDate,'DD/MM/YYYY').format('YYYY-MM-DD'),
                                    PayrollHolidaysActive:true          
                                }
                            };

                            taxRateService.saveHoliday(objDetails).then(function (objDetails) {
                                $('.fullScreenSpin').css('display','none');
                                swal({
                                    title: 'Success',
                                    text: 'Holiday saved successfully.',
                                    type: 'success',
                                    showCancelButton: false,
                                    confirmButtonText: 'Done'

                                }).then((result) => {
                                    if (result.value) {
                                        sideBarService.getHolidayData(initialBaseDataLoad, 0).then(function (dataReload) {
                                            addVS1Data("TPayrollHolidays", JSON.stringify(dataReload)).then(function (datareturn) {
                                                $('#addholdayhide').trigger('click');
                                                $('.fullScreenSpin').css('display','inline-block');
                                              
                                                window.open('/payrollrules?active_key=holiday','_self');
                                            }).catch(function (err) {

                                                $('#addholdayhide').trigger('click');
                                                $('.fullScreenSpin').css('display','inline-block');
                                                window.open('/payrollrules?active_key=holiday','_self');
                                            });
                                          }).catch(function (err) {

                                            $('#addholdayhide').trigger('click');
                                             $('.fullScreenSpin').css('display','inline-block');
                                                window.open('/payrollrules?active_key=holiday','_self');
                                          });
                                    }else if (result.dismiss === 'cancel') {
                                
                                    }
                                });
                        
                            }).catch(function (err) {
                                
                                    $('.fullScreenSpin').css('display','none');
                                    swal({
                                    title: 'Oooops...',
                                    text: err,
                                    type: 'error',
                                    showCancelButton: false,
                                    confirmButtonText: 'Try Again'
                                    }).then((result) => {
                                    if (result.value) {
                                
                                    } else if (result.dismiss === 'cancel') {

                                    }
                                    });
                            
                            });

                    });
            }   
          
    
                 
         }
     },

   'click .btnSaveAllowance':function(){
        
    let templateObject = Template.instance();
    $('.fullScreenSpin').css('display','inline-block');
     let taxRateService = new TaxRateService();
     let allowanceID = $('#edtAllowanceID').val()|| 0;
     let allowanceType = $('#edtAllowanceType').val()||'';
     let edtEarningsNameAllowance = $('#edtEarningsNameAllowance').val() || '';
     let displayName = $('#edtDisplayNameAllowance').val();
     let expensesAccount = $('#edtExpenseAccountAllowance').val();
     let amount = $('#edtAllowanceAmount').val();
     let exemptFromPAYG = false;
     let exemptFromSupernation = false;
     let reportableW1ActivityStatement = false;
     let expensesAccountID = $('#edtExpenseAccountID').val()||0;
     if($('#formCheck-ExemptPAYGAllowance').is(':checked')){
        exemptFromPAYG = true;
     }else{
        exemptFromPAYG = false;
     }
     if($('#formCheck-ExemptSuperannuationAllowance').is(':checked')){
        exemptFromSupernation = true;
     }else{
        exemptFromSupernation = false;
     }
     if($('#formCheck-ExemptReportableAllowance').is(':checked')){
        reportableW1ActivityStatement = true;
     }else{
        reportableW1ActivityStatement = false;
     }


     if (edtEarningsNameAllowance === '') {
        $('.fullScreenSpin').css('display','none');
        swal('Allowance Name has not been selected!', '', 'warning');
        e.preventDefault();
    } 
     else 
     {
        if(allowanceID != 0 )
        {
            $('.fullScreenSpin').css('display','inline-block');
            objDetails = {
                type: "TAllowance",
                fields: {
                    ID: parseInt(allowanceID),
                    Active: true,
                    Accountid: expensesAccountID,
                    Accountname: expensesAccount,
                    Amount:Number(amount.replace(/[^0-9.-]+/g, "")) || 0,
                    Basedonid:1,
                    AllowanceType: allowanceType,
                    Description: edtEarningsNameAllowance,
                    DisplayIn: displayName,
                    Superinc: exemptFromSupernation,
                    Workcoverexempt: reportableW1ActivityStatement,
                    Payrolltaxexempt: exemptFromPAYG            
                }
            };
        
            taxRateService.saveAllowance(objDetails).then(function (objDetails) {
                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'Allowance saved Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'
        
                 }).then((result) => {
                    if (result.value) {
                        sideBarService.getAllowance(initialBaseDataLoad, 0).then(function (dataReload) {
                            addVS1Data("TAllowance", JSON.stringify(dataReload)).then(function (datareturn) {
                                $('#addallowhide').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem','_self');
                            }).catch(function (err) {
                                $('#addallowhide').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem','_self');
                            });
                          }).catch(function (err) {
                            $('#addallowhide').trigger('click');
                            $('.fullScreenSpin').css('display','inline-block');
                            window.open('/payrollrules?active_key=payitem','_self');
                          });
                    }else if (result.dismiss === 'cancel') {
                
                    }
                });
        
            
        
                
             }).catch(function (err) {
        
                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Oooops...',
                    text: err,
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'ok'
                    }).then((result) => {
                    if (result.value) {
                    } else if (result.dismiss === 'cancel') {
                    }
                });        
                            
             
            });
        
        
        }
        else
        {
            $('.fullScreenSpin').css('display','inline-block');
            
              taxRateService.checkAllowanceByName(edtEarningsNameAllowance).then(function (data) {
                
                 var  allowancedata = data.tallowance[0];
                 objDetails = {
                    type: "TAllowance",
                    fields: {
                        ID: parseInt(allowancedata.fields.ID),
                        Active: true,
                        Accountid: expensesAccountID,
                        Accountname: expensesAccount,
                        Amount:Number(amount.replace(/[^0-9.-]+/g, "")) || 0,
                        Basedonid:1,
                        AllowanceType: allowanceType,
                        Description: edtEarningsNameAllowance,
                        DisplayIn: displayName,
                        Superinc: exemptFromSupernation,
                        Workcoverexempt: reportableW1ActivityStatement,
                        Payrolltaxexempt: exemptFromPAYG            
                    }
                };

              
        
                taxRateService.saveAllowance(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Success',
                        text: 'Allowance saved Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'
            
                    }).then((result) => {
                        if (result.value) {
                            sideBarService.getAllowance(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("TAllowance", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#addallowhide').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem','_self');
                                }).catch(function (err) {
                                    $('#addallowhide').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');   
                                    window.open('/payrollrules?active_key=payitem','_self');
                                });
                            }).catch(function (err) {
                                $('#addallowhide').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem','_self');
                            });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });
                        
                    
                }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                       swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'ok'
                        }).then((result) => {
                        if (result.value) {
                        } else if (result.dismiss === 'cancel') {
                        }
                        });        
                            
                });
              }).catch(function (err) {
                objDetails = {
                    type: "TAllowance",
                    fields: {
                      
                        Active: true,
                        Accountid: expensesAccountID,
                        Accountname: expensesAccount,
                        Amount:Number(amount.replace(/[^0-9.-]+/g, "")) || 0,
                        Basedonid:1,
                        AllowanceType: allowanceType,
                        Description: edtEarningsNameAllowance,
                        DisplayIn: displayName,
                        Superinc: exemptFromSupernation,
                        Workcoverexempt: reportableW1ActivityStatement,
                        Payrolltaxexempt: exemptFromPAYG            
                    }
                };
        
                  taxRateService.saveAllowance(objDetails).then(function (objDetails) {
        
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Success',
                        text: 'Allowance saved Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'
            
                    }).then((result) => {
                        if (result.value) {
                            sideBarService.getAllowance(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("TAllowance", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#addallowhide').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem','_self');
                                }).catch(function (err) {
                                    $('#addallowhide').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem','_self');
                                });
                            }).catch(function (err) {
                                $('#addallowhide').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem','_self');
                            });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });
        
        
                  
                  }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                       swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'ok'
                        }).then((result) => {
                        if (result.value) {
                        } else if (result.dismiss === 'cancel') {
                        }
                        });        
                     
                       
                  });
             });
        }
       
                  
     }

    },

    'click .btnSaveRatePOP': function(){
        let templateObject = Template.instance();
        $('.fullScreenSpin').css('display','inline-block');
   
        let taxRateService = new TaxRateService();

        let rateTypeId = $('#edtRateID').val()|| 0;
        let ratetypedescription = $('#edtRateDescription').val()||'';

        if (ratetypedescription === '') {
            $('.fullScreenSpin').css('display','none');
            swal('Rate type description can not be blank !', '', 'warning');
            e.preventDefault();
        } 
        else {
         
         
            $('.fullScreenSpin').css('display','inline-block');
         
         
          if(rateTypeId == ""){
            
            taxRateService.checkRateTypeByName(ratetypedescription).then(function (data) {
             rateTypeId = data.tpayratetype[0].Id;
              objDetails = {
                 type: "TPayRateType",
                 fields: {
                     ID: parseInt(rateTypeId),                   
                     Description: ratetypedescription,
                    
                 }
             };

              taxRateService.saveRateType(objDetails).then(function (objDetails) {
                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'New Rate Type saved Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'

                }).then((result) => {
                    if (result.value) {
                        sideBarService.getRateTypes(initialBaseDataLoad, 0).then(function (dataReload) {
                            addVS1Data("TPayRateType", JSON.stringify(dataReload)).then(function (datareturn) {
                                window.open('/payrollrules?active_key=payitem','_self');
                            }).catch(function (err) {
                                window.open('/payrollrules?active_key=payitem','_self');
                            });
                          }).catch(function (err) {
                            window.open('/payrollrules?active_key=payitem','_self');
                          });
                    }else if (result.dismiss === 'cancel') {
                
                    }
                });
              }).catch(function (err) {
                $('.fullScreenSpin').css('display','none');
                swal({
                title: 'Oooops...',
                text: err,
                type: 'error',
                showCancelButton: false,
                confirmButtonText: 'Try Again'
                }).then((result) => {
                if (result.value) {
                } else if (result.dismiss === 'cancel') {

                }
                });
                
              });
            }).catch(function (err) {
                objDetails = {
                    type: "TPayRateType",
                    fields: {
                        ID: parseInt(rateTypeId),                   
                        Description: ratetypedescription,
                      }
                       
                };

             taxRateService.saveRateType(objDetails).then(function (objDetails) {

                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'New Rate Type saved Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'

                }).then((result) => {
                    if (result.value) {
                        sideBarService.getRateTypes(initialBaseDataLoad, 0).then(function (dataReload) {
                            addVS1Data("TPayRateType", JSON.stringify(dataReload)).then(function (datareturn) {
                                window.open('/payrollrules?active_key=payitem','_self');
                            }).catch(function (err) {
                                window.open('/payrollrules?active_key=payitem','_self');
                            });
                          }).catch(function (err) {
                            window.open('/payrollrules?active_key=payitem','_self');
                          });
                    }else if (result.dismiss === 'cancel') {
                
                    }
                });
             
             }).catch(function (err) {
                $('.fullScreenSpin').css('display','none');
                swal({
                title: 'Oooops...',
                text: err,
                type: 'error',
                showCancelButton: false,
                confirmButtonText: 'Try Again'
                }).then((result) => {
                if (result.value) {
                } else if (result.dismiss === 'cancel') {

                }
                });
               
             });
            });

          }else{
            objDetails = {
                type: "TPayRateType",
                fields: {
                    ID: parseInt(rateTypeId),                   
                    Description: ratetypedescription,
                  }
                   
                };

          taxRateService.saveRateType(objDetails).then(function (objDetails) {

                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'New Rate Type saved Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'

                }).then((result) => {
                    if (result.value) {
                        sideBarService.getRateTypes(initialBaseDataLoad, 0).then(function (dataReload) {
                            addVS1Data("TPayRateType", JSON.stringify(dataReload)).then(function (datareturn) {
                                window.open('/payrollrules?active_key=payitem','_self');
                            }).catch(function (err) {
                                window.open('/payrollrules?active_key=payitem','_self');
                            });
                          }).catch(function (err) {
                            window.open('/payrollrules?active_key=payitem','_self');
                          });
                    }else if (result.dismiss === 'cancel') {
                
                    }
                });
          
          }).catch(function (err) {
            $('.fullScreenSpin').css('display','none');
            swal({
            title: 'Oooops...',
            text: err,
            type: 'error',
            showCancelButton: false,
            confirmButtonText: 'Try Again'
            }).then((result) => {
            if (result.value) {
            } else if (result.dismiss === 'cancel') {

            }
            });
             
          });
          }


        }
    },

    'click .btnSavefund':function(){
     
        let templateObject = Template.instance();
        $('.fullScreenSpin').css('display','inline-block');
   
        let taxRateService = new TaxRateService();

        let fundTypeId = $('#edtfundID').val()|| 0;
        let fundtypedescription = $('#edtFundDescription').val()||'';

        if (fundtypedescription === '') {
            $('.fullScreenSpin').css('display','none');
            swal('Fund type description can not be blank !', '', 'warning');
            e.preventDefault();
        } else {
          $('.fullScreenSpin').css('display','inline-block');
          if(fundTypeId == ""){
            
            taxRateService.checkfundTypeByName(fundtypedescription).then(function (data) {
                fundTypeId = data.tsupertype[0].Id;
                 objDetails = {
                 type: "TSuperType",
                 fields: {
                     ID: parseInt(fundTypeId),                   
                     Description: fundtypedescription,
                    
                 }
             };

             taxRateService.saveSuperType(objDetails).then(function (objDetails) {

                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'New Super Fund Type saved Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'

                }).then((result) => {
                    if (result.value) {
                        sideBarService.getAllFundType(initialBaseDataLoad, 0).then(function (dataReload) {
                            addVS1Data("TSuperType", JSON.stringify(dataReload)).then(function (datareturn) {
                                window.open('/payrollrules?active_key=super','_self');
                            }).catch(function (err) {
                                window.open('/payrollrules?active_key=super','_self');
                            });
                          }).catch(function (err) {
                                window.open('/payrollrules?active_key=super','_self');
                          });
                    }else if (result.dismiss === 'cancel') {
                
                    }
                });
               
             }).catch(function (err) {
               $('.fullScreenSpin').css('display','none');
               swal({
               title: 'Oooops...',
               text: err,
               type: 'error',
               showCancelButton: false,
               confirmButtonText: 'Try Again'
               }).then((result) => {
               if (result.value) {
               } else if (result.dismiss === 'cancel') {

               }
               });
                
             });
            }).catch(function (err) {
                objDetails = {
                    type: "TSuperType",
                    fields: {
                        ID: parseInt(fundTypeId),                   
                        Description: fundtypedescription,
                      }
                       
                    };

             taxRateService.saveSuperType(objDetails).then(function (objDetails) {

                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'New Super Fund Type saved Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'

                }).then((result) => {
                    if (result.value) {
                        sideBarService.getAllFundType(initialBaseDataLoad, 0).then(function (dataReload) {
                            addVS1Data("TSuperType", JSON.stringify(dataReload)).then(function (datareturn) {
                                window.open('/payrollrules?active_key=super','_self');
                            }).catch(function (err) {
                                window.open('/payrollrules?active_key=super','_self');
                            });
                          }).catch(function (err) {
                                window.open('/payrollrules?active_key=super','_self');
                          });
                    }else if (result.dismiss === 'cancel') {
                
                    }
                });
              
             }).catch(function (err) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                    title: 'Oooops...',
                    text: err,
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'Try Again'
                    }).then((result) => {
                    if (result.value) {
                    
                    } else if (result.dismiss === 'cancel') {

                    }
                    });
               
             });
            });

         }else{
            objDetails = {
                type: "TSuperType",
                fields: {
                    ID: parseInt(fundTypeId),                   
                    Description: fundtypedescription,
                  }
                   
                };

          taxRateService.saveSuperType(objDetails).then(function (objDetails) {

            $('.fullScreenSpin').css('display','none');
            swal({
                title: 'Success',
                text: 'New Super Fund Type saved Successfully',
                type: 'success',
                showCancelButton: false,
                confirmButtonText: 'Done'

            }).then((result) => {
                if (result.value) {
                    sideBarService.getAllFundType(initialBaseDataLoad, 0).then(function (dataReload) {
                        addVS1Data("TSuperType", JSON.stringify(dataReload)).then(function (datareturn) {
                            window.open('/payrollrules?active_key=super','_self');
                        }).catch(function (err) {
                            window.open('/payrollrules?active_key=super','_self');
                        });
                      }).catch(function (err) {
                           window.open('/payrollrules?active_key=super','_self');
                      });
                }else if (result.dismiss === 'cancel') {
            
                }
            });
           
          }).catch(function (err) {
            $('.fullScreenSpin').css('display','none');
            swal({
            title: 'Oooops...',
            text: err,
            type: 'error',
            showCancelButton: false,
            confirmButtonText: 'Try Again'
            }).then((result) => {
            if (result.value) {
           
            } else if (result.dismiss === 'cancel') {

            }
            });
             
          });
         }


        }


    },

    'click .btnSaveDeduction': function(){
        let templateObject = Template.instance();
        $('.fullScreenSpin').css('display','inline-block');
        let deductionName = $('#edtDeductionName').val()||'';
        let taxRateService = new TaxRateService();

        let deductionID = $('#edtDeductionID').val()||'';

        let deductionType = $('#edtDeductionTitle').val()||'None';
        let isTaxexempt = false;
        let isIsWorkPlacegiving = false;
        let isUnionfees = false;
        if(deductionType == 'None'){
          isTaxexempt = true;
        }else if(deductionType == 'WorkplaceGiving'){
          isIsWorkPlacegiving = true;
        }else if(deductionType == 'UnionAssociationFees'){
          isUnionfees = true;
        }
        let displayName = 'Deductions';
        let deductionAccount = $('#edtDeductionAccount').val();
        let deductionAccountID = $('#edtDeductionAccountID').val()||0;

        let deductionAmount = $('#edtDeductionAmount').val()||0;

        let exemptFromPAYG = false;
        let exemptFromSupernation = false;
        let reportableW1ActivityStatement = false;

        if($('#formCheck-ReducesPAYGDeduction').is(':checked')){
          exemptFromPAYG = true;
        }else{
          exemptFromPAYG = false;
        }

        if($('#formCheck-ReducesSuperannuationDeduction').is(':checked')){
          exemptFromSupernation = true;
        }else{
          exemptFromSupernation = false;
        }

        if($('#formCheck-ExcludedDeduction').is(':checked')){
          reportableW1ActivityStatement = true;
        }else{
          reportableW1ActivityStatement = false;
        }


        if (deductionName === '') {
            $('.fullScreenSpin').css('display','none');
            swal('Deduction has not been selected!', '', 'warning');
            e.preventDefault();
        } else {
          $('.fullScreenSpin').css('display','inline-block');

          if(deductionID == ""){
            taxRateService.checkDeductionByName(deductionName).then(function (data) {
              deductionID = data.tdeduction[0].Id;
              objDetails = {
                 type: "TDeduction",
                 fields: {
                     ID: parseInt(deductionID),
                     Active: true,
                     Accountid: deductionAccountID,
                     Accountname: deductionAccount,
                     IsWorkPlacegiving:isIsWorkPlacegiving,
                     Taxexempt:isTaxexempt,
                     Unionfees:isUnionfees,
                     Amount:Number(deductionAmount.replace(/[^0-9.-]+/g, "")) || 0,
                     Basedonid:1,
                     //AllowanceType: allowanceType,
                     Description: deductionName,
                     DisplayIn: displayName,
                     // Superinc: exemptFromSupernation,
                     // Workcoverexempt: reportableW1ActivityStatement,
                     // Payrolltaxexempt: exemptFromPAYG
                 }
             };

             console.log(objDetails);

            taxRateService.saveDeduction(objDetails).then(function (objDetails) {
               
                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'New Deduction saved Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'

                }).then((result) => {
                    if (result.value) {
                        sideBarService.getDeduction(initialBaseDataLoad, 0).then(function (dataReload) {
                            addVS1Data("TDeduction", JSON.stringify(dataReload)).then(function (datareturn) {
                                $('#addductionmodelhide').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=deduction','_self');
                            }).catch(function (err) {
                                $('#addductionmodelhide').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=deduction','_self');
                            });
                          }).catch(function (err) {
                            $('#addductionmodelhide').trigger('click');
                            $('.fullScreenSpin').css('display','inline-block');
                            window.open('/payrollrules?active_key=payitem&itemtype=deduction','_self');
                          });
                    }else if (result.dismiss === 'cancel') {
                
                    }
                });

             }).catch(function (err) {
                $('.fullScreenSpin').css('display','none');
                swal({
                title: 'Oooops...',
                text: err,
                type: 'error',
                showCancelButton: false,
                confirmButtonText: 'Try Again'
                }).then((result) => {
                if (result.value) {
                } else if (result.dismiss === 'cancel') {

                }
                });
                 
             });
            }).catch(function (err) {
              objDetails = {
                 type: "TDeduction",
                 fields: {
                     Active: true,
                     Active: true,
                     Accountid: deductionAccountID,
                     Accountname: deductionAccount,
                     IsWorkPlacegiving:isIsWorkPlacegiving,
                     Taxexempt:isTaxexempt,
                     Unionfees:isUnionfees,
                     Amount:Number(deductionAmount.replace(/[^0-9.-]+/g, "")) || 0,
                     Basedonid:1,
                     //AllowanceType: allowanceType,
                     Description: deductionName,
                     DisplayIn: displayName,
                 }
             };

             taxRateService.saveDeduction(objDetails).then(function (objDetails) {
                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'New Dedution saved Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'

                }).then((result) => {
                    if (result.value) {
                        sideBarService.getDeduction(initialBaseDataLoad, 0).then(function (dataReload) {
                            addVS1Data("TDeduction", JSON.stringify(dataReload)).then(function (datareturn) {
                                $('#addductionmodelhide').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=deduction','_self');
                            }).catch(function (err) {
                                $('#addductionmodelhide').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=deduction','_self');
                            });
                          }).catch(function (err) {
                            $('#addductionmodelhide').trigger('click');
                            $('.fullScreenSpin').css('display','inline-block');
                            window.open('/payrollrules?active_key=payitem&itemtype=deduction','_self');
                          });
                    }else if (result.dismiss === 'cancel') {
                
                    }
                });

             }).catch(function (err) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                    title: 'Oooops...',
                    text: err,
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'Try Again'
                    }).then((result) => {
                    if (result.value) {
                    
                    } else if (result.dismiss === 'cancel') {

                    }
                    });
                
             });
            });

         }else{
           objDetails = {
              type: "TDeduction",
              fields: {
                  ID: parseInt(deductionID),
                  Active: true,
                  Accountid: deductionAccountID,
                  Accountname: deductionAccount,
                  IsWorkPlacegiving:isIsWorkPlacegiving,
                  Taxexempt:isTaxexempt,
                  Unionfees:isUnionfees,
                  Amount:Number(deductionAmount.replace(/[^0-9.-]+/g, "")) || 0,
                  Basedonid:1,
                  //AllowanceType: allowanceType,
                  Description: deductionName,
                  DisplayIn: displayName,
              }
          };

          taxRateService.saveDeduction(objDetails).then(function (objDetails) {

            $('.fullScreenSpin').css('display','none');
            swal({
                title: 'Success',
                text: 'New Dedution saved Successfully',
                type: 'success',
                showCancelButton: false,
                confirmButtonText: 'Done'

            }).then((result) => {
                if (result.value) {
                    sideBarService.getDeduction(initialBaseDataLoad, 0).then(function (dataReload) {
                        addVS1Data("TDeduction", JSON.stringify(dataReload)).then(function (datareturn) {
                            $('#addductionmodelhide').trigger('click');
                            $('.fullScreenSpin').css('display','inline-block');
                            window.open('/payrollrules?active_key=payitem&itemtype=deduction','_self');
                        }).catch(function (err) {
                            $('#addductionmodelhide').trigger('click');
                            $('.fullScreenSpin').css('display','inline-block');
                            window.open('/payrollrules?active_key=payitem&itemtype=deduction','_self');
                        });
                      }).catch(function (err) {
                        $('#addductionmodelhide').trigger('click');
                        $('.fullScreenSpin').css('display','inline-block');
                        window.open('/payrollrules?active_key=payitem&itemtype=deduction','_self');
                      });
                }else if (result.dismiss === 'cancel') {
            
                }
            });
            
          }).catch(function (err) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                    title: 'Oooops...',
                    text: err,
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'Try Again'
                    }).then((result) => {
                    if (result.value) {
                
                    } else if (result.dismiss === 'cancel') {

                    }
                    });
              
          });
         }


        }
    },
    

   'click .savenewcalender': function(){
      
        let templateObject = Template.instance();
        $('.fullScreenSpin').css('display','inline-block');
        let taxRateService = new TaxRateService();
        let oldpaycalenderid  = $('#paycalendarId').val() || 0;
        let payperiod = $('#payperiod').val() || '';
        let calender_name = $('#calender_name').val() || '';
        let startdate = $('#edtStartDate').val() || '';
        let FirstPaymentDate = $('#edtFirstPaymentDate').val() || '';
      
         if (payperiod === '') {
            $('.fullScreenSpin').css('display','none');
            swal('Pay period has not been selected!', '', 'warning');
            e.preventDefault();
         }
         else 
         {
            if(oldpaycalenderid != 0 )
            {
                $('.fullScreenSpin').css('display','inline-block');
                objDetails = {
                    type: "TPayrollCalendars",
                    fields: {
                        ID: parseInt(oldpaycalenderid),
                        PayrollCalendarPayPeriod:payperiod,
                        PayrollCalendarName:calender_name,
                        PayrollCalendarStartDate:moment(startdate,'DD/MM/YYYY').format('YYYY-MM-DD'),
                        PayrollCalendarFirstPaymentDate:moment(FirstPaymentDate,'DD/MM/YYYY').format('YYYY-MM-DD'),
                        PayrollCalendarActive :true,              
                    }
                };
            
                taxRateService.saveCalender(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Success',
                        text: 'Pay Calendar saved successfully.',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'
            
                     }).then((result) => {
                        if (result.value) {
                            sideBarService.getCalender(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("TPayrollCalendars", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#closemodel').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                     window.open('/payrollrules?active_key=calender','_self');
                                }).catch(function (err) {
                                    $('#closemodel').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                     
                                    window.open('/payrollrules?active_key=calender','_self');
                                });
                              }).catch(function (err) {
                                  $('#closemodel').trigger('click');
                                  $('.fullScreenSpin').css('display','inline-block');
                        
                                  window.open('/payrollrules?active_key=calender','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });
            
                
            
                    
                 }).catch(function (err) {
            
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'ok'
                        }).then((result) => {
                        if (result.value) {
                        } else if (result.dismiss === 'cancel') {
                        }
                    });        
                                
                 
                });
            
            
            }
            else
            {
                $('.fullScreenSpin').css('display','inline-block');
                
                 taxRateService.checkCalenderName(calender_name).then(function (data) {
            
                    calenderID = data.tpayrollcalendars;
                    var calender_id = calenderID[0];

            
            
                    objDetails = {
                       type: "TPayrollCalendars",
                       fields: {
                           ID: parseInt(calender_id.Id),
                           PayrollCalendarPayPeriod:payperiod,
                           PayrollCalendarName:calender_name,
                           PayrollCalendarStartDate:moment(startdate,'DD/MM/YYYY').format('YYYY-MM-DD'),
                           PayrollCalendarFirstPaymentDate:moment(FirstPaymentDate,'DD/MM/YYYY').format('YYYY-MM-DD'),
                           PayrollCalendarActive :true,              
                       }
                     };

                  
            
                    taxRateService.saveCalender(objDetails).then(function (objDetails) {
                        $('.fullScreenSpin').css('display','none');
                        swal({
                            title: 'Success',
                            text: 'Pay Calendar saved successfully.',
                            type: 'success',
                            showCancelButton: false,
                            confirmButtonText: 'Done'
            
                            }).then((result) => {
                            if (result.value) {
                                sideBarService.getCalender(initialBaseDataLoad, 0).then(function (dataReload) {
                                    addVS1Data("TPayrollCalendars", JSON.stringify(dataReload)).then(function (datareturn) {
                                        $('#closemodel').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=calender','_self');
                                    }).catch(function (err) {
                                        $('#closemodel').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=calender','_self');
                                    });
                                  }).catch(function (err) {
                                        $('#closemodel').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=calender','_self');
                                  });
                            }else if (result.dismiss === 'cancel') {
                            
                            }
                            });
                            
                        
                    }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                           swal({
                            title: 'Oooops...',
                            text: err,
                            type: 'error',
                            showCancelButton: false,
                            confirmButtonText: 'ok'
                            }).then((result) => {
                            if (result.value) {
                            } else if (result.dismiss === 'cancel') {
                            }
                            });        
                                
                    });
                 }).catch(function (err) {
                        objDetails = {
                        type: "TPayrollCalendars",
                        fields: {
                            PayrollCalendarPayPeriod:payperiod,
                            PayrollCalendarName:calender_name,
                            PayrollCalendarStartDate:moment(startdate,'DD/MM/YYYY').format('YYYY-MM-DD'),
                            PayrollCalendarFirstPaymentDate:moment(FirstPaymentDate,'DD/MM/YYYY').format('YYYY-MM-DD'),
                            PayrollCalendarActive :true, 
                       }
                       };
            
                      taxRateService.saveCalender(objDetails).then(function (objDetails) {
            
                        $('.fullScreenSpin').css('display','none');
                        swal({
                            title: 'Success',
                            text: 'Pay Calendar saved successfully.',
                            type: 'success',
                            showCancelButton: false,
                            confirmButtonText: 'Done'
            
                        }).then((result) => {
                        if (result.value) {
                            sideBarService.getCalender(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("TPayrollCalendars", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#closemodel').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=calender','_self');
                                }).catch(function (err) {
                                    $('#closemodel').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=calender','_self');
                                });
                              }).catch(function (err) {
                                    $('#closemodel').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                   window.open('/payrollrules?active_key=calender','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                        
                        }
                        });
            
            
                      
                      }).catch(function (err) {
                           $('.fullScreenSpin').css('display','none');
                           swal({
                            title: 'Oooops...',
                            text: err,
                            type: 'error',
                            showCancelButton: false,
                            confirmButtonText: 'ok'
                            }).then((result) => {
                            if (result.value) {
                            } else if (result.dismiss === 'cancel') {
                            }
                            });        
                         
                           
                      });
                 });
            }
           
                      
         }




    },

   'click .btnSaveDefaultTax':function(){

        let templateObject = Template.instance();
        $('.fullScreenSpin').css('display','inline-block');
        let taxRateService = new TaxRateService();
        let editbankaccount = $('#editbankaccount').val() || '';
        let editpaygbankaccount = $('#editpaygbankaccount').val() || '';
        let editwagesexpbankaccount = $('#editwagesexpbankaccount').val() || '';
        let editwagespaybankaccount = $('#editwagespaybankaccount').val() || '';
        let editsuperliabbankaccount = $('#editsuperliabbankaccount').val() || '';
        let editsuperexpbankaccount = $('#editsuperexpbankaccount').val() || '';
        let employegroup = $('#employegroup').val() || '';
        let timesheetcat = $('#timesheetcat').val() || '';
        let swtShowAnnualSalary = false;
        let swtShowEmploymentBasis = false;
        let uploadedImage = $('#uploadedImage').attr('src');

        let payrollsettingor = $('#payrollsettingor').val() || 0;
        
        if($('#swtShowAnnualSalary').is(':checked')){
            swtShowAnnualSalary = true;
        }else{
            swtShowAnnualSalary = false;
        }

        if($('#payrollsettingor').val() == '')
        {
            payrollsettingor = 0;
        }

        if($('#swtShowEmploymentBasis').is(':checked')){
            swtShowEmploymentBasis = true;
        }else{
            swtShowEmploymentBasis = false;
        }

    
         if (editbankaccount === '') {
            $('.fullScreenSpin').css('display','none');
            swal('Bank account has not been selected!', '', 'warning');
            e.preventDefault();
         }
         else if(editpaygbankaccount === '')
         { 
             $('.fullScreenSpin').css('display','none');
             swal('PAYG Liability Account has not been selected!', '', 'warning');
             e.preventDefault();

         }
         else if(editwagesexpbankaccount === '')
         { 
             $('.fullScreenSpin').css('display','none');
             swal('Wages Expense Account has not been selected!', '', 'warning');
             e.preventDefault();

         }
         else if(editwagespaybankaccount === '')
         { 
             $('.fullScreenSpin').css('display','none');
             swal('Wages Payable Account has not been selected!', '', 'warning');
             e.preventDefault();

         }
         else if(editsuperliabbankaccount === '')
         { 
             $('.fullScreenSpin').css('display','none');
             swal('Superannuation Liability Account has not been selected!', '', 'warning');
             e.preventDefault();

         }
         else if(editsuperexpbankaccount === '')
         { 
             $('.fullScreenSpin').css('display','none');
             swal('Superannuation Expense Account has not been selected!', '', 'warning');
             e.preventDefault();

         }
         else 
         {
            $('.fullScreenSpin').css('display','inline-block');

            objDetails = {
                type: "Tpayrollorganization",
                fields: {
                    ID: parseInt(payrollsettingor),
                    PayrollBankAccount:editbankaccount,
                    PayrollEmployeeGroup:employegroup,
                    PayrollPaygLiabilityAccount:editpaygbankaccount,
                    PayrollShowAnnualSalary:swtShowAnnualSalary,
                    PayrollShowEmploymentBasis :swtShowEmploymentBasis, 
                    PayrollSuperannuationLiabilityAccount:editsuperliabbankaccount,
                    PayrollSuperannuationPayableAccount:editsuperexpbankaccount,
                    PayrollTimesheetCategories:timesheetcat,
                    PayrollWagesExpenseAccount:editwagesexpbankaccount,
                    PayrollWagesPayableAccount:editwagespaybankaccount             
                }
            };

            taxRateService.savePayOrganization(objDetails).then(function (objDetails){
                
                swal({
                    title: 'Success',
                    text: 'Organization Payroll Settings saved successfully.',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'
            
                }).then((result) => {
                if (result.value) {
               
                 
                    
                  Meteor._reload.reload();
                             
                }else if (result.dismiss === 'cancel') {
                
                }
                });

                $('.fullScreenSpin').css('display','none')

            });



        
         }
       
    },

   'click .saveSuperannuation': function(){
      
        let templateObject = Template.instance();
        $('.fullScreenSpin').css('display','inline-block');
        let taxRateService = new TaxRateService();
        let fundType = $('#edtFundType').val() || '';
        let fundName = $('#edtFundName').val() || '';
        let abn  = $('#edtabn').val() || '';
        let edtelectronicsalias = $('#edtelectronicsalias').val() || '';
        let employeNumber = $('#edtEmployerNumber').val() || '';
        let edtbsb = $('#edtbsb').val() || '';
        let edtaccountnumber = $('#edtaccountnumber').val() || '';
        let edtaccountname = $('#edtaccountname').val() || '';
         
        if (fundName === '') {
            $('.fullScreenSpin').css('display','none');
            swal('Fund Name has not been Filled!', '', 'warning');
            e.preventDefault();
         }
         else {
        
            $('.fullScreenSpin').css('display','inline-block');
            taxRateService.checkSuperannuationName(fundName).then(function (data) {
                supperannuationId = data.tsuperannuation[0].Id;
                objDetails = {
                   type: "TSuperannuation",
                   fields: {
                       ID: parseInt(supperannuationId),
                       Superfund:fundName,
                       Employeeid:employeNumber,
                       KeyStringFieldName:fundType,                                           
                   }
               };
  
              taxRateService.saveSuperannuation(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Success',
                        text: 'New Superannuation saved Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'

                    }).then((result) => {
                        if (result.value) {
                            sideBarService.getSuperannuation(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("TSuperannuation", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#closeuperannution').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=super','_self');
                                }).catch(function (err) {
                                    $('#closeuperannution').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=super','_self');
                                });
                              }).catch(function (err) {
                                $('#closeuperannution').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=super','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });

                }).catch(function (err) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                    title: 'Oooops...',
                    text: err,
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'Try Again'
                    }).then((result) => {
                    if (result.value) {
                        
                    } else if (result.dismiss === 'cancel') {
    
                    }
                    });
                  
                
                  });
                  }).catch(function (err) {
                    objDetails = {
                    type: "TSuperannuation",
                    fields: {
                        Superfund:fundName,
                        Employeeid:employeNumber,
                        KeyStringFieldName:fundType,    
                        
                   }
                };
          
                taxRateService.saveSuperannuation(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Success',
                        text: 'New Superannuation saved Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'

                    }).then((result) => {
                        if (result.value) {
                            sideBarService.getSuperannuation(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("TSuperannuation", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#closeuperannution').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=super','_self');
                                }).catch(function (err) {
                                    $('#closeuperannution').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=super','_self');
                                });
                              }).catch(function (err) {
                                $('#closeuperannution').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=super','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });


                }).catch(function (err) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                    title: 'Oooops...',
                    text: err,
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'Try Again'
                    }).then((result) => {
                    if (result.value) {
                 
                    } else if (result.dismiss === 'cancel') {
    
                    }
                    });
                  
               });
              });
             


         }




    },

   'click .newreiumbursement': function(){
      
        let templateObject = Template.instance();
        $('.fullScreenSpin').css('display','inline-block');
        let taxRateService = new TaxRateService();
        let reimbursementname = $('#edtReimbursementName').val() || '';
        let account = $('#edtReimbursementAccount').val() || '';   
        
        let oldres_id = $('#res_id').val() || 0 ;
        
        if (reimbursementname === '') {
            $('.fullScreenSpin').css('display','none');
            swal('Reimbursement name Name has not been Filled!', '', 'warning');
            e.preventDefault();
         }
         else {
            
            if(oldres_id != 0)
            {
                $('.fullScreenSpin').css('display','inline-block');
                objDetails = {
                    type: "TReimbursement",
                    fields: {
                        ID: parseInt(oldres_id),
                        ReimbursementName:reimbursementname,
                        ReimbursementAccount:account,
                        ReimbursementActive:true, 
                    }
                };

                taxRateService.saveReimbursement(objDetails).then(function (objDetails) {
                   
                    swal({
                        title: 'Success',
                        text: 'Reimbursement Saved Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'

                     }).then((result) => {
                        if (result.value) {
                            sideBarService.getReimbursement(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("TReimbursement", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#closeresim').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=resimu','_self');
                                }).catch(function (err) {
                                    $('#closeresim').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=resimu','_self');
                                });
                              }).catch(function (err) {
                                $('#closeresim').trigger('click');
                                 $('.fullScreenSpin').css('display','inline-block');
                                 window.open('/payrollrules?active_key=payitem&itemtype=resimu','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });
            
                  $('.fullScreenSpin').css('display','none');

                    
                });


            }
            else
            {
                $('.fullScreenSpin').css('display','inline-block');
                taxRateService.checkReimbursementByName(reimbursementname).then(function (data) {
                    TReimbursementid = data.treimbursement[0].Id;
                    objDetails = {
                       type: "TReimbursement",
                       fields: {
                           ID: parseInt(TReimbursementid),
                           ReimbursementName:reimbursementname,
                           ReimbursementAccount:account,
                           ReimbursementActive:true, 
                       }
                   };
      
                  taxRateService.saveReimbursement(objDetails).then(function (objDetails) {
                         
                        $('.fullScreenSpin').css('display','none');
                        swal({
                            title: 'Success',
                            text: 'New Reimbursement saved Successfully',
                            type: 'success',
                            showCancelButton: false,
                            confirmButtonText: 'Done'
        
                        }).then((result) => {
                            if (result.value) {
                                sideBarService.getReimbursement(initialBaseDataLoad, 0).then(function (dataReload) {
                                    addVS1Data("TReimbursement", JSON.stringify(dataReload)).then(function (datareturn) {
                                        $('#closeresim').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                      
                                        window.open('/payrollrules?active_key=payitem&itemtype=resimu','_self');
                                    }).catch(function (err) {
                                        $('#closeresim').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=resimu','_self');
                                    });
                                  }).catch(function (err) {
                                    $('#closeresim').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=resimu','_self');
                                  });
                            }else if (result.dismiss === 'cancel') {
                        
                            }
                        });

                     
                    }).catch(function (err) {
                        $('.fullScreenSpin').css('display','none');
                        swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'Try Again'
                        }).then((result) => {
                        if (result.value) {
                           
                        } else if (result.dismiss === 'cancel') {
        
                        }
                        });
                      
                     
                      });
                      }).catch(function (err) {
                        objDetails = {
                        type: "TReimbursement",
                        fields: {
                            ReimbursementName:reimbursementname,
                            ReimbursementAccount:account,
                            ReimbursementActive:true,    
                       }
                    };
      
                    taxRateService.saveReimbursement(objDetails).then(function (objDetails) {
                        
                        $('.fullScreenSpin').css('display','none');
                        swal({
                            title: 'Success',
                            text: 'New Reimbursement saved Successfully',
                            type: 'success',
                            showCancelButton: false,
                            confirmButtonText: 'Done'
        
                        }).then((result) => {
                            if (result.value) {
                                sideBarService.getReimbursement(initialBaseDataLoad, 0).then(function (dataReload) {
                                    addVS1Data("TReimbursement", JSON.stringify(dataReload)).then(function (datareturn) {
                                        $('#closeresim').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=resimu','_self');
                                    }).catch(function (err) {
                                        $('#closeresim').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=resimu','_self');
                                    });
                                  }).catch(function (err) {
                                    $('#closeresim').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=resimu','_self');
                                  });
                            }else if (result.dismiss === 'cancel') {
                        
                            }
                        });

                    }).catch(function (err) {
                        $('.fullScreenSpin').css('display','none');
                        swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'Try Again'
                        }).then((result) => {
                        if (result.value) {
                      
                        } else if (result.dismiss === 'cancel') {
        
                        }
                        });
                     
                   });
                  });

            }
                      
           
             


         }




     },

   'click .savePaidLeave':function(){
     
        let templateObject = Template.instance();
        $('.fullScreenSpin').css('display','inline-block');
        let taxRateService = new TaxRateService();
        let Leavename = $('#edtLeaveName').val() || '';
        let Typeofunit = $('#edtTypeOfUnits').val() || '';     
        let edtLeaveLoadingRate = $('#edtLeaveLoadingRate').val() || '';
        let edtNormalEntitlement = $('#edtNormalEntitlement').val() || '';
        let payonslip = false;
        let leaveid = $('#paidleaveid').val() || 0;

        if($('#formCheck-ShowBalance').is(':checked')){
            payonslip = true;
        }else{
            payonslip = false;
        }



        if (Leavename === '') {
            $('.fullScreenSpin').css('display','none');
            swal('Leave name Name has not been Filled!', '', 'warning');
            e.preventDefault();
         }
         else {
           
            if(leaveid != 0)
            {
                $('.fullScreenSpin').css('display','inline-block');
                objDetails = {
                    type: "TPaidLeave",
                    fields: {
                        ID: parseInt(leaveid),
                        LeavePaidName:Leavename,
                        LeavePaidUnits:Typeofunit,
                        LeavePaidLeaveLoadingRate:edtLeaveLoadingRate,
                        LeavePaidNormalEntitlement:edtNormalEntitlement,
                        LeavePaidShowBalanceOnPayslip:payonslip,
                        LeavePaidActive:true,        
                    }
                };

                taxRateService.savePaidLeave(objDetails).then(function (objDetails) {
                     $('.fullScreenSpin').css('display','none');
                     swal({
                        title: 'Success',
                        text: 'Leave Added Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'

                     }).then((result) => {
                        if (result.value) {
                            sideBarService.getPaidLeave(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("TPaidLeave", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#closepaidleave').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                }).catch(function (err) {
                                    $('#closepaidleave').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                });
                              }).catch(function (err) {
                                $('#closepaidleave').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                     });
                      
                }).catch(function (err) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                    title: 'Oooops...',
                    text: err,
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'Try Again'
                    }).then((result) => {
                    if (result.value) {
                     
                    } else if (result.dismiss === 'cancel') {
    
                    }
                    });
                    
                   
                });

            }
            else
            {
                  $('.fullScreenSpin').css('display','inline-block');
                  taxRateService.checkPaidLeaveByName(Leavename).then(function (data) {
                    paidleaveid = data.tpaidleave[0].Id;
                    objDetails = {
                       type: "TPaidLeave",
                       fields: {
                           ID: parseInt(paidleaveid),
                           LeavePaidName:Leavename,
                           LeavePaidUnits:Typeofunit,
                           LeavePaidLeaveLoadingRate:edtLeaveLoadingRate,
                           LeavePaidNormalEntitlement:edtNormalEntitlement,
                           LeavePaidShowBalanceOnPayslip:payonslip,
                           LeavePaidActive:true,        
                       }
                   };
      
                  taxRateService.savePaidLeave(objDetails).then(function (objDetails) {
                            $('.fullScreenSpin').css('display','none');
                            swal({
                            title: 'Success',
                            text: 'Leave Saved Successfully',
                            type: 'success',
                            showCancelButton: false,
                            confirmButtonText: 'Done'

                            }).then((result) => {
                            if (result.value) {
                                sideBarService.getPaidLeave(initialBaseDataLoad, 0).then(function (dataReload) {
                                    addVS1Data("TPaidLeave", JSON.stringify(dataReload)).then(function (datareturn) {
                                        $('#closepaidleave').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                    }).catch(function (err) {
                                        $('#closepaidleave').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                    });
                                  }).catch(function (err) {
                                    $('#closepaidleave').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                  });
                            }else if (result.dismiss === 'cancel') {
                        
                            }
                            });
                    
                    }).catch(function (err) {

                        $('.fullScreenSpin').css('display','none');
                        swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'Try Again'
                        }).then((result) => {
                        if (result.value) {
                        } else if (result.dismiss === 'cancel') {
        
                        }
                        });
                      
                      });
                  }).catch(function (err) {
                        objDetails = {
                        type: "TPaidLeave",
                        fields: {
                            LeavePaidName:Leavename,
                            LeavePaidUnits:Typeofunit,
                            LeavePaidLeaveLoadingRate:edtLeaveLoadingRate,
                            LeavePaidNormalEntitlement:edtNormalEntitlement,
                            LeavePaidShowBalanceOnPayslip:payonslip,
                            LeavePaidActive:true,     
                       }
                    };
      
                    taxRateService.savePaidLeave(objDetails).then(function (objDetails) {

                        $('.fullScreenSpin').css('display','none');
                        swal({
                           title: 'Success',
                           text: 'Leave Saved Successfully',
                           type: 'success',
                           showCancelButton: false,
                           confirmButtonText: 'Done'
   
                        }).then((result) => {
                           if (result.value) {
                            sideBarService.getPaidLeave(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("TPaidLeave", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#closepaidleave').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                }).catch(function (err) {
                                    $('#closepaidleave').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                   
                                    window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                });
                              }).catch(function (err) {
                                $('#closepaidleave').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                               
                                window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                              });
                           }else if (result.dismiss === 'cancel') {
                       
                           }
                        });
                  
                     }).catch(function (err) {
                        $('.fullScreenSpin').css('display','none');
                        swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'Try Again'
                        }).then((result) => {
                        if (result.value) {
                     
                        } else if (result.dismiss === 'cancel') {
        
                        }
                        });
                      
                     });
                  });

            }

         }




     },

   'click .saveUnpaidLeave':function(){
      
        let templateObject = Template.instance();
        $('.fullScreenSpin').css('display','inline-block');
        let taxRateService = new TaxRateService();
        let Leavename = $('#edtUnpaidLeaveName').val() || '';
        let Typeofunit = $('#edtUnpaidTypeOfUnits').val() || '';     
        let edtLeaveLoadingRate = $('#edtUnpaidLeaveLoadingRate').val() || '';
        let edtNormalEntitlement = $('#edtUnpaidNormalEntitlement').val() || '';
        let payonslip = false;
        let leaveid = $('#unpaidleaveid').val() || 0;

        if($('#formCheck-UnpaidShowBalance').is(':checked')){
            payonslip = true;
        }else{
            payonslip = false;
        }

        if (Leavename === '') {
            $('.fullScreenSpin').css('display','none');
            swal('Leave name Name has not been Filled!', '', 'warning');
            e.preventDefault();
         }
         else
         {

            if(leaveid != 0)
            {
                $('.fullScreenSpin').css('display','inline-block');
                objDetails = {
                    type: "TUnpaidLeave",
                    fields: {
                        ID: parseInt(leaveid),
                 
                        LeaveUnPaidName:Leavename,
                        LeaveUnPaidUnits:Typeofunit,
                        LeaveUnPaidLeaveLoadingRate:edtLeaveLoadingRate,
                        LeaveUnPaidNormalEntitlement:edtNormalEntitlement,
                        LeaveUnPaidShowBalanceOnPayslip:payonslip,
                        LeaveUnPaidActive:true,    
                       
                    }
                };

                taxRateService.saveUnPaidLeave(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Success',
                        text: 'Leave Saved Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'

                     }).then((result) => {
                        if (result.value) {
                            sideBarService.getUnPaidLeave(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("TUnpaidLeave", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#closeunpaid').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                }).catch(function (err) {
                                    $('#closeunpaid').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                });
                              }).catch(function (err) {
                                $('#closeunpaid').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                   window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });
                
                });

            }
            else{

                $('.fullScreenSpin').css('display','inline-block');
                taxRateService.checkunPaidLeaveByName(Leavename).then(function (data) {
                    paidleaveid = data.tupaidleave[0].Id;
                    objDetails = {
                       type: "TUnpaidLeave",
                       fields: {
                           ID: parseInt(paidleaveid),
                    
                           LeaveUnPaidName:Leavename,
                           LeaveUnPaidUnits:Typeofunit,
                           LeaveUnPaidLeaveLoadingRate:edtLeaveLoadingRate,
                           LeaveUnPaidNormalEntitlement:edtNormalEntitlement,
                           LeaveUnPaidShowBalanceOnPayslip:payonslip,
                           LeaveUnPaidActive:true,    
                          
                       }
                   };
      
                     taxRateService.saveUnPaidLeave(objDetails).then(function (objDetails) {

                            $('.fullScreenSpin').css('display','none');
                            swal({
                                title: 'Success',
                                text: 'Leave Saved Successfully',
                                type: 'success',
                                showCancelButton: false,
                                confirmButtonText: 'Done'

                            }).then((result) => {
                                if (result.value) {
                                    sideBarService.getUnPaidLeave(initialBaseDataLoad, 0).then(function (dataReload) {
                                        addVS1Data("TUnpaidLeave", JSON.stringify(dataReload)).then(function (datareturn) {
                                            $('#closeunpaid').trigger('click');
                                            $('.fullScreenSpin').css('display','inline-block');
                                            window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                        }).catch(function (err) {
                                            $('#closeunpaid').trigger('click');
                                            $('.fullScreenSpin').css('display','inline-block');
                                            window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                        });
                                      }).catch(function (err) {
                                        $('#closeunpaid').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                           window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                      });
                                }else if (result.dismiss === 'cancel') {
                            
                                }
                            });
                     
                      }).catch(function (err) {
                        $('.fullScreenSpin').css('display','none');
                        swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'Try Again'
                        }).then((result) => {
                        if (result.value) {
                        
                        } else if (result.dismiss === 'cancel') {
        
                        }
                        });
                                      
                      });
                      }).catch(function (err) {
                        objDetails = {
                        type: "TUnpaidLeave",
                        fields: {
                            LeaveUnPaidName:Leavename,
                            LeaveUnPaidUnits:Typeofunit,
                            LeaveUnPaidLeaveLoadingRate:edtLeaveLoadingRate,
                            LeaveUnPaidNormalEntitlement:edtNormalEntitlement,
                            LeaveUnPaidShowBalanceOnPayslip:payonslip,
                            LeaveUnPaidActive:true,    
                              
                       }
                    };
      
                    taxRateService.saveUnPaidLeave(objDetails).then(function (objDetails) {
                            $('.fullScreenSpin').css('display','none');
                            swal({
                                title: 'Success',
                                text: 'Leave Saved Successfully',
                                type: 'success',
                                showCancelButton: false,
                                confirmButtonText: 'Done'

                            }).then((result) => {
                                if (result.value) {
                                    sideBarService.getUnPaidLeave(initialBaseDataLoad, 0).then(function (dataReload) {
                                        addVS1Data("TUnpaidLeave", JSON.stringify(dataReload)).then(function (datareturn) {
                                            $('#closeunpaid').trigger('click');
                                            $('.fullScreenSpin').css('display','inline-block');
                                            window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                        }).catch(function (err) {
                                            $('#closeunpaid').trigger('click');
                                            $('.fullScreenSpin').css('display','inline-block');
                                            window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                        });
                                      }).catch(function (err) {
                                        $('#closeunpaid').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                      });
                                }else if (result.dismiss === 'cancel') {
                            
                                }
                            });

                    
                    }).catch(function (err) {
                        $('.fullScreenSpin').css('display','none');
                        swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'Try Again'
                        }).then((result) => {
                        if (result.value) {
                        
                        } else if (result.dismiss === 'cancel') {
        
                        }
                         });
                        
                        });
                      });

            }
           
         }


     },
   
   'click .saveExemptReportable':function(){
      
    let templateObject = Template.instance();
    $('.fullScreenSpin').css('display','inline-block');
    let taxRateService = new TaxRateService();
    let edtEarningsName = $('#edtEarningsName').val() || '';
    let edtDisplayName = $('#edtDisplayName').val() || '';     
    let edtRateType = $('#edtRateType').val() || '';
    let edtExpenseAccount = $('#edtExpenseAccount').val() || '';
    let ExemptPAYGp = false;
    let ExemptSuperannuation = false;
    let ExemptReportable = false;
    let oldid = $('#ordinaryTimeEarningsid').val() || 0;

    if($('#formCheck-ExemptPAYG').is(':checked')){
        ExemptPAYGp = true;
    }else{
        ExemptPAYGp = false;
    }

    if($('#formCheck-ExemptSuperannuation').is(':checked')){
        ExemptSuperannuation = true;
    }else{
        ExemptSuperannuation = false;
    }

    if($('#formCheck-ExemptReportable').is(':checked')){
        ExemptReportable = true;
    }else{
        ExemptReportable = false;
    }

    if (edtEarningsName === '') {
        $('.fullScreenSpin').css('display','none');
        swal('Earnings Name has not been Filled!', '', 'warning');
        e.preventDefault();
     }
     else {
            
            if(oldid != 0)
            {
                $('.fullScreenSpin').css('display','inline-block');
                objDetails = {
                    type: "TOrdinaryTimeEarnings",
                     fields: {
                        ID: parseInt(oldid),
                        OrdinaryTimeEarningsName:edtEarningsName,
                        OrdinaryTimeEarningsDisplayName:edtDisplayName,
                        OrdinaryTimeEarningsRateType:edtRateType,
                        OrdinaryTimeEarningsExpenseAccount:edtExpenseAccount,
                        OrdinaryTimeEarningsExemptPaygWithholding:ExemptPAYGp,
                        OrdinaryTimeEarningsExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                        OrdinaryTimeEarningsReportableW1onActivityStatement:ExemptReportable,
                        OrdinaryTimeEarningsActive:true     
                    }
                };
            
                taxRateService.saveordinaryEarningByName(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Success',
                        text: 'Ordinary Earning Saved Saved Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'
            
                     }).then((result) => {
                        if (result.value) {
                            sideBarService.getOrdinarytimeEarning(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("TOrdinaryTimeEarnings", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#closeaddordintimemodel').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                }).catch(function (err) {
                                    $('#closeaddordintimemodel').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                });
                              }).catch(function (err) {
                                $('#closeaddordintimemodel').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });
            
               
            
                    
                }).catch(function (err) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                    title: 'Oooops...',
                    text: err,
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'Try Again'
                    }).then((result) => {
                    if (result.value) {
                    
                    } else if (result.dismiss === 'cancel') {
        
                    }
                    });   
                });

            }
            else{

                $('.fullScreenSpin').css('display','inline-block');
                    taxRateService.checkordinaryEarningByName(edtEarningsName).then(function (data) {
                  
                    earningid = data.tordinarytimeearnings[0].Id;
                    objDetails = {
                            type: "TOrdinaryTimeEarnings",
                            fields: {
                            ID: parseInt(earningid),
                            OrdinaryTimeEarningsName:edtEarningsName,
                            OrdinaryTimeEarningsDisplayName:edtDisplayName,
                            OrdinaryTimeEarningsRateType:edtRateType,
                            OrdinaryTimeEarningsExpenseAccount:edtExpenseAccount,
                            OrdinaryTimeEarningsExemptPaygWithholding:ExemptPAYGp,
                            OrdinaryTimeEarningsExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                            OrdinaryTimeEarningsReportableW1onActivityStatement:ExemptReportable,
                            OrdinaryTimeEarningsActive:true     
                        }
                    };
    
                    taxRateService.saveordinaryEarningByName(objDetails).then(function (objDetails) {
                        $('.fullScreenSpin').css('display','none');
                        swal({
                            title: 'Success',
                            text: 'Ordinary Earning Saved Saved Successfully',
                            type: 'success',
                            showCancelButton: false,
                            confirmButtonText: 'Done'
                
                         }).then((result) => {
                            if (result.value) {
                                sideBarService.getOrdinarytimeEarning(initialBaseDataLoad, 0).then(function (dataReload) {
                                    addVS1Data("TOrdinaryTimeEarnings", JSON.stringify(dataReload)).then(function (datareturn) {
                                        $('#closeaddordintimemodel').trigger('click');
                                       $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                    }).catch(function (err) {
                                        $('#closeaddordintimemodel').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                    });
                                  }).catch(function (err) {
                                       $('#closeaddordintimemodel').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                  });
                            }else if (result.dismiss === 'cancel') {
                        
                            }
                        });


                       }).catch(function (err) {
                            $('.fullScreenSpin').css('display','none');
                            swal({
                            title: 'Oooops...',
                            text: err,
                            type: 'error',
                            showCancelButton: false,
                            confirmButtonText: 'Try Again'
                            }).then((result) => {
                            if (result.value) {
                            
                            } else if (result.dismiss === 'cancel') {
                
                            }
                            });   
                       });
                    }).catch(function (err) {
                            objDetails = {
                            type: "TOrdinaryTimeEarnings",
                            fields: {
                                OrdinaryTimeEarningsName:edtEarningsName,
                                OrdinaryTimeEarningsDisplayName:edtDisplayName,
                                OrdinaryTimeEarningsRateType:edtRateType,
                                OrdinaryTimeEarningsExpenseAccount:edtExpenseAccount,
                                OrdinaryTimeEarningsExemptPaygWithholding:ExemptPAYGp,
                                OrdinaryTimeEarningsExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                                OrdinaryTimeEarningsReportableW1onActivityStatement:ExemptReportable,
                                OrdinaryTimeEarningsActive:true           
                            }
                        };
    
                        taxRateService.saveordinaryEarningByName(objDetails).then(function (objDetails) {
                            $('.fullScreenSpin').css('display','none');
                            swal({
                                title: 'Success',
                                text: 'Ordinary Earning Saved Saved Successfully',
                                type: 'success',
                                showCancelButton: false,
                                confirmButtonText: 'Done'
                    
                            }).then((result) => {
                                if (result.value) {
                                    sideBarService.getOrdinarytimeEarning(initialBaseDataLoad, 0).then(function (dataReload) {
                                        addVS1Data("TOrdinaryTimeEarnings", JSON.stringify(dataReload)).then(function (datareturn) {
                                            $('#closeaddordintimemodel').trigger('click');
                                            $('.fullScreenSpin').css('display','inline-block');
                                            window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                        }).catch(function (err) {
                                            $('#closeaddordintimemodel').trigger('click');
                                            $('.fullScreenSpin').css('display','inline-block');
                                            window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                        });
                                      }).catch(function (err) {
                                        $('#closeaddordintimemodel').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                           window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                      });
                                }else if (result.dismiss === 'cancel') {
                            
                                }
                            });


                        }).catch(function (err) {
                            $('.fullScreenSpin').css('display','none');
                            swal({
                            title: 'Oooops...',
                            text: err,
                            type: 'error',
                            showCancelButton: false,
                            confirmButtonText: 'Try Again'
                            }).then((result) => {
                            if (result.value) {
                            
                            } else if (result.dismiss === 'cancel') {
                
                            }
                            });
                        
                        });
              });
            }


      


     }




    },

   'click .saveExemptReportableOvertime':function(){
       
    let templateObject = Template.instance();
    $('.fullScreenSpin').css('display','inline-block');
    let taxRateService = new TaxRateService();
    let edtEarningsName = $('#edtEarningsNameOvertime').val() || '';
    let edtDisplayName = $('#edtDisplayNameOvertime').val() || '';     
    let edtRateType = $('#edtRateTypeOvertime').val() || '';
    let edtExpenseAccount = $('#edtExpenseAccountOvertime').val() || '';
    let ExemptPAYGp = false;
    let ExemptSuperannuation = false;
    let ExemptReportable = false;

    let oldid = $('#edtEarningsNameOvertimeid').val() || 0;

    if($('#formCheck-ExemptPAYGOvertime').is(':checked')){
        ExemptPAYGp = true;
    }else{
        ExemptPAYGp = false;
    }

    if($('#formCheck-ExemptSuperannuationOvertime').is(':checked')){
        ExemptSuperannuation = true;
    }else{
        ExemptSuperannuation = false;
    }

    if($('#formCheck-ExemptReportableOvertime').is(':checked')){
        ExemptReportable = true;
    }else{
        ExemptReportable = false;
    }

    if (edtEarningsName === '') {
        $('.fullScreenSpin').css('display','none');
        swal('Earnings Name has not been Filled!', '', 'warning');
        e.preventDefault();
     }
     else {

          if(oldid != 0)
          {
            $('.fullScreenSpin').css('display','inline-block');
            objDetails = {
                type: "Tovertimeearnings",
                fields: {
                    ID: parseInt(oldid),
                    OverTimeEarningsName:edtEarningsName,
                    OverTimeEarningsDisplayName:edtDisplayName,
                    OverTimeEarningsRateType:edtRateType,
                    OverTimeEarningsExpenseAccount:edtExpenseAccount,
                    OverTimeEarningsExemptPaygWithholding:ExemptPAYGp,
                    OverTimeEarningsExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                    OverTimeEarningsReportableW1onActivityStatement:ExemptReportable,
                    OverTimeEarningsActive:true     
                }
            };
        
            taxRateService.saveExemptReportableOvertime(objDetails).then(function (objDetails) {
                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'Over time Earnings saved Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'
        
                 }).then((result) => {
                    if (result.value) {
                        sideBarService.getExemptReportableOvertime(initialBaseDataLoad, 0).then(function (dataReload) {
                            addVS1Data("Tovertimeearnings", JSON.stringify(dataReload)).then(function (datareturn) {
                                $('#addovertimeeringmodel').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                            }).catch(function (err) {
                                $('#addovertimeeringmodel').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                            });
                          }).catch(function (err) {
                            $('#addovertimeeringmodel').trigger('click');
                            $('.fullScreenSpin').css('display','inline-block');
                            window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                          });
                    }else if (result.dismiss === 'cancel') {
                
                    }
                });
        
           
        
                
            }).catch(function (err) {
                $('.fullScreenSpin').css('display','none');
                swal({
                title: 'Oooops...',
                text: err,
                type: 'error',
                showCancelButton: false,
                confirmButtonText: 'Try Again'
                }).then((result) => {
                if (result.value) {
                 
                } else if (result.dismiss === 'cancel') {
  
                }
                });
                
              
            });

          }
          else
          {
            $('.fullScreenSpin').css('display','inline-block');
            taxRateService.checkExemptReportableOvertime(edtEarningsName).then(function (data) {
                earningid = data.tovertimeEarnigns[0].Id;
                objDetails = {
                   type: "Tovertimeearnings",
                   fields: {
                       ID: parseInt(earningid),
                       OverTimeEarningsName:edtEarningsName,
                       OverTimeEarningsDisplayName:edtDisplayName,
                       OverTimeEarningsRateType:edtRateType,
                       OverTimeEarningsExpenseAccount:edtExpenseAccount,
                       OverTimeEarningsExemptPaygWithholding:ExemptPAYGp,
                       OverTimeEarningsExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                       OverTimeEarningsReportableW1onActivityStatement:ExemptReportable,
                       OverTimeEarningsActive:true     
                   }
               };
    
                 taxRateService.saveExemptReportableOvertime(objDetails).then(function (objDetails) {
                        $('.fullScreenSpin').css('display','none');
                        swal({
                            title: 'Success',
                            text: 'Over time Earnings saved Successfully',
                            type: 'success',
                            showCancelButton: false,
                            confirmButtonText: 'Done'
        
                        }).then((result) => {
                            if (result.value) {
                                $('#addovertimeeringmodel').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                            }else if (result.dismiss === 'cancel') {
                        
                            }
                        });

                  }).catch(function (err) {
                        $('.fullScreenSpin').css('display','none');
                        swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'Try Again'
                        }).then((result) => {
                        if (result.value) {
                           
                        } else if (result.dismiss === 'cancel') {
            
                        }
                        });
                           
                  });
            }).catch(function (err) {
                    objDetails = {
                    type: "Tovertimeearnings",
                    fields: {
                        OverTimeEarningsName:edtEarningsName,
                        OverTimeEarningsDisplayName:edtDisplayName,
                        OverTimeEarningsRateType:edtRateType,
                        OverTimeEarningsExpenseAccount:edtExpenseAccount,
                        OverTimeEarningsExemptPaygWithholding:ExemptPAYGp,
                        OverTimeEarningsExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                        OverTimeEarningsReportableW1onActivityStatement:ExemptReportable,
                        OverTimeEarningsActive:true            
                   }
                };
    
                taxRateService.saveExemptReportableOvertime(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Success',
                        text: 'Over time Earnings saved Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'
            
                     }).then((result) => {
                        if (result.value) {
                            sideBarService.getExemptReportableOvertime(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("Tovertimeearnings", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#addovertimeeringmodel').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                }).catch(function (err) {
                                    $('#addovertimeeringmodel').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                });
                              }).catch(function (err) {
                                $('#addovertimeeringmodel').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });
                }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                        swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'Try Again'
                        }).then((result) => {
                        if (result.value) {
                        
                        } else if (result.dismiss === 'cancel') {
            
                        }
                        });
                   
                });
              });

          }


     }

    },

   'click .saveSuperannuationBonusesCommissions':function(){
    let templateObject = Template.instance();
    $('.fullScreenSpin').css('display','inline-block');
    let taxRateService = new TaxRateService();
    let edtEarningsName = $('#edtEarningsNameBonusesCommissions').val() || '';
    let edtDisplayName = $('#edtDisplayNameBonusesCommissions').val() || '';     
    let edtRateType = $('#edtRateTypeBonusesCommissions').val() || '';
    let edtExpenseAccount = $('#edtExpenseAccountBonusesCommissions').val() || '';
    let ExemptPAYGp = false;
    let ExemptSuperannuation = false;
    let ExemptReportable = false;
    let oldid = $('#edtEarningsNameBonusesCommissionid').val() || 0;
    if($('#ormCheck-ExemptPAYGBonusesCommissions').is(':checked')){
        ExemptPAYGp = true;
    }else{
        ExemptPAYGp = false;
    }

    if($('#formCheck-ExemptSuperannuationBonusesCommissions').is(':checked')){
        ExemptSuperannuation = true;
    }else{
        ExemptSuperannuation = false;
    }

    if($('#formCheck-ExemptReportableBonusesCommissions').is(':checked')){
        ExemptReportable = true;
    }else{
        ExemptReportable = false;
    }

    if (edtEarningsName === '') {
        $('.fullScreenSpin').css('display','none');
        swal('Earnings Name has not been Filled!', '', 'warning');
        e.preventDefault();
     }
     else {

        if(oldid != 0)
        {  
                $('.fullScreenSpin').css('display','inline-block');
                objDetails = {
                    type: "Tearningsbonusescommissions",
                    fields: {
                        ID: parseInt(oldid),
                        EarningBonusesCommisionsName:edtEarningsName,
                        EarningBonusesCommisionsDisplayName:edtDisplayName,
                        EarningBonusesCommisionsRateType:edtRateType,
                        EarningBonusesCommisionsExpenseAccount:edtExpenseAccount,
                        EarningBonusesCommisionsExemptPaygWithholding:ExemptPAYGp,
                        EarningBonusesCommisionsExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                        EarningBonusesCommisionsReportableW1onActivityStatement:ExemptReportable,
                        EarningBonusesCommisionsActive:true     
                    }
                };
    
                taxRateService.saveSuperannuationBonusesCommissions(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Success',
                        text: 'Bonuses Commission Saved Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'
            
                    }).then((result) => {
                        if (result.value) {
                            sideBarService.getsuperannuationBonusesCommissions(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("Tearningsbonusescommissions", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#bonusescloseid').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');  
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                }).catch(function (err) {
                                    $('#bonusescloseid').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                });
                              }).catch(function (err) {
                                $('#bonusescloseid').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });
            
                }).catch(function (err) {
                $('.fullScreenSpin').css('display','none');
                swal({
                title: 'Oooops...',
                text: err,
                type: 'error',
                showCancelButton: false,
                confirmButtonText: 'Try Again'
                }).then((result) => {
                if (result.value) {
                } else if (result.dismiss === 'cancel') {
  
                }
                });
                
                });

        }
        else
        {

            $('.fullScreenSpin').css('display','inline-block');
            taxRateService.checkSuperannuationBonusesCommissions(edtEarningsName).then(function (data) {
            earningid = data.tearningsbonusescommissions[0].Id;
            objDetails = {
               type: "Tearningsbonusescommissions",
               fields: {
                   ID: parseInt(earningid),
                   EarningBonusesCommisionsName:edtEarningsName,
                   EarningBonusesCommisionsDisplayName:edtDisplayName,
                   EarningBonusesCommisionsRateType:edtRateType,
                   EarningBonusesCommisionsExpenseAccount:edtExpenseAccount,
                   EarningBonusesCommisionsExemptPaygWithholding:ExemptPAYGp,
                   EarningBonusesCommisionsExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                   EarningBonusesCommisionsReportableW1onActivityStatement:ExemptReportable,
                   EarningBonusesCommisionsActive:true     
               }
           };

          taxRateService.saveSuperannuationBonusesCommissions(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Success',
                        text: ' Bonuses Commission saved Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'
            
                    }).then((result) => {
                        if (result.value) {
                            sideBarService.getsuperannuationBonusesCommissions(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("Tearningsbonusescommissions", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#bonusescloseid').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                  
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                }).catch(function (err) {
                                    $('#bonusescloseid').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                });
                              }).catch(function (err) {
                                $('#bonusescloseid').trigger('click');
                                 $('.fullScreenSpin').css('display','inline-block');
                                 window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });
              }).catch(function (err) {
                       $('.fullScreenSpin').css('display','none');
                        swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'Try Again'
                        }).then((result) => {
                        if (result.value) {
                        } else if (result.dismiss === 'cancel') {

                        }
                        });
              
            
                 });
              }).catch(function (err) {
                objDetails = {
                type: "Tearningsbonusescommissions",
                fields: {
                    EarningBonusesCommisionsName:edtEarningsName,
                    EarningBonusesCommisionsDisplayName:edtDisplayName,
                    EarningBonusesCommisionsRateType:edtRateType,
                    EarningBonusesCommisionsExpenseAccount:edtExpenseAccount,
                    EarningBonusesCommisionsExemptPaygWithholding:ExemptPAYGp,
                    EarningBonusesCommisionsExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                    EarningBonusesCommisionsReportableW1onActivityStatement:ExemptReportable,
                    EarningBonusesCommisionsActive:true          
               }
            };

            taxRateService.saveSuperannuationBonusesCommissions(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Success',
                        text: 'Bonuses Commission saved Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'
            
                    }).then((result) => {
                        if (result.value) {
                            sideBarService.getsuperannuationBonusesCommissions(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("Tearningsbonusescommissions", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#bonusescloseid').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                 
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                }).catch(function (err) {
                                    $('#bonusescloseid').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                  
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                });
                              }).catch(function (err) {
                                $('#bonusescloseid').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });
            }).catch(function (err) {
                $('.fullScreenSpin').css('display','none');
                    swal({
                    title: 'Oooops...',
                    text: err,
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'Try Again'
                    }).then((result) => {
                    if (result.value) {
                    
                    } else if (result.dismiss === 'cancel') {

                    }
                    });
                    
                });
          });
        }
       
        
     }
    },

   'click .saveExemptReportableLumpSumE':function(){
        let templateObject = Template.instance();
        $('.fullScreenSpin').css('display','inline-block');
        let taxRateService = new TaxRateService();
        let edtEarningsName = $('#edtEarningsNameLumpSumE').val() || '';
        let edtDisplayName = $('#edtDisplayNameLumpSumE').val() || '';     
        let edtRateType = $('#edtRateTypeLumpSumE').val() || '';
        let edtExpenseAccount = $('#edtExpenseAccountLumpSumE').val() || '';
        let ExemptPAYGp = false;
        let ExemptSuperannuation = false;
        let ExemptReportable = false;
        let oldid = $('#edtLumpSumid').val() || 0;
        if($('#formCheck-ExemptPAYGLumpSumE').is(':checked')){
            ExemptPAYGp = true;
        }else{
            ExemptPAYGp = false;
        }
    
        if($('#formCheck-ExemptSuperannuationLumpSumE').is(':checked')){
            ExemptSuperannuation = true;
        }else{
            ExemptSuperannuation = false;
        }
    
        if($('#ormCheck-ExemptReportableLumpSumE').is(':checked')){
            ExemptReportable = true;
        }else{
            ExemptReportable = false;
        }
    
        if (edtEarningsName === '') {
            $('.fullScreenSpin').css('display','none');
            swal('Earnings Name has not been Filled!', '', 'warning');
            e.preventDefault();
         }
         else {
            
            if(oldid != 0)
            { 
                $('.fullScreenSpin').css('display','inline-block');
                objDetails = {
                    type: "Tlumpsume",
                    fields: {
                        ID: parseInt(oldid),
                         LumpSumEName:edtEarningsName,
                         LumpSumEDisplayName:edtDisplayName,
                         LumpSumERateType:edtRateType,
                         LumpSumEExpenseAccount:edtExpenseAccount,
                         LumpSumEExemptPaygWithholding:ExemptPAYGp,
                         LumpSumEExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                         LumpSumEReportableW1onActivityStatement:ExemptReportable,
                         LumpSumEActive:true        
                    }
                };

                taxRateService.saveExemptReportableLumpSumE(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Success',
                        text: 'Lump Sum E Earnings Saved Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'

                    }).then((result) => {
                        if (result.value) {
                            sideBarService.getExemptReportableLumpSumE(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("Tlumpsume", JSON.stringify(dataReload)).then(function (datareturn) {
                                    
                                    $('#addlumpsumlabelid').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                }).catch(function (err) {

                                    $('#addlumpsumlabelid').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                });
                              }).catch(function (err) {

                                    $('#addlumpsumlabelid').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });             
                }).catch(function(err){
                        $('.fullScreenSpin').css('display','none');
                        swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'Try Again'
                        }).then((result) => {
                        if (result.value) {
                         
                        }else if (result.dismiss === 'cancel') {
          
                        }
                        });

                });

            }
            else
            {
                $('.fullScreenSpin').css('display','inline-block');
                taxRateService.checkExemptReportableLumpSumE(edtEarningsName).then(function (data) {
                    earningid = data.tlumpsume[0].Id;
                    objDetails = {
                       type: "Tlumpsume",
                       fields: {
                           ID: parseInt(earningid),
                            LumpSumEName:edtEarningsName,
                            LumpSumEDisplayName:edtDisplayName,
                            LumpSumERateType:edtRateType,
                            LumpSumEExpenseAccount:edtExpenseAccount,
                            LumpSumEExemptPaygWithholding:ExemptPAYGp,
                            LumpSumEExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                            LumpSumEReportableW1onActivityStatement:ExemptReportable,
                            LumpSumEActive:true        
                       }
                   };
        
                  taxRateService.saveExemptReportableLumpSumE(objDetails).then(function (objDetails) {
                            $('.fullScreenSpin').css('display','none');
                            swal({
                                title: 'Success',
                                text: 'Lump Sum E Earnings Saved Successfully',
                                type: 'success',
                                showCancelButton: false,
                                confirmButtonText: 'Done'

                            }).then((result) => {
                                if (result.value) {
                                    sideBarService.getExemptReportableLumpSumE(initialBaseDataLoad, 0).then(function (dataReload) {
                                        addVS1Data("Tlumpsume", JSON.stringify(dataReload)).then(function (datareturn) {
                                        
                                            $('#addlumpsumlabelid').trigger('click');
                                            $('.fullScreenSpin').css('display','inline-block'); 
                                         
                                            window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                        }).catch(function (err) {

                                             
                                                $('#addlumpsumlabelid').trigger('click');
                                                $('.fullScreenSpin').css('display','inline-block');
                                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                        });
                                      }).catch(function (err) {

                                        $('#addlumpsumlabelid').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                      });
                                }else if (result.dismiss === 'cancel') {
                            
                                }
                            });         


                    }).catch(function (err) {
                            $('.fullScreenSpin').css('display','none');
                            swal({
                            title: 'Oooops...',
                            text: err,
                            type: 'error',
                            showCancelButton: false,
                            confirmButtonText: 'Try Again'
                            }).then((result) => {
                            if (result.value) {
                            } else if (result.dismiss === 'cancel') {
                
                            }
                            });                              
                      });
                }).catch(function (err) {
                                objDetails = {
                                type: "Tlumpsume",
                                fields: {
                                    LumpSumEName:edtEarningsName,
                                    LumpSumEDisplayName:edtDisplayName,
                                    LumpSumERateType:edtRateType,
                                    LumpSumEExpenseAccount:edtExpenseAccount,
                                    LumpSumEExemptPaygWithholding:ExemptPAYGp,
                                    LumpSumEExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                                    LumpSumEReportableW1onActivityStatement:ExemptReportable,
                                    LumpSumEActive:true         
                                }
                               };
        
                    taxRateService.saveExemptReportableLumpSumE(objDetails).then(function (objDetails) {
                        $('.fullScreenSpin').css('display','none');
                        swal({
                            title: 'Success',
                            text: 'Lump Sum E Earnings Saved Successfully',
                            type: 'success',
                            showCancelButton: false,
                            confirmButtonText: 'Done'

                        }).then((result) => {
                            if (result.value) {
                                sideBarService.getExemptReportableLumpSumE(initialBaseDataLoad, 0).then(function (dataReload) {
                                    addVS1Data("Tlumpsume", JSON.stringify(dataReload)).then(function (datareturn) {
                                        
                                        $('#addlumpsumlabelid').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                    
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                    }).catch(function (err) { 
                                           
                                        $('#addlumpsumlabelid').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                    });
                                  }).catch(function (err) {

                                        $('#addlumpsumlabelid').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                  });
                            }else if (result.dismiss === 'cancel') {
                        
                            }
                        });     

                    }).catch(function (err) {
                            $('.fullScreenSpin').css('display','none');
                            swal({
                            title: 'Oooops...',
                            text: err,
                            type: 'error',
                            showCancelButton: false,
                            confirmButtonText: 'Try Again'
                            }).then((result) => {
                            if (result.value) {
                            
                            } else if (result.dismiss === 'cancel') {
                
                            }
                            });
                      
                     });
                });

            }
    
         }

    },

   'click .saveExemptReportableTermnination':function(){
        let templateObject = Template.instance();
        $('.fullScreenSpin').css('display','inline-block');
        let taxRateService = new TaxRateService();
        let edtEarningsName = $('#edtEarningsNameTermnination').val() || '';
        let edtDisplayName = $('#edtDisplayNameTermnination').val() || '';     
        let edtRateType = $('#edtRateTypeTermnination').val() || '';
        let edtExpenseAccount = $('#edtExpenseAccountTermnination').val() || '';
        let ExemptPAYGp = false;
        let ExemptSuperannuation = false;
        let ExemptReportable = false;
        let oldid = $('#edtemploymentTermninationid').val() || 0;
        
        if($('#formCheck-ExemptPAYGTermnination').is(':checked')){
            ExemptPAYGp = true;
        }else{
            ExemptPAYGp = false;
        }
    
        if($('#formCheck-ExemptSuperannuationTermnination').is(':checked')){
            ExemptSuperannuation = true;
        }else{
            ExemptSuperannuation = false;
        }
    
        if($('#formCheck-ExemptReportableTermnination').is(':checked')){
            ExemptReportable = true;
        }else{
            ExemptReportable = false;
        }
    
        if (edtEarningsName === '') {
            $('.fullScreenSpin').css('display','none');
            swal('Earnings Name has not been Filled!', '', 'warning');
            e.preventDefault();
         }
         else {
             
            if(oldid != 0)
            {
                $('.fullScreenSpin').css('display','inline-block');
                objDetails = {
                    type: "TTerminationSimple",
                    fields: {
                         ID: parseInt(oldid),
                         EmployeeTerminationPaymentsName:edtEarningsName,
                         EmployeeTerminationPaymentsDisplayName:edtDisplayName,
                         EmployeeTerminationPaymentsRateType:edtRateType,
                         EmployeeTerminationPaymentsExpenseAccount:edtExpenseAccount,
                         EmployeeTerminationPaymentsExemptPaygWithholding:ExemptPAYGp,
                         EmployeeTerminationPaymentsExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                         EmployeeTerminationPaymentsReportableW1onActivityStatement:ExemptReportable,
                         EmployeeTerminationPaymentsActive:true,
                       
                    }
                };

                taxRateService.saveExemptReportableTermnination(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Success',
                        text: 'Employee Termination Earning Saved Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'

                    }).then((result) => {
                        if (result.value) {
                            sideBarService.getExemptReportableTermnination(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("TTerminationSimple", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#addemployeterm').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                   
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                }).catch(function (err) {
                                    $('#addemployeterm').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                });
                              }).catch(function (err) {
                                $('#addemployeterm').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });

               

                    
                }).catch(function (err) {
                   
                    $('.fullScreenSpin').css('display','none');
                    swal({
                    title: 'Oooops...',
                    text: err,
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'Try Again'
                    }).then((result) => {
                    if (result.value) {
                      
                    } else if (result.dismiss === 'cancel') {
      
                    }
                    });
                     
               });


            }
            else
            {
                $('.fullScreenSpin').css('display','inline-block');
                taxRateService.checkExemptReportableTermnination(edtEarningsName).then(function (data) {
                    earningid = data.tterminationimple[0].Id;
                    objDetails = {
                       type: "TTerminationSimple",
                       fields: {
                            ID: parseInt(earningid),
                            EmployeeTerminationPaymentsName:edtEarningsName,
                            EmployeeTerminationPaymentsDisplayName:edtDisplayName,
                            EmployeeTerminationPaymentsRateType:edtRateType,
                            EmployeeTerminationPaymentsExpenseAccount:edtExpenseAccount,
                            EmployeeTerminationPaymentsExemptPaygWithholding:ExemptPAYGp,
                            EmployeeTerminationPaymentsExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                            EmployeeTerminationPaymentsReportableW1onActivityStatement:ExemptReportable,
                            EmployeeTerminationPaymentsActive:true,
                          
                       }
                   };
        
                   taxRateService.saveExemptReportableTermnination(objDetails).then(function (objDetails) {
                        $('.fullScreenSpin').css('display','none');
                        swal({
                            title: 'Success',
                            text: 'Employee Termination Earning Saved Successfully',
                            type: 'success',
                            showCancelButton: false,
                            confirmButtonText: 'Done'

                        }).then((result) => {
                            if (result.value) {
                                sideBarService.getExemptReportableTermnination(initialBaseDataLoad, 0).then(function (dataReload) {
                                    addVS1Data("TTerminationSimple", JSON.stringify(dataReload)).then(function (datareturn) {
                                        $('#addemployeterm').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                    }).catch(function (err) {
                                        $('#addemployeterm').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');       
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                    });
                                  }).catch(function (err) {
                                    $('#addemployeterm').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                  });
                            }else if (result.dismiss === 'cancel') {
                        
                            }
                        });



                   }).catch(function (err) {
                            $('.fullScreenSpin').css('display','none');
                            swal({
                            title: 'Oooops...',
                            text: err,
                            type: 'error',
                            showCancelButton: false,
                            confirmButtonText: 'Try Again'
                            }).then((result) => {
                            if (result.value) {
                              
                            } else if (result.dismiss === 'cancel') {
                
                            }
                            });
                      
                    
                   });
                   }).catch(function (err) {
                        objDetails = {
                        type: "TTerminationSimple",
                        fields: {
                            EmployeeTerminationPaymentsName:edtEarningsName,
                            EmployeeTerminationPaymentsDisplayName:edtDisplayName,
                            EmployeeTerminationPaymentsRateType:edtRateType,
                            EmployeeTerminationPaymentsExpenseAccount:edtExpenseAccount,
                            EmployeeTerminationPaymentsExemptPaygWithholding:ExemptPAYGp,
                            EmployeeTerminationPaymentsExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                            EmployeeTerminationPaymentsReportableW1onActivityStatement:ExemptReportable,
                            EmployeeTerminationPaymentsActive:true
                            
                       }
                    };
        
                    taxRateService.saveExemptReportableTermnination(objDetails).then(function (objDetails) {
                                $('.fullScreenSpin').css('display','none');
                                swal({
                                    title: 'Success',
                                    text: 'Employee Termination Earning Saved Successfully',
                                    type: 'success',
                                    showCancelButton: false,
                                    confirmButtonText: 'Done'

                                }).then((result) => {
                                    if (result.value) {
                                        sideBarService.getExemptReportableTermnination(initialBaseDataLoad, 0).then(function (dataReload) {
                                            addVS1Data("TTerminationSimple", JSON.stringify(dataReload)).then(function (datareturn) {
                                                $('#addemployeterm').trigger('click');
                                                $('.fullScreenSpin').css('display','inline-block');
                                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                            }).catch(function (err) {
                                                $('#addemployeterm').trigger('click');
                                               $('.fullScreenSpin').css('display','inline-block');
                                               window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                            });
                                          }).catch(function (err) {
                                            $('#addemployeterm').trigger('click');
                                            $('.fullScreenSpin').css('display','inline-block');
                                            window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                          });
                                    }else if (result.dismiss === 'cancel') {
                                
                                    }
                                });

                    }).catch(function (err) {
                        $('.fullScreenSpin').css('display','none');
                            swal({
                            title: 'Oooops...',
                            text: err,
                            type: 'error',
                            showCancelButton: false,
                            confirmButtonText: 'Try Again'
                            }).then((result) => {
                            if (result.value) {
                          
                            } else if (result.dismiss === 'cancel') {
                
                            }
                            });
                      
                   });
                  });

             }
         }


    },

    'click .saveDirectorFee':function(){
        let templateObject = Template.instance();
        $('.fullScreenSpin').css('display','inline-block');
        let taxRateService = new TaxRateService();
        let edtEarningsName = $('#edtEarningsNameDirectorsFees').val() || '';
        let edtDisplayName = $('#edtDisplayNameDirectorsFees').val() || '';     
        let edtRateType = $('#edtRateTypeDirectorsFees').val() || '';
        let edtExpenseAccount = $('#edtExpenseAccountDirectorsFees').val() || '';
        let ExemptPAYGp = false;
        let ExemptSuperannuation = false;
        let ExemptReportable = false;
        let oldid = $('#edtEarningsDirectorsFeesid').val() || 0;
        if($('#formCheck-ExemptPAYGDirectorsFees').is(':checked')){
            ExemptPAYGp = true;
        }else{
            ExemptPAYGp = false;
        }
    
        if($('#formCheck-ExemptSuperannuationDirectorsFees').is(':checked')){
            ExemptSuperannuation = true;
        }else{
            ExemptSuperannuation = false;
        }
    
        if($('#formCheck-ExemptReportableDirectorsFees').is(':checked')){
            ExemptReportable = true;
        }else{
            ExemptReportable = false;
        }
    
        if (edtEarningsName === '') {
            $('.fullScreenSpin').css('display','none');
            swal('Earnings Name has not been Filled!', '', 'warning');
            e.preventDefault();
         }
         else {
            
            if(oldid != 0)
            {
                $('.fullScreenSpin').css('display','inline-block');
                objDetails = {
                    type: "Tdirectorsfees",
                    fields: {
                        ID: parseInt(oldid),
                        DirectorsFeesName:edtEarningsName,
                        DirectorsFeesDisplayName:edtDisplayName,
                        DirectorsFeesRateType:edtRateType,
                        DirectorsFeesExpenseAccount:edtExpenseAccount,
                        DirectorsFeesExemptPaygWithholding:ExemptPAYGp,
                        DirectorsFeesExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                        DirectorsFeesReportableW1onActivityStatement:ExemptReportable,
                        DirectorsFeesActive:true     
                    }
                };
            
                taxRateService.saveDirectorFee(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Success',
                        text: 'Director fee earning saved Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'
            
                     }).then((result) => {
                        if (result.value) {
                            sideBarService.getDirectorFee(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("Tdirectorsfees", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#closedirect').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                }).catch(function (err) {
                                    $('#closedirect').trigger('click');
                                     $('.fullScreenSpin').css('display','inline-block');
                                     window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                });
                              }).catch(function (err) {
                                $('#closedirect').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });
                             
                }).catch(function (err) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                    title: 'Oooops...',
                    text: err,
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'Try Again'
                    }).then((result) => {
                    if (result.value) {
                    } else if (result.dismiss === 'cancel') {
                    }
                    });
                  });
            }
            else
            {
                $('.fullScreenSpin').css('display','inline-block');
                taxRateService.checkDirectorFee(edtEarningsName).then(function (data) {
                    earningid = data.tdirectorsfees[0].Id;
                    objDetails = {
                       type: "Tdirectorsfees",
                       fields: {
                           ID: parseInt(earningid),
                           DirectorsFeesName:edtEarningsName,
                           DirectorsFeesDisplayName:edtDisplayName,
                           DirectorsFeesRateType:edtRateType,
                           DirectorsFeesExpenseAccount:edtExpenseAccount,
                           DirectorsFeesExemptPaygWithholding:ExemptPAYGp,
                           DirectorsFeesExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                           DirectorsFeesReportableW1onActivityStatement:ExemptReportable,
                           DirectorsFeesActive:true     
                       }
                   };
        
                  taxRateService.saveDirectorFee(objDetails).then(function (objDetails) {
                            $('.fullScreenSpin').css('display','none');
                            swal({
                                title: 'Success',
                                text: 'Director fee earning saved Successfully',
                                type: 'success',
                                showCancelButton: false,
                                confirmButtonText: 'Done'
                    
                            }).then((result) => {
                                if (result.value) {
                                    sideBarService.getDirectorFee(initialBaseDataLoad, 0).then(function (dataReload) {
                                        addVS1Data("Tdirectorsfees", JSON.stringify(dataReload)).then(function (datareturn) {
                                            $('#closedirect').trigger('click');
                                            $('.fullScreenSpin').css('display','inline-block');
                                            window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                        }).catch(function (err) {
                                            $('#closedirect').trigger('click');
                                            $('.fullScreenSpin').css('display','inline-block');
                                          
                                            window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                        });
                                      }).catch(function (err) {
                                        $('#closedirect').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                      });
                                }else if (result.dismiss === 'cancel') {
                            
                                }
                            });

                    }).catch(function (err) {
                        $('.fullScreenSpin').css('display','none');
                        swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'Try Again'
                        }).then((result) => {
                        if (result.value) {
                        
                        } else if (result.dismiss === 'cancel') {
            
                        }
                        });                
                      });
                      }).catch(function (err) {
                        objDetails = {
                        type: "Tdirectorsfees",
                        fields: {
                            DirectorsFeesName:edtEarningsName,
                            DirectorsFeesDisplayName:edtDisplayName,
                            DirectorsFeesRateType:edtRateType,
                            DirectorsFeesExpenseAccount:edtExpenseAccount,
                            DirectorsFeesExemptPaygWithholding:ExemptPAYGp,
                            DirectorsFeesExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                            DirectorsFeesReportableW1onActivityStatement:ExemptReportable,
                            DirectorsFeesActive:true          
                            }
                       };
        
                    taxRateService.saveDirectorFee(objDetails).then(function (objDetails) {
                            $('.fullScreenSpin').css('display','none');
                            swal({
                                title: 'Success',
                                text: 'Director fee earning saved Successfully',
                                type: 'success',
                                showCancelButton: false,
                                confirmButtonText: 'Done'
                    
                            }).then((result) => {
                                if (result.value) {
                                    sideBarService.getDirectorFee(initialBaseDataLoad, 0).then(function (dataReload) {
                                        addVS1Data("Tdirectorsfees", JSON.stringify(dataReload)).then(function (datareturn) {
                                            $('#closedirect').trigger('click');
                                            $('.fullScreenSpin').css('display','inline-block');
                                         
                                            window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                        }).catch(function (err) {
                                            $('#closedirect').trigger('click');
                                            $('.fullScreenSpin').css('display','inline-block');
                                        
                                            window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                        });
                                      }).catch(function (err) {
                                        $('#closedirect').trigger('click');
                                                $('.fullScreenSpin').css('display','inline-block');
                                        
                                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                      });
                                }else if (result.dismiss === 'cancel') {
                            
                                }
                            });
                    }).catch(function (err) {
                            $('.fullScreenSpin').css('display','none');
                            swal({
                            title: 'Oooops...',
                            text: err,
                            type: 'error',
                            showCancelButton: false,
                            confirmButtonText: 'Try Again'
                            }).then((result) => {
                            if (result.value) {
                          
                            } else if (result.dismiss === 'cancel') {
                
                            }
                            });
                            
                    });
                  });

            }
           
          
             
    
    
         }
    
    


    },

    'click .saveLumpSumW':function(){
        let templateObject = Template.instance();
        $('.fullScreenSpin').css('display','inline-block');
        let taxRateService = new TaxRateService();
        let edtEarningsName = $('#edtEarningsNameLumpSumW').val() || '';
        let edtDisplayName = $('#edtDisplayNameLumpSumW').val() || '';     
        let edtRateType = $('#edtRateTypeLumpSumW').val() || '';
        let edtExpenseAccount = $('#edtExpenseAccountLumpSumW').val() || '';
        let ExemptPAYGp = false;
        let ExemptSuperannuation = false;
        let ExemptReportable = false;
        let oldid = $('#edtEarningsNameLumpSumWid').val() || 0;
        if($('#formCheck-ExemptPAYGLumpSumW').is(':checked')){
            ExemptPAYGp = true;
        }else{
            ExemptPAYGp = false;
        }
    
        if($('#formCheck-ExemptSuperannuationLumpSumW').is(':checked')){
            ExemptSuperannuation = true;
        }else{
            ExemptSuperannuation = false;
        }
    
        if($('#formCheck-ExemptReportableLumpSumW').is(':checked')){
            ExemptReportable = true;
        }else{
            ExemptReportable = false;
        }
    
        if (edtEarningsName === '') {
            $('.fullScreenSpin').css('display','none');
            swal('Earnings Name has not been Filled!', '', 'warning');
            e.preventDefault();
         }
         else {
           
            if(oldid != 0)
            {
                $('.fullScreenSpin').css('display','inline-block');
                objDetails = {
                    type: "TLumpSumW",
                    fields: {
                        ID: parseInt(oldid),
                        LumpSumWName:edtEarningsName,
                        LumpSumWDisplayName:edtDisplayName,
                        LumpSumWRateType:edtRateType,
                        LumpSumWExpenseAccount:edtExpenseAccount,
                        LumpSumWExemptPaygWithholding:ExemptPAYGp,
                        LumpSumWExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                        LumpSumWReportableW1onActivityStatement:ExemptReportable,
                        LumpSumWActive:true     
                    }
                };
            
                taxRateService.saveLumpSumW(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                        title: 'Success',
                        text: 'Lump Sum W Saved Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'
            
                     }).then((result) => {
                        if (result.value) {
                            sideBarService.getLumpSumW(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("TLumpSumW", JSON.stringify(dataReload)).then(function (datareturn) {
                                   
                                    $('#lumpSumWLabelclose').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                }).catch(function (err) {
                                    $('#lumpSumWLabelclose').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                });
                              }).catch(function (err) {
                                $('#lumpSumWLabelclose').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                              });
                        }else if (result.dismiss === 'cancel') {
                    
                        }
                    });  
                    
                });
            }
            else
            {
                $('.fullScreenSpin').css('display','inline-block');
                taxRateService.checkLumpSumW(edtEarningsName).then(function (data) {
                    earningid = data.tlumpsumw[0].Id;
                    objDetails = {
                       type: "TLumpSumW",
                       fields: {
                           ID: parseInt(earningid),
                           LumpSumWName:edtEarningsName,
                           LumpSumWDisplayName:edtDisplayName,
                           LumpSumWRateType:edtRateType,
                           LumpSumWExpenseAccount:edtExpenseAccount,
                           LumpSumWExemptPaygWithholding:ExemptPAYGp,
                           LumpSumWExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                           LumpSumWReportableW1onActivityStatement:ExemptReportable,
                           LumpSumWActive:true     
                       }
                   };
        
                  taxRateService.saveLumpSumW(objDetails).then(function (objDetails) {
                  
                        $('.fullScreenSpin').css('display','none');
                        swal({
                            title: 'Success',
                            text: 'Lump Sum W Saved Successfully',
                            type: 'success',
                            showCancelButton: false,
                            confirmButtonText: 'Done'
                
                        }).then((result) => {
                            if (result.value) {
                                sideBarService.getLumpSumW(initialBaseDataLoad, 0).then(function (dataReload) {
                                    addVS1Data("TLumpSumW", JSON.stringify(dataReload)).then(function (datareturn) {
                                        $('#lumpSumWLabelclose').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                    }).catch(function (err) {
                                        $('#lumpSumWLabelclose').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                    });
                                  }).catch(function (err) {
                                    $('#lumpSumWLabelclose').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                  });
                            }else if (result.dismiss === 'cancel') {
                        
                            }
                        });  

                    }).catch(function (err) {
                        $('.fullScreenSpin').css('display','none');
                            swal({
                            title: 'Oooops...',
                            text: err,
                            type: 'error',
                            showCancelButton: false,
                            confirmButtonText: 'Try Again'
                            }).then((result) => {
                            if (result.value) {
                            
                            } else if (result.dismiss === 'cancel') {
                
                            }
                            });
    
                            });
                      }).catch(function (err) {
                        objDetails = {
                        type: "TLumpSumW",
                        fields: {
                            LumpSumWName:edtEarningsName,
                            LumpSumWDisplayName:edtDisplayName,
                            LumpSumWRateType:edtRateType,
                            LumpSumWExpenseAccount:edtExpenseAccount,
                            LumpSumWExemptPaygWithholding:ExemptPAYGp,
                            LumpSumWExemptSuperannuationGuaranteeCont:ExemptSuperannuation,
                            LumpSumWReportableW1onActivityStatement:ExemptReportable,
                            LumpSumWActive:true         
                       }
                    };
        
                      taxRateService.saveLumpSumW(objDetails).then(function (objDetails) {
                        $('.fullScreenSpin').css('display','none');
                        swal({
                            title: 'Success',
                            text: 'Lump Sum W Saved Successfully',
                            type: 'success',
                            showCancelButton: false,
                            confirmButtonText: 'Done'
                
                        }).then((result) => {
                            if (result.value) {
                                sideBarService.getLumpSumW(initialBaseDataLoad, 0).then(function (dataReload) {
                                    addVS1Data("TLumpSumW", JSON.stringify(dataReload)).then(function (datareturn) {
                                        $('#lumpSumWLabelclose').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                    }).catch(function (err) {
                                        $('#lumpSumWLabelclose').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                    });
                                  }).catch(function (err) {
                                    $('#lumpSumWLabelclose').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                  });
                            }else if (result.dismiss === 'cancel') {
                        
                            }
                        });  

                       }).catch(function (err) {
                            $('.fullScreenSpin').css('display','none');
                            swal({
                            title: 'Oooops...',
                            text: err,
                            type: 'error',
                            showCancelButton: false,
                            confirmButtonText: 'Try Again'
                            }).then((result) => {
                            if (result.value) {
                          
                            } else if (result.dismiss === 'cancel') {
                
                            }
                            });
                     
                       });
                  });

            }
           
         
    
         }
    
    


    },

    'click .btnSaveAccountPOP':function()
    {

        let templateObject = Template.instance();
        $('.fullScreenSpin').css('display','inline-block');
        let taxRateService = new TaxRateService();
        let accountService = new AccountService();
        let organisationService = new OrganisationService();

        let edtAccountId = $('#edtAccountID').val() || '';
        let accSelected = $('#accSelected').val() || '';     
        let edtAccountName = $('#edtAccountName').val() || '';
        let edtAccountNo = $('#edtAccountNo').val() || '';
        let sltTaxCode = $('#sltTaxCode').val() || '';     
        let txaAccountDescription = $('#txaAccountDescription').val() || '';
        let sltAccountType = $('#sltAccountType').val() || '';
        let edtBSB = $('#edtBSB').val() || '';
        let edtBankAccountNo = $('#edtBankAccountNo').val() || '';
        let swiftCode = $('#swiftCode').val() || '';     
        let routingNo = $('#routingNo').val() || '';
        let showOnTransactions = false;
        let edtBankName = $('#edtBankName').val() || '';
        let edtBankAccountName = $('#edtBankAccountName').val() || '';
        let cardnumber = $('#edtCardNumber').val() || '';
        var expirydateTime = new Date($("#edtExpiryDate").datepicker("getDate"));
        let expiryDate =  expirydateTime.getFullYear() +  "-" +(expirydateTime.getMonth() + 1) +  "-" + expirydateTime.getDate();
        let expire = expiryDate;
        let edtCvc = $('#edtCvc').val() || '';
         
        if($('#showOnTransactions').is(':checked')){
            showOnTransactions = true;
        }else{
            showOnTransactions = false;
        }

        let companyID = 1;
      
        if (edtAccountName === '') {
            $('.fullScreenSpin').css('display','none');
            swal('Account Name has not been Filled!', '', 'warning');
            e.preventDefault();
         }
         else {
           
            if(edtAccountId != 0)
            {
                $('.fullScreenSpin').css('display','inline-block');
                data = {
                    type: "TAccount",
                    fields: {
                      ID: edtAccountId,
                      AccountName: edtAccountName || "",
                      AccountNumber: edtAccountNo || "",
                      Active: true,
                      BankAccountName: edtBankAccountName || "",
                      BankAccountNumber: edtBankAccountNo || "",
                      BSB: edtBSB || "",
                      Description: txaAccountDescription || "",
                      TaxCode: sltTaxCode || "",
                      Extra: swiftCode,
                      BankNumber: routingNo,
                      //Level4: bankname,
                      PublishOnVS1: true,
                      IsHeader: showOnTransactions,
                      CarNumber: cardnumber || "",
                      CVC: edtCvc || "",
                      ExpiryDate: expiryDate || "",
                    },
                  };

                  accountService.saveAccount(data)
                  .then(function (data) {
                    if ($("#showOnTransactions").is(":checked")) {
                      var objDetails = {
                        type: "TCompanyInfo",
                        fields: {
                          Id: companyID,
                          AccountNo: edtBankAccountNo,
                          BankBranch: swiftCode,
                          BankAccountName: edtBankAccountName,
                          BankName: edtBankName,
                          Bsb: edtBSB,
                          SiteCode: routingNo,
                          FileReference: edtAccountName,
                        },
                      };
                      organisationService
                        .saveOrganisationSetting(objDetails)
                        .then(function (data) {
                          var accNo = edtBankAccountNo || "";
                          var swiftCode1 = swiftCode || "";
                          var bankAccName = edtBankAccountName || "";
                          var accountName = edtAccountName || "";
                          var bsb = edtBSB || "";
                          var routingNo = routingNo || "";
                          localStorage.setItem("vs1companyBankName", bankname);
                          localStorage.setItem("vs1companyBankAccountName", bankAccName);
                          localStorage.setItem("vs1companyBankAccountNo", accNo);
                          localStorage.setItem("vs1companyBankBSB", bsb);
                          localStorage.setItem("vs1companyBankSwiftCode", swiftCode1);
                          localStorage.setItem("vs1companyBankRoutingNo", routingNo);
                          sideBarService
                            .getAccountListVS1()
                            .then(function (dataReload) {
                              addVS1Data("TAccountVS1", JSON.stringify(dataReload))
                                .then(function (datareturn) {
                                    window.open('/payrollrules?active_key=payitem','_self');
                                })
                                .catch(function (err) {
                                    window.open('/payrollrules?active_key=payitem','_self');
                                });
                            })
                            .catch(function (err) {
                                window.open('/payrollrules?active_key=payitem','_self');
                            });
                        })
                        .catch(function (err) {
                          sideBarService
                            .getAccountListVS1()
                            .then(function (dataReload) {
                              addVS1Data("TAccountVS1", JSON.stringify(dataReload))
                                .then(function (datareturn) {
                                    window.open('/payrollrules?active_key=payitem','_self');
                                })
                                .catch(function (err) {
                                    window.open('/payrollrules?active_key=payitem','_self');
                                });
                            })
                            .catch(function (err) {
                                window.open('/payrollrules?active_key=payitem','_self');
                            });
                        });
                    } else {
                      sideBarService
                        .getAccountListVS1()
                        .then(function (dataReload) {
                          addVS1Data("TAccountVS1", JSON.stringify(dataReload))
                            .then(function (datareturn) {
                                window.open('/payrollrules?active_key=payitem','_self');;
                            })
                            .catch(function (err) {
                                window.open('/payrollrules?active_key=payitem','_self');
                            });
                        })
                        .catch(function (err) {
                            window.open('/payrollrules?active_key=payitem','_self');
                        });
                    }
                  })
                  .catch(function (err) {
                    swal({
                      title: "Oooops...",
                      text: err,
                      type: "error",
                      showCancelButton: false,
                      confirmButtonText: "Try Again",
                    }).then((result) => {
                      if (result.value) {
                        window.open('/payrollrules?active_key=payitem','_self');
                      } else if (result.dismiss === "cancel") {
                      }
                    });
                    $(".fullScreenSpin").css("display", "none");
                  });
            
                
            }
            else
            {
                swal('Account is not selected to edit!', '', 'warning');
                e.preventDefault();
            }
            
           
             
    
    
         }
    

    },

    'change #edtFundType':function(){
     
        let fundType = $('#edtFundType').val();
        if(fundType == 'selfmanged')
        {
            $('#acountabmandelectronic').css('display','block');
            $('#accountbsb').css('display','block');
            $('#account_name').css('display','block');
        }
        else{
            $('#acountabmandelectronic').css('display','none');
            $('#accountbsb').css('display','none');
            $('#account_name').css('display','none');
        }

    },

    'change #edtAllowanceAmount, change #edtDeductionAmount': function(event) {

        let utilityService = new UtilityService();
        if (!isNaN($(event.target).val())) {
            let inputUnitPrice = parseFloat($(event.target).val()) || 0;
            $(event.target).val(utilityService.modifynegativeCurrencyFormat(inputUnitPrice));
        } else {
            let inputUnitPrice = Number($(event.target).val().replace(/[^0-9.-]+/g, "")) || 0;

            $(event.target).val(utilityService.modifynegativeCurrencyFormat(inputUnitPrice));


        }

    },
    'keydown #edtAllowanceAmount, keydown #edtDeductionAmount': function(event) {
        if ($.inArray(event.keyCode, [46, 8, 9, 27, 13, 110]) !== -1 ||

            (event.keyCode === 65 && (event.ctrlKey === true || event.metaKey === true)) ||

            (event.keyCode >= 35 && event.keyCode <= 40)) {

            return;
        }

        if (event.shiftKey == true) {
            event.preventDefault();
        }

        if ((event.keyCode >= 48 && event.keyCode <= 57) ||
            (event.keyCode >= 96 && event.keyCode <= 105) ||
            event.keyCode == 8 || event.keyCode == 9 ||
            event.keyCode == 37 || event.keyCode == 39 ||
            event.keyCode == 46 || event.keyCode == 190 || event.keyCode == 189 || event.keyCode == 109) {} else {
            event.preventDefault();
        }
    },
    'click .btnDeleteAllowance': function () {
      let taxRateService = new TaxRateService();
      let allowanceId = $('#selectDeleteLineID').val()||0;
      $('.fullScreenSpin').css('display','inline-block');

      let objDetails = {
          type: "TAllowance",
          fields: {
              Id: parseInt(allowanceId),
              Active: false,
              DisplayIn: "Allowances",
             

          }
      };

      taxRateService.saveAllowance(objDetails).then(function (objDetails) {
       

         $('.fullScreenSpin').css('display','none');
         swal({
            title: 'Success',
            text: 'Allowance Removed Successfully',
            type: 'success',
            showCancelButton: false,
            confirmButtonText: 'Done'

         }).then((result) => {
            if (result.value) {
         
              sideBarService.getAllowance(initialBaseDataLoad, 0).then(function (dataReload) {
               addVS1Data("TAllowance", JSON.stringify(dataReload)).then(function (datareturn) {
                $('#delallow').trigger('click');
                $('.fullScreenSpin').css('display','inline-block');
                  window.open('/payrollrules?active_key=payitem','_self');
              }).catch(function (err) {
                $('#delallow').trigger('click');
                $('.fullScreenSpin').css('display','inline-block');
                  window.open('/payrollrules?active_key=payitem','_self');
                });
                }).catch(function (err) {
                    $('#delallow').trigger('click');
                    $('.fullScreenSpin').css('display','inline-block');
                  window.open('/payrollrules?active_key=payitem','_self');
                });

            }else if (result.dismiss === 'cancel') {
        
            }
         });
         
      }).catch(function (err) {
            $('.fullScreenSpin').css('display','none');
            swal({
            title: 'Oooops...',
            text: err,
            type: 'error',
            showCancelButton: false,
            confirmButtonText: 'Try Again'
            }).then((result) => {
            if (result.value) {
            
            } else if (result.dismiss === 'cancel') {

            }
            });
         
      });

    },

    'click .btnDeleteCalender': function () {
        let taxRateService = new TaxRateService();
        let calenderid = $('#selectColDeleteLineID').val()||0;
        let calendername = $('#selectCalenderName').val()||0;
        $('.fullScreenSpin').css('display','inline-block');
     
        let objDetails = {
            type: "TPayrollCalendars",
            fields: {
                Id: calendername,
                PayrollCalendarActive: false,          
            }
        };
  
        if(calendername != 0)
        {
              taxRateService.saveCalender(objDetails).then(function (objDetails) {
                $('.fullScreenSpin').css('display','none');
                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'Calender Removed Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'
        
                 }).then((result) => {
                    if (result.value) {
                        sideBarService.getCalender(initialBaseDataLoad, 0).then(function (dataReload) {
                            addVS1Data("TPayrollCalendars", JSON.stringify(dataReload)).then(function (datareturn) {
                                $('#hidedeleteca').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=calender','_self');
                           }).catch(function (err) {
                                $('#hidedeleteca').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=calender','_self');
                             });
                             }).catch(function (err) {
                                $('#hidedeleteca').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=calender','_self');
                             });
                    }else if (result.dismiss === 'cancel') {
                
                    }
                });
               
              }).catch(function (err) {
                swal({
                title: 'Oooops...',
                text: err,
                type: 'error',
                showCancelButton: false,
                confirmButtonText: 'ok'
                }).then((result) => {
                if (result.value) {
                
                } else if (result.dismiss === 'cancel') {
        
                }
                });
                  $('.fullScreenSpin').css('display','none');
              });

        }
        else{
                $('.fullScreenSpin').css('display','none');
                swal({
                title: 'Oooops...',
                text: 'Calender ID missing',
                type: 'error',
                showCancelButton: false,
                confirmButtonText: 'Try Again'
                }).then((result) => {
                if (result.value) {
                 
                } else if (result.dismiss === 'cancel') {
        
                }
                });
              
            
        }
  
       
  
    },

    'click .btnDeleteLeave': function () {
        let taxRateService = new TaxRateService();
        let LeaveId = $('#selectLeaveDeleteLineID').val()||0;
        let LeaveName = $('#selectLeaveName').val()||0;
        let Type = $('#leave_type').val()|| '';
        if(Type == 'paid'){
           
            $('.fullScreenSpin').css('display','inline-block');
            let objDetails = {
                type: "TPaidLeave",
                fields: {
                    Id: LeaveName,
                    LeavePaidActive: false,          
                }
            };
            if(LeaveName != 0)
             {
                       taxRateService.savePaidLeave(objDetails).then(function (objDetails) {
                       $('.fullScreenSpin').css('display','none');
                       swal({
                        title: 'Success',
                        text: 'Paid Leave removed Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'
    
                        }).then((result) => {
                            if (result.value) {
                                sideBarService.getPaidLeave(initialBaseDataLoad, 0).then(function (dataReload) {
                                    addVS1Data("TPaidLeave", JSON.stringify(dataReload)).then(function (datareturn) {
                                        $('#delleave').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                    }).catch(function (err) {
                                        $('#delleave').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                    });
                                  }).catch(function (err) {
                                    $('#delleave').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                  });
                                
                            }else if (result.dismiss === 'cancel') {
                        
                            }
                        });

                      
                       }).catch(function (err) {
                        swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'Try Again'
                        }).then((result) => {
                        if (result.value) {
                       
                        } else if (result.dismiss === 'cancel') {
                
                        }
                        });
                       
                    });
    
            }
            else{

                $('.fullScreenSpin').css('display','inline-block');
                swal({
                    title: 'Oooops...',
                    text: 'Please Select Leave to remove',
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'ok'
                    }).then((result) => {
                    if (result.value) {
                    } else if (result.dismiss === 'cancel') {
                    }
                });    
            }
      

        }
        else{

            $('.fullScreenSpin').css('display','inline-block');
            let objDetails = {
                type: "TUnPaidLeave",
                fields: {
                    Id: LeaveId,
                    LeaveUnPaidActive: false,          
                }
            };
            if(LeaveName != 0)
             {
                      taxRateService.saveUnPaidLeave(objDetails).then(function (objDetails) {
                       $('.fullScreenSpin').css('display','none');
                       swal({
                        title: 'Success',
                        text: 'Unpaid removed Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'
    
                        }).then((result) => {
                            if (result.value) {
                                sideBarService.getUnPaidLeave(initialBaseDataLoad, 0).then(function (dataReload) {
                                    addVS1Data("TUnpaidLeave", JSON.stringify(dataReload)).then(function (datareturn) {
                                        $('#delleave').trigger('click');
                                         $('.fullScreenSpin').css('display','inline-block');
                                         window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                    }).catch(function (err) {
                                        $('#delleave').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                    });
                                  }).catch(function (err) {
                                    $('#delleave').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=paidleave','_self');
                                  });
                            }else if (result.dismiss === 'cancel') {
                        
                            }
                        });
             

                   
                       }).catch(function (err) {
                        $('.fullScreenSpin').css('display','none');  
                        swal({
                        title: 'Oooops...',
                        text: err,
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'Try Again'
                        }).then((result) => {
                        if (result.value) {
                       
                        } else if (result.dismiss === 'cancel') {
                
                        }
                        });
                        $('.fullScreenSpin').css('display','none');
                       });
    
            }
            else{
                    swal({
                        title: 'Oooops...',
                        text: 'Please Select Leave to remove',
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'ok'
                        }).then((result) => {
                        if (result.value) {
                        } else if (result.dismiss === 'cancel') {
                        }
                    });    
            }


        }
       
       
  
    },

    'click .btnDeleteHoliday': function () {
        let taxRateService = new TaxRateService();
        let holidayid = $('#selectholidayDeleteLineID').val()||0;
        let holidayname = $('#selectholidayName').val()||0;
        $('.fullScreenSpin').css('display','inline-block');
     
        let objDetails = {
            type: "TPayrollHolidays",
            fields: {
                Id: holidayname,
                PayrollHolidaysActive: false,          
            }
        };
  
        if(holidayname != 0)
        {
            taxRateService.saveHoliday(objDetails).then(function (objDetails) {
                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'Holiday Removed Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'
        
                 }).then((result) => {
                    if (result.value) {
                         sideBarService.getHolidayData(initialBaseDataLoad, 0).then(function (dataReload) {
                            addVS1Data("TPayrollHolidays", JSON.stringify(dataReload)).then(function (datareturn) {
                                $('#delholidy').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=holiday','_self');
                            }).catch(function (err) {
                                $('#delholidy').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=holiday','_self');
                            });
                          }).catch(function (err) {
                                $('#delholidy').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=holiday','_self');
                          });
                    }else if (result.dismiss === 'cancel') {
                
                    }
                });
        
                
              }).catch(function (err) {
                
                $('.fullScreenSpin').css('display','none');
                swal({
                title: 'Oooops...',
                text: err,
                type: 'error',
                showCancelButton: false,
                confirmButtonText: 'ok'
                }).then((result) => {
                if (result.value) {
            
                } else if (result.dismiss === 'cancel') {
        
                }
                });
                
              });

        }
        else{
            $('.fullScreenSpin').css('display','none');
            swal({
            title: 'Oooops...',
            text: 'Please Select Holiday to remove',
            type: 'error',
            showCancelButton: false,
            confirmButtonText: 'ok'
            }).then((result) => {
            if (result.value) {
           
            } else if (result.dismiss === 'cancel') {
    
            }
            });
        }
  
    }, 

    'click .btnDeleteEarnings':function()
    {
        let taxRateService = new TaxRateService();
        let earningid = $('#earningdeletename').val()||0;
        let type = $('#earningdeletetype').val()||0;
       
        $('.fullScreenSpin').css('display','inline-block');

        if(type === 'Ordinary Time Earning')
        {
                 objDetails = {
                        type: "TOrdinaryTimeEarnings",
                        fields: {
                            ID: parseInt(earningid),
                            OrdinaryTimeEarningsActive:false     
                        }
                  };

                  if(earningid != 0)
                  {
                         taxRateService.saveordinaryEarningByName(objDetails).then(function (objDetails) {
                          $('.fullScreenSpin').css('display','none');
                       
                          swal({
                            title: 'Success',
                            text: 'Ordinary Time Earning Removed Successfully',
                            type: 'success',
                            showCancelButton: false,
                            confirmButtonText: 'Done'
        
                            }).then((result) => {
                            if (result.value) {
                                 sideBarService.getOrdinarytimeEarning(initialBaseDataLoad, 0).then(function (dataReload) {
                                    addVS1Data("TOrdinaryTimeEarnings", JSON.stringify(dataReload)).then(function (datareturn) {
                                        $('#closeaddordintimemodel').trigger('click');
                                       $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                    }).catch(function (err) {
                                        $('#closeaddordintimemodel').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                    });
                                  }).catch(function (err) {
                                       $('#closeaddordintimemodel').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                  });


                            }else if (result.dismiss === 'cancel') {
                            
                            }
                            });


              
                            }).catch(function (err) {
                                $('.fullScreenSpin').css('display','none');
                                swal({
                                title: 'Oooops...',
                                text: err,
                                type: 'error',
                                showCancelButton: false,
                                confirmButtonText: 'Ok'
                                }).then((result) => {
                                if (result.value) {
                            
                                } else if (result.dismiss === 'cancel') {
                        
                                }
                                });
                            
                            });

                  }
                  else{
                        $('.fullScreenSpin').css('display','none');
                        swal({
                        title: 'Oooops...',
                        text: 'Please Select Ordinary earning to delete',
                        type: 'error',
                        showCancelButton: false,
                        confirmButtonText: 'ok'
                        }).then((result) => {
                        if (result.value) {
                        } else if (result.dismiss === 'cancel') {
                        }
                    });    
                  }  


        }
        else if(type === 'OverTime Earning')
        {
                 
            objDetails = {
                type: "Tovertimeearnings",
                fields: {
                    ID: parseInt(earningid),
                    OverTimeEarningsActive:false     
                }
            };
            if(earningid != 0)
            {
                    taxRateService.saveExemptReportableOvertime(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                
                    swal({
                        title: 'Success',
                        text: 'Ordinary Time Earning Removed Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'

                        }).then((result) => {
                        if (result.value) {
                            sideBarService.getExemptReportableOvertime(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("Tovertimeearnings", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#addovertimeeringmodel').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                }).catch(function (err) {
                                    $('#addovertimeeringmodel').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                });
                              }).catch(function (err) {
                                $('#addovertimeeringmodel').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                              });

                         }else if (result.dismiss === 'cancel') {
                        
                         }
                         });


        
                        }).catch(function (err) {
                            $('.fullScreenSpin').css('display','none');
                            swal({
                            title: 'Oooops...',
                            text: err,
                            type: 'error',
                            showCancelButton: false,
                            confirmButtonText: 'Ok'
                            }).then((result) => {
                            if (result.value) {
                        
                            } else if (result.dismiss === 'cancel') {
                    
                            }
                            });
                        
                        });

            }
            else{
                    $('.fullScreenSpin').css('display','none');
                    swal({
                    title: 'Oooops...',
                    text: 'Please Select Overtime earning to delete',
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'ok'
                    }).then((result) => {
                    if (result.value) {
                    } else if (result.dismiss === 'cancel') {
                    }
                });    
            }  


        }
        else if(type === 'Employee Termnination')
        {
            objDetails = {
                type: "TTerminationSimple",
                fields: {
                     ID: parseInt(earningid),
                     EmployeeTerminationPaymentsActive:false,
                   
                }
            };
            
            if(earningid != 0)
            {
                    taxRateService.saveExemptReportableTermnination(objDetails).then(function (objDetails) {
                    $('.fullScreenSpin').css('display','none');
                
                    swal({
                        title: 'Success',
                        text: 'Termnination Earning Removed Successfully',
                        type: 'success',
                        showCancelButton: false,
                        confirmButtonText: 'Done'

                        }).then((result) => {
                        if (result.value) {
                            sideBarService.getExemptReportableTermnination(initialBaseDataLoad, 0).then(function (dataReload) {
                                addVS1Data("TTerminationSimple", JSON.stringify(dataReload)).then(function (datareturn) {
                                    $('#addemployeterm').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                   
                                    window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                }).catch(function (err) {
                                    $('#addemployeterm').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                                });
                              }).catch(function (err) {
                                $('#addemployeterm').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                              });

                         }else if (result.dismiss === 'cancel') {
                        
                         }
                         });


        
                        }).catch(function (err) {
                            $('.fullScreenSpin').css('display','none');
                            swal({
                            title: 'Oooops...',
                            text: err,
                            type: 'error',
                            showCancelButton: false,
                            confirmButtonText: 'Ok'
                            }).then((result) => {
                            if (result.value) {
                        
                            } else if (result.dismiss === 'cancel') {
                    
                            }
                            });
                        
                        });

            }
            else{
                    $('.fullScreenSpin').css('display','none');
                    swal({
                    title: 'Oooops...',
                    text: 'Please Select Termination earning to delete',
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'ok'
                    }).then((result) => {
                    if (result.value) {
                    } else if (result.dismiss === 'cancel') {
                    }
                });    
            }  

        }
        else if(type === 'Bonuese Commission')
        {
            objDetails = {
                type: "Tearningsbonusescommissions",
                fields: {
                    ID: parseInt(earningid),
                    EarningBonusesCommisionsActive:false     
                }
            };

            taxRateService.saveSuperannuationBonusesCommissions(objDetails).then(function (objDetails) {
                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'Bonuses Commission Removed Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'
            
                }).then((result) => {
                    if (result.value) {
                        sideBarService.getsuperannuationBonusesCommissions(initialBaseDataLoad, 0).then(function (dataReload) {
                            addVS1Data("Tearningsbonusescommissions", JSON.stringify(dataReload)).then(function (datareturn) {
                                $('#bonusescloseid').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');  
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                            }).catch(function (err) {
                                $('#bonusescloseid').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                            });
                          }).catch(function (err) {
                            $('#bonusescloseid').trigger('click');
                            $('.fullScreenSpin').css('display','inline-block');
                            window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                          });
                    }else if (result.dismiss === 'cancel') {
                
                    }
                });
            
            }).catch(function (err) {
            $('.fullScreenSpin').css('display','none');
            swal({
            title: 'Oooops...',
            text: err,
            type: 'error',
            showCancelButton: false,
            confirmButtonText: 'Try Again'
            }).then((result) => {
            if (result.value) {
            } else if (result.dismiss === 'cancel') {
            
            }
            });
            
            });


        }
        else if(type === 'Lump Sum E Earning')
        {
            objDetails = {
                type: "Tlumpsume",
                fields: {
                     ID: parseInt(earningid),
                     LumpSumEActive:false        
                }
            };

            taxRateService.saveExemptReportableLumpSumE(objDetails).then(function (objDetails) {
                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'Lump Sum E Earnings Removed Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'
            
                }).then((result) => {
                    if (result.value) {
                        sideBarService.getExemptReportableLumpSumE(initialBaseDataLoad, 0).then(function (dataReload) {
                            addVS1Data("Tlumpsume", JSON.stringify(dataReload)).then(function (datareturn) {
                                
                                $('#addlumpsumlabelid').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                            }).catch(function (err) {
            
                                $('#addlumpsumlabelid').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                            });
                          }).catch(function (err) {
            
                                $('#addlumpsumlabelid').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                          });
                    }else if (result.dismiss === 'cancel') {
                
                    }
                });             
               }).catch(function(err){
                    $('.fullScreenSpin').css('display','none');
                    swal({
                    title: 'Oooops...',
                    text: err,
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'Try Again'
                    }).then((result) => {
                    if (result.value) {
                     
                    }else if (result.dismiss === 'cancel') {
            
                    }
                    });
            
            });
            

        }
        else if(type === 'Lump Sumw')
        {
            objDetails = {
                type: "TLumpSumW",
                fields: {
                    ID: parseInt(earningid),
                    LumpSumWActive:false     
                }
            };
            
            taxRateService.saveLumpSumW(objDetails).then(function (objDetails) {
                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'Lump Sum W Removed Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'
            
                 }).then((result) => {
                    if (result.value) {
                        sideBarService.getLumpSumW(initialBaseDataLoad, 0).then(function (dataReload) {
                            addVS1Data("TLumpSumW", JSON.stringify(dataReload)).then(function (datareturn) {
                               
                                $('#lumpSumWLabelclose').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                            }).catch(function (err) {
                                $('#lumpSumWLabelclose').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                            });
                          }).catch(function (err) {
                            $('#lumpSumWLabelclose').trigger('click');
                            $('.fullScreenSpin').css('display','inline-block');
                            window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                          });
                    }else if (result.dismiss === 'cancel') {
                
                    }
                });  
                
            });

        }
        else
        {
            objDetails = {
                type: "Tdirectorsfees",
                fields: {
                    ID: parseInt(oldid),
                    DirectorsFeesActive:false     
                }
            };
            
            taxRateService.saveDirectorFee(objDetails).then(function (objDetails) {
                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'Director fee earning removed Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'
            
                 }).then((result) => {
                    if (result.value) {
                        sideBarService.getDirectorFee(initialBaseDataLoad, 0).then(function (dataReload) {
                            addVS1Data("Tdirectorsfees", JSON.stringify(dataReload)).then(function (datareturn) {
                                $('#closedirect').trigger('click');
                                $('.fullScreenSpin').css('display','inline-block');
                                window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                            }).catch(function (err) {
                                $('#closedirect').trigger('click');
                                 $('.fullScreenSpin').css('display','inline-block');
                                 window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                            });
                          }).catch(function (err) {
                            $('#closedirect').trigger('click');
                            $('.fullScreenSpin').css('display','inline-block');
                            window.open('/payrollrules?active_key=payitem&itemtype=earning','_self');
                          });
                    }else if (result.dismiss === 'cancel') {
                
                    }
                });
                         
            }).catch(function (err) {
                $('.fullScreenSpin').css('display','none');
                swal({
                title: 'Oooops...',
                text: err,
                type: 'error',
                showCancelButton: false,
                confirmButtonText: 'Try Again'
                }).then((result) => {
                if (result.value) {
                } else if (result.dismiss === 'cancel') {
                }
                });
              });


        }
     
    

    },
      
    'click .btnDeleteSuperannuation': function () {
        let taxRateService = new TaxRateService();
        let superannutionid = $('#selectSuperannuationDeleteLineID').val()||0;
        let superannutionname = $('#selectSuperannuationName').val()||0;
        
        $('.fullScreenSpin').css('display','inline-block');
        let objDetails = {
            type: "TSuperannuation",
            fields: {
                Id: parseInt(superannutionname),
                Allclasses: false,          
            }
        };
        if(superannutionname != 0)
         {
                         taxRateService.saveSuperannuation(objDetails).then(function (objDetails) {
                          $('.fullScreenSpin').css('display','none');
                       
                          swal({
                            title: 'Success',
                            text: 'Superannuation Removed Successfully',
                            type: 'success',
                            showCancelButton: false,
                            confirmButtonText: 'Done'
        
                            }).then((result) => {
                            if (result.value) {
                                sideBarService.getSuperannuation(initialBaseDataLoad, 0).then(function (dataReload) {
                                    addVS1Data("TSuperannuation", JSON.stringify(dataReload)).then(function (datareturn) {
                                        $('#delsup').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        
                                        window.open('/payrollrules?active_key=super','_self');
                                    }).catch(function (err) {
                                        $('#delsup').trigger('click');
                                        $('.fullScreenSpin').css('display','inline-block');
                                        window.open('/payrollrules?active_key=super','_self');
                                    });
                                  }).catch(function (err) {
                                    $('#delsup').trigger('click');
                                    $('.fullScreenSpin').css('display','inline-block');
                                    window.open('/payrollrules?active_key=super','_self');
                                  });


                            }else if (result.dismiss === 'cancel') {
                            
                            }
                            });


              
                   }).catch(function (err) {
                    $('.fullScreenSpin').css('display','none');
                    swal({
                    title: 'Oooops...',
                    text: err,
                    type: 'error',
                    showCancelButton: false,
                    confirmButtonText: 'Ok'
                    }).then((result) => {
                    if (result.value) {
                   
                    } else if (result.dismiss === 'cancel') {
            
                    }
                    });
                   
                   });

        }
        else{
                $('.fullScreenSpin').css('display','none');
                swal({
                title: 'Oooops...',
                text: 'Please Select Superannuation to delete',
                type: 'error',
                showCancelButton: false,
                confirmButtonText: 'ok'
                }).then((result) => {
                if (result.value) {
                } else if (result.dismiss === 'cancel') {
                }
               });    
        }   
  
    },

    'click .btnDeleteReimsument': function () {
        let taxRateService = new TaxRateService();
        let reid = $('#selectColReiDeleteLineID').val()||0;
        let ReiName = $('#seleclReiName').val()||0;
        $('.fullScreenSpin').css('display','inline-block');
     
        let objDetails = {
            type: "TReimbursement",
            fields: {
                Id: ReiName,
                ReimbursementActive: false,          
            }
        };
  
        if(ReiName != 0)
        {
               taxRateService.saveReimbursement(objDetails).then(function (objDetails) {
                $('.fullScreenSpin').css('display','none');
                swal({
                    title: 'Success',
                    text: 'Reimbursement Removed Successfully',
                    type: 'success',
                    showCancelButton: false,
                    confirmButtonText: 'Done'
    
                }).then((result) => {
                if (result.value) {
                    sideBarService.getReimbursement(initialBaseDataLoad, 0).then(function (dataReload) {
                        addVS1Data("TReimbursement", JSON.stringify(dataReload)).then(function (datareturn) {
                            $('#delres').trigger('click');
                            $('.fullScreenSpin').css('display','inline-block');
                            window.open('/payrollrules?active_key=payitem&itemtype=resimu','_self');
                        }).catch(function (err) {
                            $('#delres').trigger('click');
                            $('.fullScreenSpin').css('display','inline-block');
                            window.open('/payrollrules?active_key=payitem&itemtype=resimu','_self');
                        });
                      }).catch(function (err) {
                        $('#delres').trigger('click');
                        $('.fullScreenSpin').css('display','inline-block');
                          window.open('/payrollrules?active_key=payitem&itemtype=resimu','_self');
                      });
                }else if (result.dismiss === 'cancel') {
                
                }
                });
               
              }).catch(function (err) {
                $('.fullScreenSpin').css('display','none');
                swal({
                title: 'Oooops...',
                text: err,
                type: 'error',
                showCancelButton: false,
                confirmButtonText: 'Try Again'
                }).then((result) => {
                if (result.value) {
                
                } else if (result.dismiss === 'cancel') {
        
                }
                });
                
              });

        }
        else{
           
            swal({
                title: 'Oooops...',
                text: 'Please Select Reimbursement to delete',
                type: 'error',
                showCancelButton: false,
                confirmButtonText: 'ok'
                }).then((result) => {
                if (result.value) {
                } else if (result.dismiss === 'cancel') {
                }
            });    
        }
  
       
  
    },

    'click .btnDeleteDeduction': function () {

        let taxRateService = new TaxRateService();
        let deductionID = $('#selectDeleteLineID').val()||0;
        let deductionAccountID = $('#selectAccountid').val()||0;
        let deductionAccount = $('#selectAccountname').val()||0;
        let isIsWorkPlacegiving = $('#selectIsWorkPlacegiving').val()||0;
        let isTaxexempt = $('#selectisTaxexempt').val()||0;
        let isUnionfees = $('#selectisUnionfees').val()||0;
        let deductionAmount = $('#selectdeductionAmount').val()||0;
        let deductionName = $('#selectideductionName').val()||0;
        let displayName = $('#selectdisplayName').val()||0;

    

        $('.fullScreenSpin').css('display','inline-block');
  
        let objDetails = {
            type: "TDeduction",
            fields: {
                Id: parseInt(deductionID),
                Active: false,                
                Amount:Number(deductionAmount.replace(/[^0-9.-]+/g, "")) || 0,
                Basedonid:1,
                Description: deductionName,
                DisplayIn: displayName,        
  
            }
        };

  
        taxRateService.saveDeduction(objDetails).then(function (objDetails) {
          $('.fullScreenSpin').css('display','none');
            swal({
            title: 'Success',
            text: 'Deduction removed Successfully',
            type: 'success',
            showCancelButton: false,
            confirmButtonText: 'Done'

            }).then((result) => {
                if (result.value) {
                    sideBarService.getDeduction(initialBaseDataLoad, 0).then(function (dataReload) {
                        addVS1Data("TDeduction", JSON.stringify(dataReload)).then(function (datareturn) {
                            $('#deldeu').trigger('click');
                            $('.fullScreenSpin').css('display','inline-block');
                            window.open('/payrollrules?active_key=payitem&itemtype=deduction','_self');
                        }).catch(function (err) {
                            $('#deldeu').trigger('click');
                            $('.fullScreenSpin').css('display','inline-block');
                            window.open('/payrollrules?active_key=payitem&itemtype=deduction','_self');
                        });
                      }).catch(function (err) {
                        $('#deldeu').trigger('click');
                        $('.fullScreenSpin').css('display','inline-block');
                        window.open('/payrollrules?active_key=payitem&itemtype=deduction','_self');
                      });
                }else if (result.dismiss === 'cancel') {
            
                }
            });
         
         }).catch(function (err) {

            $('.fullScreenSpin').css('display','none');
            swal({
            title: 'Oooops...',
            text: err,
            type: 'error',
            showCancelButton: false,
            confirmButtonText: 'Try Again'
            }).then((result) => {
            if (result.value) {
            
            }else if (result.dismiss === 'cancel') {
    
            }
            });
            
         });
  
    },


    'click .btnAddNewDeduction': function(event) {
        $('.btnAddNewDeduction').attr("data-toggle", "modal");
        $('.btnAddNewDeduction').attr("data-target", "#deductionModal");
        $('#edtDeductionID').val('');
        $('#edtDeductionName').val('');
        $('#edtDeductionAmount').val('');
        $('#edtDeductionAccount').val('');
        $('#edtDeductionAccountID').val('');  
        $('#formCheck-ReducesPAYGDeduction').removeAttr('checked');
        $('#formCheck-ReducesSuperannuationDeduction').removeAttr('checked');
        $('#formCheck-ExcludedDeduction').removeAttr('checked');
        $('#noneLabel').html('None');
        $('#edtDeductionTitle').val('none'); 
    },
    'click .noneModal': function(event) {
        $('.noneModal').attr("data-toggle", "modal");
        $('.noneModal').attr("data-target", "#deductionModal");
        $('#edtDeductionID').val('');
        $('#edtDeductionName').val('');
        $('#edtDeductionAmount').val('');
        $('#edtDeductionAccount').val('');
        $('#edtDeductionAccountID').val('');  
        $('#formCheck-ReducesPAYGDeduction').removeAttr('checked');
        $('#formCheck-ReducesSuperannuationDeduction').removeAttr('checked');
        $('#formCheck-ExcludedDeduction').removeAttr('checked');
        $('#noneLabel').html("None");
        $('#edtDeductionTitle').val("None");
     },
    'click .workplaceGivingModal': function(event) {
        $('.workplaceGivingModal').attr("data-toggle", "modal");
        $('.workplaceGivingModal').attr("data-target", "#deductionModal");
        $('#edtDeductionID').val('');
        $('#edtDeductionName').val('');
        $('#edtDeductionAmount').val('');
        $('#edtDeductionAccount').val('');
        $('#edtDeductionAccountID').val('');  
        $('#formCheck-ReducesPAYGDeduction').removeAttr('checked');
        $('#formCheck-ReducesSuperannuationDeduction').removeAttr('checked');
        $('#formCheck-ExcludedDeduction').removeAttr('checked');
        $('#noneLabel').html("None");  
        $('#noneLabel').html("Workplace Giving");
        $('#edtDeductionTitle').val("WorkplaceGiving");
     },
    'click .unionAssociationFeesModal': function(event) {
        $('.unionAssociationFeesModal').attr("data-toggle", "modal");
        $('.unionAssociationFeesModal').attr("data-target", "#deductionModal");
        $('#edtDeductionID').val('');
        $('#edtDeductionName').val('');
        $('#edtDeductionAmount').val('');
        $('#edtDeductionAccount').val('');
        $('#edtDeductionAccountID').val('');  
        $('#formCheck-ReducesPAYGDeduction').removeAttr('checked');
        $('#formCheck-ReducesSuperannuationDeduction').removeAttr('checked');
        $('#formCheck-ExcludedDeduction').removeAttr('checked');
        $('#noneLabel').html("None"); 
        $('#noneLabel').html("Union / Association Fees");
        $('#edtDeductionTitle').val("UnionAssociationFees");
     },

    'click .addpaidleave':function(event){
        $('#paidLeaveLabel').text('Add Paid leave');
        $('#edtLeaveName').val('');
        $('#paidleaveid').val(0);
        $('#edtTypeOfUnits').val('');
        $('#edtLeaveLoadingRate').val('');
        $('#edtNormalEntitlement').val('');
        $('#formCheck-ShowBalance').removeAttr('checked');
    },

    'click .addunpaidleave':function(event){


        $('#paidLeaveLabel').text('Add Un Paid leave');
        $('#edtUnpaidLeaveName').val('');
        $('#edtUnpaidTypeOfUnits').val('');
        $('#edtUnpaidLeaveLoadingRate').val('');
        $('#edtUnpaidNormalEntitlement').val('');
        $('#formCheck-UnpaidShowBalance').removeAttr('checked');
        $('#unpaidleaveid').val(0);


       

    },

    'click .btnAddNewPaidLeave':function(event){
       
        $('#paidLeaveLabel').text('Add Paid leave');
        $('#edtLeaveName').val('');
        $('#paidleaveid').val(0);
        $('#edtTypeOfUnits').val('');
        $('#edtLeaveLoadingRate').val('');
        $('#edtNormalEntitlement').val('');
        $('#formCheck-ShowBalance').removeAttr('checked');

    },

    'click .btnAddNewReimbursements':function(event){
             
          $('#newReimbursementLabel').text('Add New Reimbursement');
          $('#edtReimbursementName').val('');
          $('#edtReimbursementAccount').val('');
          $('#res_id').val(0);

    },
    'click .btnAddNewSuperannuation':function(event){
          
         $('#newSuperannuationFundLabel').text('Add New Superannuation');
         $('#newSuperannuationFundId').val(0);
         $('#edtFundType').val('');
         $('#edtFundName').val('');
         $('#edtabn').val('');
         $('#edtelectronicsalias').val('');
         $('#edtEmployerNumber').val('');
         $('#edtbsb').val();
         $('#edtaccountnumber').val();
         $('#edtaccountname').val('');


    },
    'click .btnAddordinaryTimeEarnings':function(event){
    
        $('#ordinaryTimeEarningsLabel').text('Add New Ordinary Time Earnings');
        $('#ordinaryTimeEarningsid').val(0);
        $('#edtEarningsName').val('');
        $('#edtDisplayName').val('');
        $('#edtRateType').val('');
        $('#edtExpenseAccount').val('');
        $('#formCheck-ShowBalance').removeAttr('checked');
        $('#formCheck-ExemptSuperannuation').removeAttr('checked');
        $('#formCheck-ExemptReportable').removeAttr('checked');

    },
    'click .btnAddoverTimeEarnings':function(event){
    
        $('#overtimeEarningsLabel').text('Add New Over Time Earnings');
            $('#edtEarningsNameOvertimeid').val(0);
            $('#edtEarningsNameOvertime').val('');
            $('#edtDisplayNameOvertime').val('');
            $('#edtRateTypeOvertime').val('');
            $('#edtExpenseAccountOvertime').val('');
            $('#formCheck-ExemptPAYGOvertime').removeAttr('checked');
            $('#formCheck-ExemptSuperannuationOvertime').removeAttr('checked');
            $('#formCheck-ExemptReportableOvertime').removeAttr('checked');
    },

    'click .btnAddemploymentTermnination':function(event){
    
            $('#employmentTermninationPaymentsLabel').text('Add New Employment Termnination');
            $('#edtemploymentTermninationid').val(0);
            $('#edtEarningsNameTermnination').val('');
            $('#edtDisplayNameTermnination').val('');
            $('#edtRateTypeTermnination').val('');
            $('#edtExpenseAccountTermnination').val('');
            $('#formCheck-ExemptPAYGTermnination').removeAttr('checked');
            $('#formCheck-ExemptSuperannuationTermnination').removeAttr('checked');
            $('#formCheck-ExemptReportableTermnination').removeAttr('checked');
            

    },
    'click .btnAddolumpSumE':function(event){
    
        $('#lumpSumELabel').text('Add New Lump Sum E');
        $('#edtLumpSumid').val(0);
        $('#edtEarningsNameLumpSumE').val('');
        $('#edtDisplayNameLumpSumE').val('');
        $('#edtRateTypeLumpSumE').val('');
        $('#edtExpenseAccountLumpSumE').val('');
        $('#formCheck-ExemptPAYGLumpSumE').removeAttr('checked');
        $('#formCheck-ExemptSuperannuationLumpSumE').removeAttr('checked');
        $('#formCheck-ExemptReportableLumpSumE').removeAttr('checked');
        

    },

    'click .btnAddbonusesCommissions':function(event){
  
            $('#bonusesCommissionsLabel').text('Add New Bonuses & Commissions');
            $('#edtEarningsNameBonusesCommissionid').val(0);
            $('#edtEarningsNameBonusesCommissions').val('');
            $('#edtDisplayNameBonusesCommissions').val('');
            $('#edtRateTypeBonusesCommissions').val('');
            $('#edtExpenseAccountBonusesCommissions').val('');
            $('#formCheck-ExemptPAYGBonusesCommissions').removeAttr('checked');
            $('#formCheck-ExemptSuperannuationBonusesCommissions').removeAttr('checked');
            $('#formCheck-ExemptReportableBonusesCommissions').removeAttr('checked');       
    },

    'click .btnAddlumpSumW':function(event){
    
            $('#lumpSumWLabel').text('Add New Lump Sum W');
            $('#edtEarningsNameLumpSumWid').val(0);
            $('#edtEarningsNameLumpSumW').val('');
            $('#edtDisplayNameLumpSumW').val('');
            $('#edtRateTypeLumpSumW').val('');
            $('#edtExpenseAccountLumpSumW').val('');
            $('#formCheck-ExemptPAYGLumpSumW').removeAttr('checked');
            $('#formCheck-ExemptSuperannuationLumpSumW').removeAttr('checked');
            $('#formCheck-ExemptReportableLumpSumW').removeAttr('checked');
    },
    'click .btnAdddirectorsFees':function(event){
    
        $('#directorsFeesLabel').text('Add New Directors Fees');
        $('#edtEarningsDirectorsFeesid').val(0);
        $('#edtEarningsNameDirectorsFees').val('');
        $('#edtDisplayNameDirectorsFees').val('');
        $('#edtRateTypeDirectorsFees').val('');
        $('#edtExpenseAccountDirectorsFees').val('');
        $('#formCheck-ExemptPAYGDirectorsFees').removeAttr('checked');
        $('#formCheck-ExemptSuperannuationDirectorsFees').removeAttr('checked');
        $('#formCheck-ExemptReportableDirectorsFees').removeAttr('checked');
        

    },
    'click #uploadImg':function (event) {
        //let imageData= (localStorage.getItem("Image"));
        let templateObject = Template.instance();
        let imageData=templateObject.imageFileData.get();
        if(imageData!=null && imageData!="")
        {   
            console.log(imageData);
            localStorage.setItem("Image",imageData);
            $('#uploadedImage').attr('src', imageData);
            //$('#uploadedImage').attr('width','100%');
            $('#removeLogo').show();
            $('#changeLogo').show();
        }

    },

    'change #fileInput' :function (event) {
        let templateObject = Template.instance();
        let selectedFile = event.target.files[0];
        let reader = new FileReader();
        $(".Choose_file").text('');
        reader.onload = function(event) {

            $( "#uploadImg" ).prop( "disabled", false );
            $("#uploadImg").addClass("on-upload-logo");
            $(".Choose_file").text(selectedFile.name);
            //$("#uploadImg").css("background-color","yellow");
            templateObject.imageFileData.set(event.target.result);

            //localStorage.setItem("Image",event.target.result);
        };
        reader.readAsDataURL(selectedFile);
    },
    'click #removeLogo':function (event) {
        let templateObject = Template.instance();
        templateObject.imageFileData.set(null);
        localStorage.removeItem("Image");
        // location.reload();
        Meteor._reload.reload();
        
    },
    'click .btnBack':function(event){
      event.preventDefault();
      history.back(1);
     
    },

    'keyup #tblPayCalendars_filter input': function (event) {
        if($(event.target).val() != ''){
          $(".btnRefreshCalender").addClass('btnSearchAlert');
        }else{
          $(".btnRefreshCalender").removeClass('btnSearchAlert');
        }
        if (event.keyCode == 13) {
           $(".btnRefreshCalender").trigger("click");
        }
    },
    'click .btnRefreshCalender':function(event){
      
        let templateObject = Template.instance();
        let utilityService = new UtilityService();
        let tableProductList;
        const dataTableList = [];
        var splashArrayInvoiceList = new Array();
        const lineExtaSellItems = [];
        $('.fullScreenSpin').css('display', 'inline-block');
        let dataSearchName = $('#tblPayCalendars_filter input').val();
        if (dataSearchName.replace(/\s/g, '') != '') {
            sideBarService.getNewCalenderByNameOrPayPeriod(dataSearchName).then(function (data) {
                $(".btnRefreshCalender").removeClass('btnSearchAlert');
                let lineItems = [];
                let lineItemObj = {};
                if (data.tpayrollcalendars.length > 0) {
                    for (let i = 0; i < data.tpayrollcalendars.length; i++) {
                    
                        var dataTableList = {
                            id:data.tpayrollcalendars[i].fields.ID || '',
                            name:data.tpayrollcalendars[i].fields.PayrollCalendarName || '',
                            period:data.tpayrollcalendars[i].fields.PayrollCalendarPayPeriod || '',
                            startdate: moment(data.tpayrollcalendars[i].fields.PayrollCalendarStartDate).format('DD/MM/YYYY') || '',
                            enddate:moment(data.tpayrollcalendars[i].fields.PayrollCalendarFirstPaymentDate).format('DD/MM/YYYY') || '',       
                            deletedata:'<td contenteditable="false" class="colDeleteCalenders"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                        };
      
                        splashArrayInvoiceList.push(dataTableList);
                    }
                    templateObject.datatablerecords.set(splashArrayInvoiceList);
    
                    let item = templateObject.datatablerecords.get();
                    $('.fullScreenSpin').css('display', 'none');
                    if (splashArrayInvoiceList) {
                        var datatable = $('#tblPayCalendars').DataTable();
                        $("#tblPayCalendars > tbody").empty();
                        for (let x = 0; x < item.length; x++) {
                            $("#tblPayCalendars > tbody").append(
                                '<tr class="dnd-moved" id="' + item[x].id + '" style="cursor: pointer;">' +
                                '<td contenteditable="false" class="colCalenderID hiddenColumn">' + item[x].id + '</td>' +
                                '<td contenteditable="false" class="colPayCalendarName" ><span style="">' + item[x].name + '</span></td>' +
                                '<td contenteditable="false" class=" colPayPeriod">' + item[x].period + '</td>' +
                                '<td contenteditable="false" class="colNextPayPeriod" >' + item[x].startdate + '</td>' +
                                '<td contenteditable="false" class="colNextPaymentDate">' + item[x].enddate + '</td>' +
                                item[x].deletedata +
                                '</tr>');
    
                        }
                        $('.dataTables_info').html('Showing 1 to ' + data.tpayrollcalendars.length + ' of ' + data.tpayrollcalendars.length + ' entries');
    
                    }
    
                } else {
                    $('.fullScreenSpin').css('display', 'none');
    
                    swal({
                        title: 'Question',
                        text: "Pay Calender does not exist, would you like to create it?",
                        type: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No'
                    }).then((result) => {
                        if (result.value) {
                            FlowRouter.go('/payrollrules');
                        } else if (result.dismiss === 'cancel') {
                            //$('#productListModal').modal('toggle');
                        }
                    });
                }
            }).catch(function (err) {
                $('.fullScreenSpin').css('display', 'none');
            });
        } else {
    
          $(".btnRefresh").trigger("click");
        }

    },

   'keyup #tblHolidays_filter input': function (event) {
    if($(event.target).val() != ''){
      $(".btnRefreshHoliday").addClass('btnSearchAlert');
    }else{
      $(".btnRefreshHoliday").removeClass('btnSearchAlert');
    }
    if (event.keyCode == 13) {
       $(".btnRefreshHoliday").trigger("click");
    }
    },
   'click .btnRefreshHoliday':function(event){
     
    let templateObject = Template.instance();
    let utilityService = new UtilityService();
    let tableProductList;
    const dataTableList = [];
    var splashArrayInvoiceList = new Array();
    const lineExtaSellItems = [];
    $('.fullScreenSpin').css('display', 'inline-block');
    let dataSearchName = $('#tblHolidays_filter input').val();
    if (dataSearchName.replace(/\s/g, '') != '') {
        sideBarService.getNewHolidayByName(dataSearchName).then(function (data) {
            $(".btnRefreshHoliday").removeClass('btnSearchAlert');
            let lineItems = [];
            let lineItemObj = {};
            if (data.Tpayrollholidays.length > 0) {
                for (let i = 0; i < data.Tpayrollholidays.length; i++) {
                
                    var dataTableList = {
                        id:data.Tpayrollholidays[i].fields.ID || '',
                        name:data.Tpayrollholidays[i].fields.PayrollHolidaysName || '',
                        group:data.Tpayrollholidays[i].fields.PayrollHolidaysGroupName  || '',
                        date: moment(data.Tpayrollholidays[i].fields.PayrollHolidaysDate).format('DD/MM/YYYY') || '',
                        deletedata:'<td contenteditable="false" class="colHolidayDelete"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                    };
  
                    splashArrayInvoiceList.push(dataTableList);
                }
                templateObject.datatablerecords.set(splashArrayInvoiceList);

                let item = templateObject.datatablerecords.get();
                $('.fullScreenSpin').css('display', 'none');
                if (splashArrayInvoiceList) {
                    var datatable = $('#tblHolidays').DataTable();
                    $("#tblHolidays > tbody").empty();
                    for (let x = 0; x < item.length; x++) {
                        $("#tblHolidays > tbody").append(
                            '<tr class="dnd-moved" id="' + item[x].id + '" style="cursor: pointer;">' +
                            '<td contenteditable="false" class="colHolidayID hiddenColumn">' + item[x].id + '</td>' +
                            '<td contenteditable="false" class="colHolidayName" ><span >' + item[x].name + '</span></td>' +
                            '<td contenteditable="false" class="colHolidayDate">' + item[x].date + '</td>' +
                            '<td contenteditable="false" class="colHolidaygroup hiddenColumn" >' + item[x].group + '</td>' +
                           
                            item[x].deletedata +
                            '</tr>');

                    }
                    $('.dataTables_info').html('Showing 1 to ' + data.Tpayrollholidays.length + ' of ' + data.Tpayrollholidays.length + ' entries');

                }

            } else {
                $('.fullScreenSpin').css('display', 'none');

                swal({
                    title: 'Question',
                    text: "Holiday does not exist, would you like to create it?",
                    type: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No'
                }).then((result) => {
                    if (result.value) {
                        FlowRouter.go('/payrollrules');
                    } else if (result.dismiss === 'cancel') {
                        //$('#productListModal').modal('toggle');
                    }
                });
            }
        }).catch(function (err) {
            $('.fullScreenSpin').css('display', 'none');
        });
    } else {

      $(".btnRefresh").trigger("click");
    }

    },
    
   'keyup #tblSuperannuation_filter input': function (event) {
    if($(event.target).val() != ''){
      $(".btnRefreshSuperannuation").addClass('btnSearchAlert');
    }else{
      $(".btnRefreshSuperannuation").removeClass('btnSearchAlert');
    }
    if (event.keyCode == 13) {
         $(".btnRefreshSuperannuation").trigger("click");
        }
     },

   'click .btnRefreshSuperannuation':function(event){

    let templateObject = Template.instance();
    let utilityService = new UtilityService();
    let tableProductList;
    const dataTableList = [];
    var splashArrayInvoiceList = new Array();
    const lineExtaSellItems = [];
    $('.fullScreenSpin').css('display', 'inline-block');
    let dataSearchName = $('#tblSuperannuation_filter input').val();
    if (dataSearchName.replace(/\s/g, '') != '') {
        sideBarService.getSuperannuationByName(dataSearchName).then(function (data) {
            console.log(data);
            $(".btnRefreshSuperannuation").removeClass('btnSearchAlert');
            let lineItems = [];
            let lineItemObj = {};
            if (data.tsuperannuation.length > 0) {
                for (let i = 0; i < data.tsuperannuation.length; i++) {
                
                    var dataTableList = {
                        id:data.tsuperannuation[i].fields.ID || '',
                        name:data.tsuperannuation[i].fields.Superfund || '',
                        type:data.tsuperannuation[i].fields.Supertypeid || '',
                        employenum: data.tsuperannuation[i].fields.Employeeid || '',
                        abn:"Key Missing",
                        service:"Key Missing",
                        bsb:"Key Missing",
                        accountnumber:data.tsuperannuation[i].fields.Accountno || '',
                        accountname:"Key Missing",
                        deletedata:'<td contenteditable="false" class="colDeletesup"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                    };
    
                    splashArrayInvoiceList.push(dataTableList);
                }
                templateObject.datatablerecords.set(splashArrayInvoiceList);
    
                let item = templateObject.datatablerecords.get();
                $('.fullScreenSpin').css('display', 'none');
                if (splashArrayInvoiceList) {
                    var datatable = $('#tblSuperannuation').DataTable();
                    $("#tblSuperannuation > tbody").empty();
                    for (let x = 0; x < item.length; x++) {
                        $("#tblSuperannuation > tbody").append(
                            '<tr class="dnd-moved" id="' + item[x].id + '" style="cursor: pointer;">' +
                            '<td contenteditable="false" class="colSuperannuationID hiddenColumn">' + item[x].id + '</td>' +
                            '<td contenteditable="false" class="colSuperannuationName" ><span >' + item[x].name + '</span></td>' +
                            '<td contenteditable="false" class="colSuperannuationType">' + item[x].type + '</td>' +
                            '<td contenteditable="false" class="colEmployerNum" >' + item[x].employenum + '</td>' +
                            '<td contenteditable="false" class="colabn" ><span >' + item[x].abn + '</span></td>' +
                            '<td contenteditable="false" class="colservicealias">' + item[x].service + '</td>' +
                            '<td contenteditable="false" class="colbsb" >' + item[x].bsb + '</td>' +
                            '<td contenteditable="false" class="colaccountnumber" ><span >' + item[x].accountnumber + '</span></td>' +
                            '<td contenteditable="false" class="colaccountname">' + item[x].accountname + '</td>' +                
                            item[x].deletedata +
                            '</tr>');
    
                    }
                    $('.dataTables_info').html('Showing 1 to ' + data.tsuperannuation.length + ' of ' + data.tsuperannuation.length + ' entries');
    
                }
    
            } else {
                $('.fullScreenSpin').css('display', 'none');
    
                swal({
                    title: 'Question',
                    text: "Supperannuation does not exist, would you like to create it?",
                    type: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No'
                }).then((result) => {
                    if (result.value) {
                        FlowRouter.go('/payrollrules');
                    } else if (result.dismiss === 'cancel') {
                        //$('#productListModal').modal('toggle');
                    }
                });
            }
        }).catch(function (err) {
            $('.fullScreenSpin').css('display', 'none');
        });
    } else {
         $('.fullScreenSpin').css('display', 'none');
         $(".btnRefresh").trigger("click");
      }

    },

   'keyup #tblAlowances_filter input': function (event) {
        if($(event.target).val() != ''){
          $(".btnRefreshAllowance").addClass('btnSearchAlert');
        }else{
          $(".btnRefreshAllowance").removeClass('btnSearchAlert');
        }
        if (event.keyCode == 13) {
           $(".btnRefreshAllowance").trigger("click");
            }
    },
   'click .btnRefreshAllowance':function(event){
    let templateObject = Template.instance();
    let utilityService = new UtilityService();
    let tableProductList;
    const dataTableList = [];
    var splashArrayInvoiceList = new Array();
    const lineExtaSellItems = [];
    $('.fullScreenSpin').css('display', 'inline-block');
    let dataSearchName = $('#tblAlowances_filter input').val();
    if (dataSearchName.replace(/\s/g, '') != '') {
        sideBarService.getAllowanceByName(dataSearchName).then(function (data) {
            $(".btnRefreshAllowance").removeClass('btnSearchAlert');
            let lineItems = [];
            let lineItemObj = {};
            if (data.tallowance.length > 0) {
                for (let i = 0; i < data.tallowance.length; i++) {
                    let allowanceAmount = utilityService.modifynegativeCurrencyFormat(data.tallowance[i].fields.Amount) || 0.00;
                    var dataTableList = {
                        id:data.tallowance[i].fields.ID || 0,
                        description:data.tallowance[i].fields.Description || '-',
                        type:tallowance[i].fields.AllowanceType || '',
                        displayname:data.tallowance[i].fields.DisplayIn || '',
                        amount:allowanceAmount || 0.00,
                        accountname:data.tallowance[i].fields.Accountname || '',
                        accountid:data.tallowance[i].fields.Accountid || 0,
                        axempt:data.tallowance[i].fields.Payrolltaxexempt || false,
                        superince:data.tallowance[i].fields.Superinc || false,
                        workcover:data.tallowance[i].fields.Workcoverexempt || false,
                        deletedata:'<td contenteditable="false" class="colDeleteAllowances"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                    };
    
                    splashArrayInvoiceList.push(dataTableList);
                }
                templateObject.datatablerecords.set(splashArrayInvoiceList);
    
                let item = templateObject.datatablerecords.get();
                $('.fullScreenSpin').css('display', 'none');
                if (splashArrayInvoiceList) {
                    var datatable = $('#tblAlowances').DataTable();
                    $("#tblAlowances > tbody").empty();
                    for (let x = 0; x < item.length; x++) {
                        $("#tblAlowances > tbody").append(
                           
                            '<tr class="dnd-moved" id="' + item[x].id + '" style="cursor: pointer;">' +
                            '<td contenteditable="false" class="colAlowancesID hiddenColumn">' + item[x].id + '</td>' +
                            '<td contenteditable="false" class="colAllowancesNames" ><span >' + item[x].description + '</span></td>' +
                            '<td contenteditable="false" class="colAllowancesType">' + item[x].type + '</td>' +
                            '<td contenteditable="false" class="colAllowancesDisplayName" >' + item[x].displayname + '</td>' +
                            '<td contenteditable="false" class="colAllowancesAmount text-right" ><span >' + item[x].amount + '</span></td>' +
                            '<td contenteditable="false" class="colAllowancesAccounts">' + item[x].accountname + '</td>' +
                            '<td contenteditable="false" class="colAllowancesAccountsID hiddenColumn" >' + item[x].accountid + '</td>' +
                            '<td contenteditable="false" class="colAllowancesPAYG hiddenColumn" ><span >' + item[x].axempt + '</span></td>' +
                            '<td contenteditable="false" class="colAllowancesSuperannuation hiddenColumn">' + item[x].superince + '</td>' +
                            '<td contenteditable="false" class="colAllowancesReportableasW1 hiddenColumn" >' + item[x].workcover + '</td>' +
                            item[x].deletedata +
                            '</tr>');
    
                    }
                    $('.dataTables_info').html('Showing 1 to ' + data.tallowance.length + ' of ' + data.tallowance.length + ' entries');
    
                }
    
            } else {
                $('.fullScreenSpin').css('display', 'none');
    
                swal({
                    title: 'Question',
                    text: "Allowances does not exist, would you like to create it?",
                    type: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No'
                }).then((result) => {
                    if (result.value) {
                        FlowRouter.go('/payrollrules');
                    } else if (result.dismiss === 'cancel') {
                        //$('#productListModal').modal('toggle');
                    }
                });
            }
        }).catch(function (err) {
            $('.fullScreenSpin').css('display', 'none');
        });
    } else {
        $('.fullScreenSpin').css('display', 'none');
        $(".btnRefresh").trigger("click");
    }





    },
   'keyup #tblDeductions_filter input': function (event) {
            if($(event.target).val() != ''){
              $(".btnRefreshDeduction").addClass('btnSearchAlert');
            }else{
              $(".btnRefreshDeduction").removeClass('btnSearchAlert');
            }
            if (event.keyCode == 13) {
               $(".btnRefreshDeduction").trigger("click");
                }
    },
   
    'click .btnRefreshDeduction':function(event){
       
        let templateObject = Template.instance();
        let utilityService = new UtilityService();
        let tableProductList;
        const dataTableList = [];
        var splashArrayInvoiceList = new Array();
        const lineExtaSellItems = [];
        $('.fullScreenSpin').css('display', 'inline-block');
        let dataSearchName = $('#tblDeductions_filter input').val();
        
        if (dataSearchName.replace(/\s/g, '') != '') {
        sideBarService.getDeductionByName(dataSearchName).then(function (data) {
        $(".btnRefreshDeduction").removeClass('btnSearchAlert');
        let lineItems = [];
        let lineItemObj = {};
        if (data.tdeduction.length > 0) {
            for (let i = 0; i < data.tdeduction.length; i++) {

                let deductionAmount = utilityService.modifynegativeCurrencyFormat(data.tdeduction[i].fields.Amount) || 0.00;
                if(data.tdeduction[i].fields.Taxexempt == true){
                  deductionTypeVal = 'None';
                }else{
                  if(data.tdeduction[i].fields.IsWorkPlacegiving == true){
                    deductionTypeVal = 'Workplace Giving';
                  }
            
                  if(data.tdeduction[i].fields.Unionfees == true){
                    deductionTypeVal = 'Union / Association Fees';
                  }
                }
            
                var dataTableList = {
                    id:data.tdeduction[i].fields.ID || 0,
                    name:data.tdeduction[i].fields.Description || '-',
                    deductiontype:deductionTypeVal || 'None',
                    displayin:data.tdeduction[i].fields.Displayin || '',
                    amount:deductionAmount || 0.00,
                    accountname:data.tdeduction[i].fields.Accountname || '',
                    accountid:data.tdeduction[i].fields.Accountid || 0,
                    axempt:data.tdeduction[i].fields.Payrolltaxexempt || false,
                    superinc:data.tdeduction[i].fields.Superinc || false,
                    workcover:data.tdeduction[i].fields.Workcoverexempt || false,
                    deletedata:'<td contenteditable="false" class="colDeleteDeductions"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                };

                splashArrayInvoiceList.push(dataTableList);
            }
            templateObject.datatablerecords.set(splashArrayInvoiceList);

            let item = templateObject.datatablerecords.get();
            $('.fullScreenSpin').css('display', 'none');
            if (splashArrayInvoiceList) {
                var datatable = $('#tblDeductions').DataTable();
                $("#tblDeductions > tbody").empty();
                for (let x = 0; x < item.length; x++) {
                    $("#tblDeductions > tbody").append(
                        '<tr class="dnd-moved" id="' + item[x].id + '" style="cursor: pointer;">' +
                        '<td contenteditable="false" class="colDeductionsID hiddenColumn">' + item[x].id + '</td>' +
                        '<td contenteditable="false" class="colDeductionsNames" ><span >' + item[x].name + '</span></td>' +
                        '<td contenteditable="false" class="colDeductionsType">' + item[x].deductiontype + '</td>' +
                        '<td contenteditable="false" class="colDeductionsDisplayName">' + item[x].displayin + '</td>' +
                        '<td contenteditable="false" class="colDeductionsAmount text-right" ><span >' + item[x].amount + '</span></td>' +
                        '<td contenteditable="false" class="colDeductionsAccounts">' + item[x].accountname + '</td>' +
                        '<td contenteditable="false" class="colDeductionsAccountsID hiddenColumn">' + item[x].accountid + '</td>' +
                        '<td contenteditable="false" class="colDeductionsPAYG hiddenColumn" ><span >' + item[x].axempt + '</span></td>' +
                        '<td contenteditable="false" class="colDeductionsSuperannuation hiddenColumn">' + item[x].superinc + '</td>' +
                        '<td contenteditable="false" class="colDeductionsReportableasW1 hiddenColumn">' + item[x].workcover + '</td>' +                          
                        item[x].deletedata +
                        '</tr>');

                }
                $('.dataTables_info').html('Showing 1 to ' + data.tdeduction.length + ' of ' + data.tdeduction.length + ' entries');

            }

        } else {
            $('.fullScreenSpin').css('display', 'none');

            swal({
                title: 'Question',
                text: "Holiday does not exist, would you like to create it?",
                type: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes',
                cancelButtonText: 'No'
            }).then((result) => {
                if (result.value) {
                    FlowRouter.go('/payrollrules');
                } else if (result.dismiss === 'cancel') {
                    //$('#productListModal').modal('toggle');
                }
            });
             }
            }).catch(function (err) {
                $('.fullScreenSpin').css('display', 'none');
            });
        } else {

        $(".btnRefresh").trigger("click");
        }

    },
    'keyup #tblEarnings_filter input': function (event) {
        if($(event.target).val() != ''){
                  $(".btnRefreshEarnings").addClass('btnSearchAlert');
        }else{
                  $(".btnRefreshEarnings").removeClass('btnSearchAlert');
        }
        if (event.keyCode == 13) {
         $(".btnRefreshEarnings").trigger("click");
        }
    },
    'click .btnRefreshEarnings':function(event){
        let templateObject = Template.instance();
        let utilityService = new UtilityService();
        let tableProductList;
        const dataTableList = [];
        var splashArrayInvoiceList = new Array();
        const lineExtaSellItems = [];
        $('.fullScreenSpin').css('display', 'inline-block');
        let dataSearchName = $('#tblEarnings_filter input').val();
        if (dataSearchName.replace(/\s/g, '') != '') {
            sideBarService.getEarningByName(dataSearchName).then(function (data) {
                $(".btnRefreshEarnings").removeClass('btnSearchAlert');
                let lineItems = [];
                let lineItemObj = {};
                if (data.btnRefreshEarnings.length > 0) {
                    for (let i = 0; i < data.tordinarytimeearnings.length; i++) {
                    
                        var dataTableList = {
                            id:data.tordinarytimeearnings[i].fields.ID || '',
                            name:data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsName || '',
                            type:'Ordinary Time Earning',
                            displayName:data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsDisplayName || '',
                            ratetype:data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsRateType||'',
                            amount: '$100',
                            expamount:data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExpenseAccount || '',
                            holdingamount:data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExemptPaygWithholding || '',
                            expenseAccount:data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExpenseAccount || '',
                            connt:data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsExemptSuperannuationGuaranteeCont || '',
                            acvitiy: data.tordinarytimeearnings[i].fields.OrdinaryTimeEarningsReportableW1onActivityStatement || '',
                            deletedata:'<td contenteditable="false" class="colDeleteEarnings"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                        };
        
                        splashArrayInvoiceList.push(dataTableList);
                    }
                    templateObject.datatablerecords.set(splashArrayInvoiceList);
        
                    let item = templateObject.datatablerecords.get();
                    $('.fullScreenSpin').css('display', 'none');
                    if (splashArrayInvoiceList) {
                        var datatable = $('#tblEarnings').DataTable();
                        $("#tblEarnings > tbody").empty();
                        for (let x = 0; x < item.length; x++) {
                            $("#tblEarnings > tbody").append(
                                '<tr class="dnd-moved" id="' + item[x].id + '" style="cursor: pointer;">' +
                                '<td contenteditable="false" class="colEarningsID hiddenColumn">' + item[x].id + '</td>' +
                                '<td contenteditable="false" class="colEarningsNames" ><span >' + item[x].name + '</span></td>' +
                                '<td contenteditable="false" class="colEarningsType">' + item[x].type + '</td>' +
                                '<td contenteditable="false" class="colEarningsDisplayName" >' + item[x].displayName + '</td>' +
                                '<td contenteditable="false" class="colEarningsratetype">' + item[x].ratetype + '</td>' +
                                '<td contenteditable="false" class="colEarningsAmount" ><span >' + item[x].amount + '</span></td>' +
                                '<td contenteditable="false" class="colEarningsAccounts">' + item[x].expamount + '</td>' +
                                '<td contenteditable="false" class="colEarningsAccountsID hiddenColumn" >' + item[x].holdingamount + '</td>' +
                                '<td contenteditable="false" class="colEarningsPAYG hiddenColumn">' + item[x].expenseAccount + '</td>' +
                                '<td contenteditable="false" class="colEarningsSuperannuation hiddenColumn" ><span >' + item[x].connt + '</span></td>' +
                                '<td contenteditable="false" class="colEarningsReportableasW1 hiddenColumn">' + item[x].acvitiy + '</td>' +    
                                item[x].deletedata +
                                '</tr>');
        
                        }
                        $('.dataTables_info').html('Showing 1 to ' + data.tordinarytimeearnings.length + ' of ' + data.tordinarytimeearnings.length + ' entries');
        
                    }
        
                } else {
                    $('.fullScreenSpin').css('display', 'none');
        
                    swal({
                        title: 'Question',
                        text: "Earnings does not exist, would you like to create it?",
                        type: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No'
                    }).then((result) => {
                        if (result.value) {
                            FlowRouter.go('/payrollrules');
                        } else if (result.dismiss === 'cancel') {
                            //$('#productListModal').modal('toggle');
                        }
                    });
                }
            }).catch(function (err) {
                $('.fullScreenSpin').css('display', 'none');
            });
        } else {
        
          $(".btnRefresh").trigger("click");
        }



     },
    'keyup #tblLeave_filter input': function (event) {
        if($(event.target).val() != ''){
        $(".btnRefreshPaidLeave").addClass('btnSearchAlert');
        }else{
         $(".btnRefreshPaidLeave").removeClass('btnSearchAlert');
        }
        if (event.keyCode == 13) {
         $(".btnRefreshPaidLeave").trigger("click");
        }
    },
    'click .btnRefreshPaidLeave':function(event){
        let templateObject = Template.instance();
        let utilityService = new UtilityService();
        let tableProductList;
        const dataTableList = [];
        var splashArrayInvoiceList = new Array();
        const lineExtaSellItems = [];
        $('.fullScreenSpin').css('display', 'inline-block');
        let dataSearchName = $('#tblLeave_filter input').val();
        if (dataSearchName.replace(/\s/g, '') != '') {
          sideBarService.getPaidLeaveByName(dataSearchName).then(function (data) {
          $(".btnRefreshPaidLeave").removeClass('btnSearchAlert');
          let lineItems = [];
          let lineItemObj = {};
          if (data.tpaidleave.length > 0) {
            for (let i = 0; i < data.tpaidleave.length; i++) {
            
                var dataTableList = {
                    id:data.tpaidleave[i].fields.ID || '',
                    name:data.tpaidleave[i].fields.LeavePaidName || '',
                    units:data.tpaidleave[i].fields.LeavePaidUnits || '',
                    edtNormalEntitlement:data.tpaidleave[i].fields.LeavePaidNormalEntitlement || '',
                    loadingrate:data.tpaidleave[i].fields.LeavePaidLeaveLoadingRate || '',
                    type:true,
                    payonslip:data.tpaidleave[i].fields.LeavePaidShowBalanceOnPayslip || false,
                    deletedata:'<td contenteditable="false" class="colDeletepaidrem"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                };

                splashArrayInvoiceList.push(dataTableList);
            }
            templateObject.datatablerecords.set(splashArrayInvoiceList);

            let item = templateObject.datatablerecords.get();
            $('.fullScreenSpin').css('display', 'none');
            if (splashArrayInvoiceList) {
                var datatable = $('#tblLeave').DataTable();
                $("#tblLeave > tbody").empty();
                for (let x = 0; x < item.length; x++) {
                    $("#tblLeave > tbody").append(
                        '<tr class="dnd-moved" id="' + item[x].id + '" style="cursor: pointer;">' +
                        '<td contenteditable="false" class="colLeaveID hiddenColumn">' + item[x].id + '</td>' +
                        '<td contenteditable="false" class="colLeaveName" ><span >' + item[x].name + '</span></td>' +
                        '<td contenteditable="false" class="colLeaveUnits">' + item[x].units + '</td>' +
                        '<td contenteditable="false" class="colLeaveNormalEntitlement" >' + item[x].edtNormalEntitlement + '</td>' +
                        '<td contenteditable="false" class="colLeaveLeaveLoadingRate" ><span >' + item[x].loadingrate + '</span></td>' +
                        '<td contenteditable="false" class="colLeavePaidLeave">' + item[x].type + '</td>' +
                        '<td contenteditable="false" class="colLeaveShownOnPayslip" >' + item[x].payonslip + '</td>' +
                        item[x].deletedata +
                        '</tr>');

                }
                $('.dataTables_info').html('Showing 1 to ' + data.tpaidleave.length + ' of ' + data.tpaidleave.length + ' entries');

            }

        } else {
            $('.fullScreenSpin').css('display', 'none');

            swal({
                title: 'Question',
                text: "Leave does not exist, would you like to create it?",
                type: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes',
                cancelButtonText: 'No'
            }).then((result) => {
                if (result.value) {
                    FlowRouter.go('/payrollrules');
                } else if (result.dismiss === 'cancel') {
                    //$('#productListModal').modal('toggle');
                }
            });
        }
    }).catch(function (err) {
        $('.fullScreenSpin').css('display', 'none');
    });
} else {

  $(".btnRefresh").trigger("click");
}

    },
    'keyup #tblReimbursements_filter input': function (event) {
                        if($(event.target).val() != ''){
                          $(".btnRefreshReimbursements").addClass('btnSearchAlert');
                        }else{
                          $(".btnRefreshReimbursements").removeClass('btnSearchAlert');
                        }
                        if (event.keyCode == 13) {
                           $(".btnRefreshReimbursements").trigger("click");
                            }
    },
    'click .btnRefreshReimbursements':function(event){
        let templateObject = Template.instance();
        let utilityService = new UtilityService();
        let tableProductList;
        const dataTableList = [];
        var splashArrayInvoiceList = new Array();
        const lineExtaSellItems = [];
        $('.fullScreenSpin').css('display', 'inline-block');
        let dataSearchName = $('#tblReimbursements_filter input').val();
        if (dataSearchName.replace(/\s/g, '') != '') {
            sideBarService.getReimbursementByName(dataSearchName).then(function (data) {
                $(".btnRefreshReimbursements").removeClass('btnSearchAlert');
                let lineItems = [];
                let lineItemObj = {};
                if (data.treimbursement.length > 0) {
                    for (let i = 0; i < data.treimbursement.length; i++) {
                    
                        var dataTableList = {
                            id: data.treimbursement[i].fields.ID || '',
                            name:data.treimbursement[i].fields.ReimbursementName || '',
                            account:data.treimbursement[i].fields.ReimbursementAccount || 0,                        
                            deletedata:'<td contenteditable="false" class="colDeleterei"><span class="table-remove"><button type="button" class="btn btn-danger btn-rounded btn-sm my-0"><i class="fa fa-remove"></i></button></span>'
                        };
        
                        splashArrayInvoiceList.push(dataTableList);
                    }
                    templateObject.datatablerecords.set(splashArrayInvoiceList);
        
                    let item = templateObject.datatablerecords.get();
                    $('.fullScreenSpin').css('display', 'none');
                    if (splashArrayInvoiceList) {
                        var datatable = $('#tblReimbursements').DataTable();
                        $("#tblReimbursements > tbody").empty();
                        for (let x = 0; x < item.length; x++) {
                            $("#tblReimbursements > tbody").append(
                                '<tr class="dnd-moved" id="' + item[x].id + '" style="cursor: pointer;">' +
                                '<td contenteditable="false" class="colReimbursementID hiddenColumn">' + item[x].id + '</td>' +
                                '<td contenteditable="false" class="colReimbursementName" ><span >' + item[x].name + '</span></td>' +
                                '<td contenteditable="false" class="colReimbursementAccount">' + item[x].account + '</td>' +                           
                                item[x].deletedata +
                                '</tr>');
        
                        }
                        $('.dataTables_info').html('Showing 1 to ' + data.treimbursement.length + ' of ' + data.treimbursement.length + ' entries');
        
                    }
        
                } else {
                    $('.fullScreenSpin').css('display', 'none');
        
                    swal({
                        title: 'Question',
                        text: "Reimbursement does not exist, would you like to create it?",
                        type: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No'
                    }).then((result) => {
                        if (result.value) {
                            FlowRouter.go('/payrollrules');
                        } else if (result.dismiss === 'cancel') {
                            //$('#productListModal').modal('toggle');
                        }
                    });
                }
            }).catch(function (err) {
                $('.fullScreenSpin').css('display', 'none');
            });
        } else {
        
          $(".btnRefresh").trigger("click");
        }
        

    },
    'click .btnUploadFile':function(event){
        // $('#attachment-upload').val('');
        // $('.file-name').text('');
        //$(".btnImport").removeAttr("disabled");
        $('#fileInput').trigger('click');
    
     },
    

});

Template.payrollrules.helpers({
    datatablerecords: () => {
        return Template.instance().datatablerecords.get().sort(function(a, b) {
            if (a.code == 'NA') {
                return 1;
            } else if (b.code == 'NA') {
                return -1;
            }
            return (a.code.toUpperCase() > b.code.toUpperCase()) ? 1 : -1;
            // return (a.saledate.toUpperCase() < b.saledate.toUpperCase()) ? 1 : -1;
        });
    }
});
